export const data = {
  posts: [
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/clb2pww7e000308l363sz014m-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 453,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1669756201473/0TuToRnsz.png',
      autoGeneratedCover: '',
      brief:
        'Imagine testing APIs using your mobile device, either iPhone or Android. All APIs, including REST, GraphQL, WebSocket, SOAP, JSON RPC, XML, HTTP, and HTTPS.\nThis article will show how we can test APIs on mobile devices using API TESTER.\n\nPrerequisite...',
      content:
        '<p>Imagine testing APIs using your mobile device, either iPhone or Android. All APIs, including REST, GraphQL, WebSocket, SOAP, JSON RPC, XML, HTTP, and HTTPS.</p>\n<p>This article will show how we can test APIs on mobile devices using <a target="_blank" href="https://apitester.org/">API TESTER.</a></p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669160776325_image.png" alt /></p>\n<p>Prerequisites</p>\n<ol>\n<li>API TESTER Mobile Application</li>\n<li>Ready to Use API endpoints</li>\n</ol>\n<p>The API TESTER application is freely available for the following devices:</p>\n<ul>\n<li>iOS: <a target="_blank" href="https://apps.apple.com/us/app/api-tester-debug-requests/id1575521212">Download Link</a></li>\n<li>Android: <a target="_blank" href="https://play.google.com/store/apps/details?id=apitester.org">Download Link</a></li>\n<li>Huawei: <a target="_blank" href="https://appgallery.huawei.com/app/C107072573">Download Link</a></li>\n</ul>\n<p>This article will use demo API endpoints from JSONPlaceholder, which offers free fake REST API.</p>\n<p>https://jsonplaceholder.typicode.com/</p>\n<p>We will use two endpoints:</p>\n<pre><code>https:<span class="hljs-comment">//jsonplaceholder.typicode.com/posts</span>\nhttps:<span class="hljs-comment">//jsonplaceholder.typicode.com/todos</span>\n</code></pre><p>On a mobile device, open up the API Tester application:</p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669237388423_file.png" alt="Openning the API Tester Application" /></p>\n<p>To get started, click on the <code>Create new request</code> </p>\n<p>The next screen provides various options, from selecting the type of request, GET, POST, PUT, PATCH, DELETE, to importing APIs from external platforms like Postman.</p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669239919448_image10.png" alt /></p>\n<h2 id="heading-get-request">GET Request</h2>\n<p>Create a new <code>GET</code> request by tapping on the GET button:</p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669239958526_image9.png" alt /></p>\n<p>Give the request a name and paste in any of the API endpoints:</p>\n<pre><code>https:<span class="hljs-comment">//jsonplaceholder.typicode.com/posts</span>\nhttps:<span class="hljs-comment">//jsonplaceholder.typicode.com/todos</span>\n</code></pre><p><strong>Getting All Todos:</strong></p>\n<p>Paste in the endpoint: <code>https://jsonplaceholder.typicode.com/todos</code> and tap the blue play button on the top right.</p>\n<hr />\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669240286256_image4.png" alt /></p>\n<p>The response:</p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669240384497_image3.png" alt /></p>\n<p>When testing APIs, we usually test for all Request methods. Next, we’ll look at how to test for Sending a POST request.</p>\n<h2 id="heading-post-request">POST Request</h2>\n<p>To send a post request from API Tester mobile application, go to create a new request (+ icon) and select a <code>POST</code>. We will use the same endpoint as <code>GET</code> request:</p>\n<p><code>https://jsonplaceholder.typicode.com/todos</code></p>\n<p>To make a POST request, we will need to add a few options:</p>\n<p>The first step is to update the <code>Body</code> of the request. We will post data in JSON format, so tap on the Raw tab under the body section. </p>\n<p>Ensure the <strong>Content-Type</strong> is set to <strong>application/json.</strong></p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669638977127_IMG_3926.png" alt /></p>\n<p>The next step is to update the headers:</p>\n<pre><code>Content-Type application/json; charset=UTF<span class="hljs-number">-8</span>\n</code></pre><p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669638849493_IMG_3925.png" alt /></p>\n<p>To add the data to send, we head up to the <strong>Body</strong> section under the Raw tab and tap on post data</p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669639221569_IMG_3926+1.png" alt /></p>\n<p>Paste in the JSON data:</p>\n<pre><code>{\n<span class="hljs-string">"userId"</span>: <span class="hljs-number">1</span>,\n<span class="hljs-string">"title"</span>: <span class="hljs-string">"a big one"</span>,\n<span class="hljs-string">"body"</span>: <span class="hljs-string">"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"</span>\n}\n</code></pre><p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669639280294_IMG_3929.png" alt /></p>\n<p>Once that is done, tap on the blue play button on the top right of the application.\nIf everything is properly done, the app returns a response with status code 201 (Created), and a new id created with the new object posted</p>\n<p><img src="/static/img/pixel.gif" alt /></p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669639588255_IMG_3930.png" alt /></p>\n<h2 id="heading-conclusion">Conclusion</h2>\n<p>This article has explained the processes of using the API Tester mobile applications to test for APIs using <code>GET</code> and <code>POST</code> methods using a free test API endpoint.</p>\n<h2 id="heading-resources">Resources</h2>\n<p><a target="_blank" href="https://docs.apitester.org/">API Tester Guides</a></p>\n',
      contentMarkdown:
        'Imagine testing APIs using your mobile device, either iPhone or Android. All APIs, including REST, GraphQL, WebSocket, SOAP, JSON RPC, XML, HTTP, and HTTPS.\n\nThis article will show how we can test APIs on mobile devices using [API TESTER.](https://apitester.org/)\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669160776325_image.png)\n\n\nPrerequisites\n\n\n1. API TESTER Mobile Application\n2. Ready to Use API endpoints\n\nThe API TESTER application is freely available for the following devices:\n\n\n- iOS: [Download Link](https://apps.apple.com/us/app/api-tester-debug-requests/id1575521212)\n- Android: [Download Link](https://play.google.com/store/apps/details?id=apitester.org)\n- Huawei: [Download Link](https://appgallery.huawei.com/app/C107072573)\n\nThis article will use demo API endpoints from JSONPlaceholder, which offers free fake REST API.\n\nhttps://jsonplaceholder.typicode.com/\n\nWe will use two endpoints:\n\n\n    https://jsonplaceholder.typicode.com/posts\n    https://jsonplaceholder.typicode.com/todos\n\nOn a mobile device, open up the API Tester application:\n\n\n![Openning the API Tester Application](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669237388423_file.png)\n\n\nTo get started, click on the `Create new request` \n\nThe next screen provides various options, from selecting the type of request, GET, POST, PUT, PATCH, DELETE, to importing APIs from external platforms like Postman.\n\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669239919448_image10.png)\n\n## GET Request\n\nCreate a new `GET` request by tapping on the GET button:\n\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669239958526_image9.png)\n\n\nGive the request a name and paste in any of the API endpoints:\n\n\n    https://jsonplaceholder.typicode.com/posts\n    https://jsonplaceholder.typicode.com/todos\n\n**Getting All Todos:**\n\nPaste in the endpoint: `https://jsonplaceholder.typicode.com/todos` and tap the blue play button on the top right.\n****\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669240286256_image4.png)\n\n\nThe response:\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669240384497_image3.png)\n\n\nWhen testing APIs, we usually test for all Request methods. Next, we’ll look at how to test for Sending a POST request.\n\n\n## POST Request\n\nTo send a post request from API Tester mobile application, go to create a new request (+ icon) and select a `POST`. We will use the same endpoint as `GET` request:\n\n`https://jsonplaceholder.typicode.com/todos`\n\nTo make a POST request, we will need to add a few options:\n\nThe first step is to update the `Body` of the request. We will post data in JSON format, so tap on the Raw tab under the body section. \n\nEnsure the **Content-Type** is set to **application/json.**\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669638977127_IMG_3926.png)\n\n\nThe next step is to update the headers:\n\n\n    Content-Type application/json; charset=UTF-8\n\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669638849493_IMG_3925.png)\n\n\nTo add the data to send, we head up to the **Body** section under the Raw tab and tap on post data\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669639221569_IMG_3926+1.png)\n\n\nPaste in the JSON data:\n\n\n    {\n    "userId": 1,\n    "title": "a big one",\n    "body": "quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"\n    }\n    \n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669639280294_IMG_3929.png)\n\n\nOnce that is done, tap on the blue play button on the top right of the application.\nIf everything is properly done, the app returns a response with status code 201 (Created), and a new id created with the new object posted\n\n\n![](/static/img/pixel.gif)\n\n![](https://paper-attachments.dropboxusercontent.com/s_435E77D4839266934A06FAE2824FEB32CD7E7BC76FAD878447FEC5C1D56BE056_1669639588255_IMG_3930.png)\n\n\n\n## Conclusion\n\nThis article has explained the processes of using the API Tester mobile applications to test for APIs using `GET` and `POST` methods using a free test API endpoint.\n\n\n## Resources\n\n[API Tester Guides](https://docs.apitester.org/)\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95245',
        '56744723958ef13879b9549b',
        '568a9b8ce4c4e23aef243c1f',
        '56744722958ef13879b950bd',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5794.3402,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35484'],
      totalReactions: 1,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '6386765d150d683958755923',
      createdAt: '2022-11-29T21:15:09.197Z',
      updatedAt: '2022-11-29T21:15:09.197Z',
      type: 'story',
      partOfPublication: true,
      title: 'How to Test APIs on Mobile using API Tester',
      subtitle:
        'A quick guide on how you can test your APIs using a mobile Application',
      cuid: 'clb2pww7e000308l363sz014m',
      dateAdded: '2022-11-29T21:15:09.194Z',
      hasCustomDate: null,
      isCoverAttributionHidden: false,
      coverImageAttribution: '',
      coverImagePhotographer: '',
      slug: 'how-to-test-apis-on-mobile-using-api-tester',
      author: '5fb96bf21b7ab0041800d98f',
      isRepublished: false,
      originalArticleURL: null,
      readTime: 3,
      draft: '638675241ffdd93a69866306',
      publication: '5fb96c251b7ab0041800d995',
      ogImage: null,
      metaTitle: null,
      metaDescription: null,
      viewsUpdatedOn: 1671861663734,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      uniqueReactions: ['5c090d96c2a9c2a674d35484'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      id: '6386765d150d683958755923',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/clahvw9w1000m08mk6t07e6y8-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 35,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/unsplash/TkZYCXmrKK4/upload/v1667509619493/tU9VFsbwgf.jpeg',
      autoGeneratedCover: '',
      brief:
        'Bootstrap is one of the simplest and most used CSS libraries. This article will guide you on configuring a NextJs project with Bootstrap SCSS and JS files.\nCodesandbox Demo\nhttps://codesandbox.io/p/github/achingachris/next-bootstrap-template/draft/ze...',
      content:
        '<p>Bootstrap is one of the simplest and most used CSS libraries. This article will guide you on configuring a NextJs project with Bootstrap SCSS and JS files.</p>\n<p>Codesandbox Demo</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://codesandbox.io/p/github/achingachris/next-bootstrap-template/draft/zealous-archimedes">https://codesandbox.io/p/github/achingachris/next-bootstrap-template/draft/zealous-archimedes</a></div>\n<p>GitHub:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://github.com/achingachris/next-bootstrap-template/tree/config-bootstrap-scss-and-js\n">https://github.com/achingachris/next-bootstrap-template/tree/config-bootstrap-scss-and-js\n</a></div>\n<h2 id="heading-creating-a-nextjs-project">Creating a Next.js Project</h2>\n<p>If you already have a NextJS project, skip to the next step.</p>\n<p>On a terminal, run the following script to set up a NextJs project:</p>\n<pre><code class="lang-bash"> npx create-next-app@latest\n</code></pre>\n<p>After installation, run:</p>\n<pre><code class="lang-bash">    npm run dev\n</code></pre>\n<p>A successful setup will run on localhost:3000.</p>\n<h2 id="heading-installing-bootstrap">Installing Bootstrap</h2>\n<p>To install bootstrap, run the following script on the root of the project:</p>\n<pre><code>npm i bootstrap\n</code></pre><p>If you want to use bootstrap styles as they are, without any customization, import the styles to the file: <code>pages/_app.js</code></p>\n<pre><code><span class="hljs-keyword">import</span> <span class="hljs-string">\'bootstrap/dist/css/bootstrap.min.css\'</span>\n</code></pre><p>The updated file:</p>\n<pre><code><span class="hljs-keyword">import</span> <span class="hljs-string">\'bootstrap/dist/css/bootstrap.min.css\'</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'../styles/globals.css\'</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyApp</span>(<span class="hljs-params">{ Component, pageProps }</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span> {<span class="hljs-attr">...pageProps</span>} /&gt;</span></span>\n}\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> MyApp\n</code></pre><p>To test for a successful setup, edit <code>pages/app.js</code> to the following:</p>\n<pre><code><span class="hljs-keyword">import</span> Head <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/head\'</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>NextJS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">\'description\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">\'Generated by create next app\'</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">\'icon\'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">\'/favicon.ico\'</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'container\'</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'text-center\'</span>&gt;</span>NextJS Application<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  )\n}\n</code></pre><p>Run the development server to view the changes:</p>\n<pre><code>npm run dev\n</code></pre><p>NextJs runs on localhost:3000</p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_6E51278DFDF4307306192D0EAEAF220C26A723178B0E26A756E3222DBFAAB050_1667330256502_image.png" alt /></p>\n<p>If the text is centered, the setup was a success! Kudos </p>\n<h2 id="heading-configuring-bootstrap-with-scss">Configuring Bootstrap with SCSS</h2>\n<p>In most cases, you would love to customize most of Bootstrap’s styles. Bootstrap allows you to do that by using its SCSS files.</p>\n<p>Install <code>sass</code> by running:</p>\n<pre><code>npm install sass\n</code></pre><p>After that, you need to add the path to where the <code>.scss</code> files are. Add the following to the <code>next.config.js</code> file:</p>\n<pre><code>  sassOptions: {\n    <span class="hljs-attr">includePaths</span>: [path.join(__dirname, <span class="hljs-string">\'styles\'</span>)],\n  },\n</code></pre><p>The updated <code>next.config.js</code> file:</p>\n<pre><code><span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">reactStrictMode</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-attr">sassOptions</span>: {\n    <span class="hljs-attr">includePaths</span>: [path.join(__dirname, <span class="hljs-string">\'styles\'</span>)],\n  },\n}\n</code></pre><p>Next, inside the styles directory, create a new scss file: <code>customBootstrap.scss,</code> and add the following:</p>\n<pre><code>$theme-colors: (\n  <span class="hljs-string">\'primary\'</span>: #<span class="hljs-number">093</span>ea8,\n  <span class="hljs-string">\'secondary\'</span>: #<span class="hljs-number">3</span>bd7ec,\n  <span class="hljs-string">\'success\'</span>: #<span class="hljs-number">22e11</span>c,\n  <span class="hljs-string">\'info\'</span>: #d9ff50,\n  <span class="hljs-string">\'warning\'</span>: #ffbe0b,\n  <span class="hljs-string">\'danger\'</span>: #ff0000,\n  <span class="hljs-string">\'light\'</span>: #c0ccda,\n  <span class="hljs-string">\'dark\'</span>: #<span class="hljs-number">000103</span>,\n);\n@<span class="hljs-keyword">import</span> <span class="hljs-string">\'/node_modules/bootstrap/scss/bootstrap.scss\'</span>;\n</code></pre><p>By using <code>$theme-colors</code> you override bootstrap default values. </p>\n<p>To render the new changes, you update the import statement in <code>pages/app.js</code>:</p>\n<pre><code><span class="hljs-keyword">import</span> <span class="hljs-string">\'../styles/customBootstrap.scss\'</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'../styles/globals.css\'</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyApp</span>(<span class="hljs-params">{ Component, pageProps }</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span> {<span class="hljs-attr">...pageProps</span>} /&gt;</span></span>\n}\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> MyApp\n</code></pre><p>Add buttons with different colors to notice the difference from bootstrap’s default colors. You can do that by updating the <code>pages/index.js</code> file into:</p>\n<pre><code><span class="hljs-keyword">import</span> Head <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/head\'</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>NextJS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">\'description\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">\'Generated by create next app\'</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">\'icon\'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">\'/favicon.ico\'</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'container\'</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'text-center\'</span>&gt;</span>NextJS Application<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'btn btn-primary m-2\'</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'btn btn-secondary m-2\'</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'btn btn-danger m-2\'</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  )\n}\n</code></pre><p><img src="https://paper-attachments.dropboxusercontent.com/s_6E51278DFDF4307306192D0EAEAF220C26A723178B0E26A756E3222DBFAAB050_1667332058247_image.png" alt /></p>\n<p>Congratulations! You did it.\nOne more thing…</p>\n<h2 id="heading-using-bootstrap-js">Using Bootstrap JS</h2>\n<p>There are a number of ways to add Bootstrap JS scripts to a NextJS application. For this article, you will use the simplest and most effective way, using the <code>useEffect</code> hook. </p>\n<p>To do that, you will edit the <code>pages``/``**_app.js**</code> file to:</p>\n<pre><code><span class="hljs-keyword">import</span> { useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'../styles/customBootstrap.scss\'</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'../styles/globals.css\'</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyApp</span>(<span class="hljs-params">{ Component, pageProps }</span>) </span>{\n  useEffect(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">import</span>(<span class="hljs-string">\'bootstrap/dist/js/bootstrap\'</span>)\n  }, [])\n\n  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span> {<span class="hljs-attr">...pageProps</span>} /&gt;</span></span>\n}\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> MyApp\n</code></pre><p>To test a successful configuration, add the following snippet inside the <code>index.js</code> file:</p>\n<pre><code>          {<span class="hljs-comment">/* Button trigger modal */</span>}\n          &lt;button\n            type=<span class="hljs-string">\'button\'</span>\n            className=<span class="hljs-string">\'btn btn-primary\'</span>\n            data-bs-toggle=<span class="hljs-string">\'modal\'</span>\n            data-bs-target=<span class="hljs-string">\'#exampleModal\'</span>\n          &gt;\n            Launch demo modal\n          &lt;/button&gt;\n          {<span class="hljs-comment">/* Modal */</span>}\n          &lt;div\n            className=<span class="hljs-string">\'modal fade\'</span>\n            id=<span class="hljs-string">\'exampleModal\'</span>\n            tabIndex={<span class="hljs-number">-1</span>}\n            aria-labelledby=<span class="hljs-string">\'exampleModalLabel\'</span>\n            aria-hidden=<span class="hljs-string">\'true\'</span>\n          &gt;\n            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'modal-dialog\'</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'modal-content\'</span>&gt;</span>\n                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'modal-header\'</span>&gt;</span>\n                  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'modal-title fs-5\'</span> <span class="hljs-attr">id</span>=<span class="hljs-string">\'exampleModalLabel\'</span>&gt;</span>\n                    Modal title\n                  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n                  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>\n                    <span class="hljs-attr">type</span>=<span class="hljs-string">\'button\'</span>\n                    <span class="hljs-attr">className</span>=<span class="hljs-string">\'btn-close\'</span>\n                    <span class="hljs-attr">data-bs-dismiss</span>=<span class="hljs-string">\'modal\'</span>\n                    <span class="hljs-attr">aria-label</span>=<span class="hljs-string">\'Close\'</span>\n                  /&gt;</span>\n                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'modal-body\'</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'modal-footer\'</span>&gt;</span>\n                  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>\n                    <span class="hljs-attr">type</span>=<span class="hljs-string">\'button\'</span>\n                    <span class="hljs-attr">className</span>=<span class="hljs-string">\'btn btn-secondary\'</span>\n                    <span class="hljs-attr">data-bs-dismiss</span>=<span class="hljs-string">\'modal\'</span>\n                  &gt;</span>\n                    Close\n                  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n                  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">\'button\'</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'btn btn-primary\'</span>&gt;</span>\n                    Save changes\n                  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n          &lt;/div&gt;\n</code></pre><p>Run the local server and on the Launch Modal button and observe what happens</p>\n<p><a target="_blank" href="https://www.loom.com/share/72691116ea254efb98a3f45eea7bc71c">NextJS - 3 November 2022 - Watch Video</a></p>\n<p><img src="https://cdn.loom.com/sessions/thumbnails/72691116ea254efb98a3f45eea7bc71c-with-play.gif" alt /></p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_6E51278DFDF4307306192D0EAEAF220C26A723178B0E26A756E3222DBFAAB050_1667502618720_image.png" alt /></p>\n<p><img src="https://paper-attachments.dropboxusercontent.com/s_6E51278DFDF4307306192D0EAEAF220C26A723178B0E26A756E3222DBFAAB050_1667502628356_image.png" alt /></p>\n<p>If a modal box pops up! Congratulations, you did it.</p>\n',
      contentMarkdown:
        "Bootstrap is one of the simplest and most used CSS libraries. This article will guide you on configuring a NextJs project with Bootstrap SCSS and JS files.\n\nCodesandbox Demo\n\n%[https://codesandbox.io/p/github/achingachris/next-bootstrap-template/draft/zealous-archimedes]\n\n\nGitHub:\n\n%[https://github.com/achingachris/next-bootstrap-template/tree/config-bootstrap-scss-and-js\n]\n\n## Creating a Next.js Project\n\nIf you already have a NextJS project, skip to the next step.\n\nOn a terminal, run the following script to set up a NextJs project:\n\n```bash\n npx create-next-app@latest\n```\n\nAfter installation, run:\n\n```bash\n    npm run dev\n```\n\nA successful setup will run on localhost:3000.\n\n\n## Installing Bootstrap\n\nTo install bootstrap, run the following script on the root of the project:\n\n\n    npm i bootstrap\n\nIf you want to use bootstrap styles as they are, without any customization, import the styles to the file: `pages/_app.js`\n\n\n    import 'bootstrap/dist/css/bootstrap.min.css'\n\nThe updated file:\n\n\n    import 'bootstrap/dist/css/bootstrap.min.css'\n    import '../styles/globals.css'\n    \n    function MyApp({ Component, pageProps }) {\n      return <Component {...pageProps} />\n    }\n    export default MyApp\n\nTo test for a successful setup, edit `pages/app.js` to the following:\n\n\n    import Head from 'next/head'\n    export default function Home() {\n      return (\n        <>\n          <Head>\n            <title>NextJS</title>\n            <meta name='description' content='Generated by create next app' />\n            <link rel='icon' href='/favicon.ico' />\n          </Head>\n          <main className='container'>\n            <h1 className='text-center'>NextJS Application</h1>\n          </main>\n        </>\n      )\n    }\n\nRun the development server to view the changes:\n\n\n    npm run dev\n\nNextJs runs on localhost:3000\n\n\n![](https://paper-attachments.dropboxusercontent.com/s_6E51278DFDF4307306192D0EAEAF220C26A723178B0E26A756E3222DBFAAB050_1667330256502_image.png)\n\n\nIf the text is centered, the setup was a success! Kudos \n\n\n## Configuring Bootstrap with SCSS\n\nIn most cases, you would love to customize most of Bootstrap’s styles. Bootstrap allows you to do that by using its SCSS files.\n\nInstall `sass` by running:\n\n\n    npm install sass\n\nAfter that, you need to add the path to where the `.scss` files are. Add the following to the `next.config.js` file:\n\n\n      sassOptions: {\n        includePaths: [path.join(__dirname, 'styles')],\n      },\n\nThe updated `next.config.js` file:\n\n\n    module.exports = {\n      reactStrictMode: true,\n      sassOptions: {\n        includePaths: [path.join(__dirname, 'styles')],\n      },\n    }\n\nNext, inside the styles directory, create a new scss file: `customBootstrap.scss,` and add the following:\n\n\n    $theme-colors: (\n      'primary': #093ea8,\n      'secondary': #3bd7ec,\n      'success': #22e11c,\n      'info': #d9ff50,\n      'warning': #ffbe0b,\n      'danger': #ff0000,\n      'light': #c0ccda,\n      'dark': #000103,\n    );\n    @import '/node_modules/bootstrap/scss/bootstrap.scss';\n\nBy using `$theme-colors` you override bootstrap default values. \n\nTo render the new changes, you update the import statement in `pages/app.js`:\n\n\n    import '../styles/customBootstrap.scss'\n    import '../styles/globals.css'\n    function MyApp({ Component, pageProps }) {\n      return <Component {...pageProps} />\n    }\n    export default MyApp\n\nAdd buttons with different colors to notice the difference from bootstrap’s default colors. You can do that by updating the `pages/index.js` file into:\n\n\n    import Head from 'next/head'\n    export default function Home() {\n      return (\n        <>\n          <Head>\n            <title>NextJS</title>\n            <meta name='description' content='Generated by create next app' />\n            <link rel='icon' href='/favicon.ico' />\n          </Head>\n          <main className='container'>\n            <h1 className='text-center'>NextJS Application</h1>\n            <button className='btn btn-primary m-2'>Button</button>\n            <button className='btn btn-secondary m-2'>Button</button>\n            <button className='btn btn-danger m-2'>Button</button>\n          </main>\n        </>\n      )\n    }\n\n\n![](https://paper-attachments.dropboxusercontent.com/s_6E51278DFDF4307306192D0EAEAF220C26A723178B0E26A756E3222DBFAAB050_1667332058247_image.png)\n\n\nCongratulations! You did it.\nOne more thing…\n\n\n## Using Bootstrap JS\n\nThere are a number of ways to add Bootstrap JS scripts to a NextJS application. For this article, you will use the simplest and most effective way, using the `useEffect` hook. \n\nTo do that, you will edit the `pages``/``**_app.js**` file to:\n\n\n    import { useEffect } from 'react'\n    import '../styles/customBootstrap.scss'\n    import '../styles/globals.css'\n    function MyApp({ Component, pageProps }) {\n      useEffect(() => {\n        import('bootstrap/dist/js/bootstrap')\n      }, [])\n      \n      return <Component {...pageProps} />\n    }\n    export default MyApp\n\nTo test a successful configuration, add the following snippet inside the `index.js` file:\n\n\n              {/* Button trigger modal */}\n              <button\n                type='button'\n                className='btn btn-primary'\n                data-bs-toggle='modal'\n                data-bs-target='#exampleModal'\n              >\n                Launch demo modal\n              </button>\n              {/* Modal */}\n              <div\n                className='modal fade'\n                id='exampleModal'\n                tabIndex={-1}\n                aria-labelledby='exampleModalLabel'\n                aria-hidden='true'\n              >\n                <div className='modal-dialog'>\n                  <div className='modal-content'>\n                    <div className='modal-header'>\n                      <h1 className='modal-title fs-5' id='exampleModalLabel'>\n                        Modal title\n                      </h1>\n                      <button\n                        type='button'\n                        className='btn-close'\n                        data-bs-dismiss='modal'\n                        aria-label='Close'\n                      />\n                    </div>\n                    <div className='modal-body'>...</div>\n                    <div className='modal-footer'>\n                      <button\n                        type='button'\n                        className='btn btn-secondary'\n                        data-bs-dismiss='modal'\n                      >\n                        Close\n                      </button>\n                      <button type='button' className='btn btn-primary'>\n                        Save changes\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\nRun the local server and on the Launch Modal button and observe what happens\n\n[NextJS - 3 November 2022 - Watch Video](https://www.loom.com/share/72691116ea254efb98a3f45eea7bc71c)\n\n![](https://cdn.loom.com/sessions/thumbnails/72691116ea254efb98a3f45eea7bc71c-with-play.gif)\n\n\n\n![](https://paper-attachments.dropboxusercontent.com/s_6E51278DFDF4307306192D0EAEAF220C26A723178B0E26A756E3222DBFAAB050_1667502618720_image.png)\n\n![](https://paper-attachments.dropboxusercontent.com/s_6E51278DFDF4307306192D0EAEAF220C26A723178B0E26A756E3222DBFAAB050_1667502628356_image.png)\n\n\nIf a modal box pops up! Congratulations, you did it.\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '584879f0c0aaf085e2012086',
        '56744721958ef13879b94be1',
        '56744723958ef13879b95434',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5766.346,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '63733d80dea2d8bbe0bb661b',
      createdAt: '2022-11-15T07:19:28.275Z',
      updatedAt: '2022-11-15T07:19:28.275Z',
      type: 'story',
      partOfPublication: true,
      title: 'How to configure Bootstrap SCSS and JS into a NextJS Project',
      cuid: 'clahvw9w1000m08mk6t07e6y8',
      dateAdded: '2022-11-15T07:19:28.273Z',
      hasCustomDate: null,
      isCoverAttributionHidden: false,
      coverImageAttribution: 'https://unsplash.com/@nickkarvounis',
      coverImagePhotographer: 'Nick Karvounis',
      slug: 'how-to-configure-bootstrap-scss-and-js-into-a-nextjs-project',
      author: '5fb96bf21b7ab0041800d98f',
      isRepublished: false,
      originalArticleURL: '',
      readTime: 3,
      draft: '63642d2274539f9121c849de',
      publication: '5fb96c251b7ab0041800d995',
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      viewsUpdatedOn: 1671872460676,
      series: null,
      __v: 1,
      badges: [],
      contributors: [],
      dateUpdated: '2022-11-19T10:34:18.176Z',
      pendingPublicationApproval: false,
      pollOptions: [],
      questionReplies: [],
      stickCoverToBottom: false,
      subtitle: '',
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '63733d80dea2d8bbe0bb661b',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl9ee64pf000h09mh2jq71gna-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 568,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/unsplash/ot5kWZkH97s/upload/v1666103604086/9aL54Mk0o.jpeg',
      autoGeneratedCover: '',
      brief:
        "json-server is a tool for creating mock REST API fast! To get started, ensure you have the following requirements:\n\nNodeJS (npm)\n\n\nLet's get started!\n\nOn an empty folder, initiate a nodejs application by running the following on your terminal/CMD:\nnp...",
      content:
        '<p><code>json-server</code> is a tool for creating mock REST API fast! To get started, ensure you have the following requirements:</p>\n<ol>\n<li>NodeJS (npm)</li>\n</ol>\n<blockquote>\n<p>Let\'s get started!</p>\n</blockquote>\n<p>On an empty folder, initiate a nodejs application by running the following on your terminal/CMD:</p>\n<pre><code class="lang-shell">npm init -y\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666104260278/mP6C7CN2d.png" alt="image.png" /></p>\n<p>Once that is complete, you install the following packages:</p>\n<ul>\n<li><code>json-server</code></li>\n<li><code>json-serve</code></li>\n<li><code>cors</code></li>\n<li><code>nodemon</code> (as a dev dependency)</li>\n</ul>\n<pre><code class="lang-shell">npm install json-server json-serve cors\n</code></pre>\n<pre><code class="lang-shell">npm install -D nodemon\n</code></pre>\n<p>After the installation, create a new file: <code>index.js</code>. This is the entry point for the json-serve. Add the following inside the file:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> jsonServer = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'json-server\'</span>)\n<span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'cors\'</span>)\n<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'path\'</span>)\n\n<span class="hljs-keyword">const</span> server = jsonServer.create()\n<span class="hljs-keyword">const</span> router = jsonServer.router(path.join(__dirname, <span class="hljs-string">\'db.json\'</span>))\n<span class="hljs-keyword">const</span> middlewares = jsonServer.defaults()\n\nserver.use(cors())\nserver.use(jsonServer.bodyParser)\nserver.use(middlewares)\nserver.use(router)\n\n<span class="hljs-keyword">const</span> PORT = <span class="hljs-number">8000</span>\n\nserver.listen(PORT, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`JSON Server is running on http://localhost:<span class="hljs-subst">${PORT}</span>`</span>)\n})\n</code></pre>\n<p>In the code above, a server has been created that will be fetching and updating data from a json file, <code>db.json</code></p>\n<p>In the project root, create a new file: <code>db.json</code> and add the following:</p>\n<pre><code class="lang-JSON">{\n    <span class="hljs-attr">"feedback"</span>: [\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,\n            <span class="hljs-attr">"rating"</span>: <span class="hljs-number">10</span>,\n            <span class="hljs-attr">"user_name"</span>: <span class="hljs-string">"Tony Stark"</span>,\n            <span class="hljs-attr">"text"</span>: <span class="hljs-string">"You are the ironman of this world"</span>\n        },\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">2</span>,\n            <span class="hljs-attr">"rating"</span>: <span class="hljs-number">9</span>,\n            <span class="hljs-attr">"user_name"</span>: <span class="hljs-string">"Bruce Wayne"</span>,\n            <span class="hljs-attr">"text"</span>: <span class="hljs-string">"You are the batman of this world"</span>\n        },\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">3</span>,\n            <span class="hljs-attr">"rating"</span>: <span class="hljs-number">8</span>,\n            <span class="hljs-attr">"user_name"</span>: <span class="hljs-string">"Peter Parker"</span>,\n            <span class="hljs-attr">"text"</span>: <span class="hljs-string">"You are the spiderman of this world"</span>\n        }\n    ]\n}\n</code></pre>\n<p>The mock server is ready to run, but let\'s add some scripts in <code>package.json</code>:</p>\n<p>Update the <code>"scripts"</code> to:</p>\n<pre><code class="lang-JSON">  <span class="hljs-string">"scripts"</span>: {\n    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"node index.js"</span>,\n    <span class="hljs-attr">"dev"</span>: <span class="hljs-string">"nodemon index.js"</span>\n  },\n</code></pre>\n<p>To run the server, use either of the scripts:</p>\n<pre><code class="lang-shell">npm run start\n</code></pre>\n<p>The server runs on port 8000:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666106933814/ZcGrHylgC.png" alt="image.png" /></p>\n<p>http://localhost:8000/:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666107072195/FDu1-KBvd.png" alt="image.png" /></p>\n<p>The API endpoint is: <code>http://localhost:8000/feedback</code></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666107202771/xNcnZubfw.png" alt="image.png" /></p>\n<p>The following images show the GET and POST methods:</p>\n<h4 id="heading-get">GET</h4>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666107404425/kQSKiaybw.png" alt="image.png" /></p>\n<h4 id="heading-post">POST</h4>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666107433130/h11ahTN0d.png" alt="image.png" /></p>\n<p>After POST.ing new data, the <code>db.json</code> files update the latest entry.</p>\n<h2 id="heading-deploying-to-cyclicsh">Deploying to cyclic.sh</h2>\n<p>Create an account at cyclic.sh (link account to your GitHub profile). Then upload the mock server to <a target="_blank" href="https://github.com/achingachris/yelpme-json-server">GitHub</a>.</p>\n<p>To deploy on cyclic, click the green deploy button on the dashboard:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666107972211/f1yCbvsh6.png" alt="image.png" /></p>\n<p>Select the <code>Link Your Own</code> tab to select from GitHub:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666108043995/iwrmCCa4f.png" alt="image.png" /></p>\n<p>Search for the repo and click connect:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666108156132/vBT-zszlJ.png" alt="image.png" /></p>\n<p>After a successful deployment:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666108746193/H_BbeXEZG.png" alt="image.png" /></p>\n<p>Just like that you have your simple server/API ready for use!</p>\n',
      contentMarkdown:
        '`json-server` is a tool for creating mock REST API fast! To get started, ensure you have the following requirements:\n\n1. NodeJS (npm)\n\n>Let\'s get started!\n\nOn an empty folder, initiate a nodejs application by running the following on your terminal/CMD:\n\n```shell\nnpm init -y\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666104260278/mP6C7CN2d.png align="left")\n\nOnce that is complete, you install the following packages:\n\n- `json-server`\n- `json-serve`\n- `cors`\n- `nodemon` (as a dev dependency)\n\n```shell\nnpm install json-server json-serve cors\n```\n\n```shell\nnpm install -D nodemon\n```\n\nAfter the installation, create a new file: `index.js`. This is the entry point for the json-serve. Add the following inside the file:\n\n```js\nconst jsonServer = require(\'json-server\')\nconst cors = require(\'cors\')\nconst path = require(\'path\')\n\nconst server = jsonServer.create()\nconst router = jsonServer.router(path.join(__dirname, \'db.json\'))\nconst middlewares = jsonServer.defaults()\n\nserver.use(cors())\nserver.use(jsonServer.bodyParser)\nserver.use(middlewares)\nserver.use(router)\n\nconst PORT = 8000\n\nserver.listen(PORT, () => {\n  console.log(`JSON Server is running on http://localhost:${PORT}`)\n})\n```\n\nIn the code above, a server has been created that will be fetching and updating data from a json file, `db.json`\n\nIn the project root, create a new file: `db.json` and add the following:\n\n```JSON\n{\n    "feedback": [\n        {\n            "id": 1,\n            "rating": 10,\n            "user_name": "Tony Stark",\n            "text": "You are the ironman of this world"\n        },\n        {\n            "id": 2,\n            "rating": 9,\n            "user_name": "Bruce Wayne",\n            "text": "You are the batman of this world"\n        },\n        {\n            "id": 3,\n            "rating": 8,\n            "user_name": "Peter Parker",\n            "text": "You are the spiderman of this world"\n        }\n    ]\n}\n```\n\nThe mock server is ready to run, but let\'s add some scripts in `package.json`:\n\nUpdate the `"scripts"` to:\n\n```JSON\n  "scripts": {\n    "start": "node index.js",\n    "dev": "nodemon index.js"\n  },\n```\n\nTo run the server, use either of the scripts:\n\n```shell\nnpm run start\n```\n\nThe server runs on port 8000:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666106933814/ZcGrHylgC.png align="left")\n\nhttp://localhost:8000/:\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666107072195/FDu1-KBvd.png align="left")\n\nThe API endpoint is: `http://localhost:8000/feedback`\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666107202771/xNcnZubfw.png align="left")\n\nThe following images show the GET and POST methods:\n\n#### GET\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666107404425/kQSKiaybw.png align="left")\n\n#### POST\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666107433130/h11ahTN0d.png align="left")\n\nAfter POST.ing new data, the `db.json` files update the latest entry.\n\n## Deploying to cyclic.sh\n\nCreate an account at cyclic.sh (link account to your GitHub profile). Then upload the mock server to [GitHub](https://github.com/achingachris/yelpme-json-server).\n\nTo deploy on cyclic, click the green deploy button on the dashboard:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666107972211/f1yCbvsh6.png align="left")\n\nSelect the `Link Your Own` tab to select from GitHub:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666108043995/iwrmCCa4f.png align="left")\n\nSearch for the repo and click connect:\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666108156132/vBT-zszlJ.png align="left")\n\nAfter a successful deployment:\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1666108746193/H_BbeXEZG.png align="left")\n\nJust like that you have your simple server/API ready for use!\n\n\n\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94dec',
        '56744721958ef13879b94e17',
        '56744721958ef13879b94cad',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5714.5108,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
      ],
      totalReactions: 17,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '634ecd8effe34d56ce223c26',
      createdAt: '2022-10-18T16:00:14.164Z',
      updatedAt: '2022-10-18T16:00:14.164Z',
      type: 'story',
      partOfPublication: true,
      title: 'How To Create and Deploy a json-server',
      subtitle:
        'A short step by step by step guide to creating a JSON-DB server and deploying it on cyclic.sh',
      cuid: 'cl9ee64pf000h09mh2jq71gna',
      dateAdded: '2022-10-18T16:00:14.163Z',
      hasCustomDate: null,
      isCoverAttributionHidden: false,
      coverImageAttribution: 'https://unsplash.com/@kineticbear',
      coverImagePhotographer: 'Jacob Miller',
      slug: 'how-to-create-and-deploy-a-json-server',
      author: '5fb96bf21b7ab0041800d98f',
      isRepublished: false,
      originalArticleURL: null,
      readTime: 2,
      draft: '634eb8eafda6478de1d19a85',
      publication: '5fb96c251b7ab0041800d995',
      ogImage: null,
      metaTitle: null,
      metaDescription: null,
      viewsUpdatedOn: 1671881460989,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 3,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
      },
      sB: true,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 3,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
      },
      id: '634ecd8effe34d56ce223c26',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl8iu6xx700e7r0nvbahp8zco-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 155,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/unsplash/vZJdYl5JVXY/upload/v1664195223101/s1wKETJSW.jpeg',
      autoGeneratedCover: '',
      brief:
        'In my first week in phase 2 of Moringa School Software Engineering classes, I covered the basics of getting data from APIs and working with forms. The Code Challenge for the week had the following tasks:\n\nFetch Transactions from an API and tabulate t...',
      content:
        '<p>In my first week in phase 2 of Moringa School Software Engineering classes, I covered the basics of getting data from APIs and working with forms. The Code Challenge for the week had the following tasks:</p>\n<ol>\n<li>Fetch Transactions from an API and tabulate them.</li>\n<li>Add new transactions. The transaction added should be posted to the backend API.</li>\n<li>FIlter out transactions by description</li>\n</ol>\n<p>The initial code for the challenge is in this <a target="_blank" href="https://github.com/achingachris/phase2-week1-codechallenge/tree/ee4bdba8aec6821633fd7944e868e1f6a03b072a">commit</a>.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://github.com/achingachris/phase2-week1-codechallenge/tree/ee4bdba8aec6821633fd7944e868e1f6a03b072a">https://github.com/achingachris/phase2-week1-codechallenge/tree/ee4bdba8aec6821633fd7944e868e1f6a03b072a</a></div>\n<p>Before I started, I installed <a target="_blank" href="https://www.npmjs.com/package/concurrently">concurrently</a> an npm package that allows one to run multiple commands concurrently. Like npm run watch-js &amp; npm run watch-less but better. I wanted to run both react server and json.db server from one script:</p>\n<p><code>npm run dev</code></p>\n<pre><code class="lang-json">  <span class="hljs-string">"scripts"</span>: {\n    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"PORT=8000 react-scripts start"</span>,\n    <span class="hljs-attr">"server"</span>: <span class="hljs-string">"json-server --watch db.json -p 8001"</span>,\n    <span class="hljs-attr">"dev"</span>: <span class="hljs-string">"concurrently \\"npm start\\" \\"npm run server\\""</span>\n  },\n</code></pre>\n<h2 id="heading-fetch-transactions-from-an-api-and-tabulate-them">Fetch Transactions from an API and tabulate them.</h2>\n<p>I edited the <code>Transaction.js</code> file:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Transaction</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{"your code here..."}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{"your code here..."}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{"your code here..."}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{"your code here..."}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span>\n  );\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Transaction;\n</code></pre>\n<p>First, the <code>transaction</code> prop will be added, passing in data rendered from the API.\nFrom the API, data will have the following: id, date, description, category, and amount. So I updated the component to:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Transaction</span>(<span class="hljs-params">{ transaction }</span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{transaction.date}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{transaction.description}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{transaction.category}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{transaction.amount}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Transaction\n</code></pre>\n<p>Next step, I climbed up to the <code>TransactionList</code> component, where I was supposed to render the data.</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n<span class="hljs-keyword">import</span> Transaction <span class="hljs-keyword">from</span> <span class="hljs-string">"./Transaction"</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TransactionsList</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui celled striped padded table"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui center aligned header"</span>&gt;</span>Date<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui center aligned header"</span>&gt;</span>Description<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui center aligned header"</span>&gt;</span>Category<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui center aligned header"</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>\n        {/* render a list of <span class="hljs-tag">&lt;<span class="hljs-name">Transaction</span>&gt;</span> components here */}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>\n  );\n}\n\nexport default TransactionsList;</span>\n</code></pre>\n<p>I added the prop <code>transaction</code> to the component, so I can fetch data from the upper-level component, <code>AccountContainer</code>. The data returned will be an array. So I mapped through the array "transaction" and displayed each item in a table.</p>\n<pre><code class="lang-js">{transaction.map(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Transaction</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{data.id}</span> <span class="hljs-attr">transaction</span>=<span class="hljs-string">{data}</span> /&gt;</span></span>\n))}\n</code></pre>\n<p>Here is the updated component:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n<span class="hljs-keyword">import</span> Transaction <span class="hljs-keyword">from</span> <span class="hljs-string">\'./Transaction\'</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TransactionsList</span>(<span class="hljs-params">{ transaction }</span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui celled striped padded table\'</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui center aligned header\'</span>&gt;</span>Date<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui center aligned header\'</span>&gt;</span>Description<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui center aligned header\'</span>&gt;</span>Category<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui center aligned header\'</span>&gt;</span>Amount<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>\n        {transaction.map((data) =&gt; (\n          <span class="hljs-tag">&lt;<span class="hljs-name">Transaction</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{data.id}</span> <span class="hljs-attr">transaction</span>=<span class="hljs-string">{data}</span> /&gt;</span>\n        ))}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TransactionsList\n</code></pre>\n<p>Next is to climb up to a higher level component: <code>AccountContainer</code></p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n<span class="hljs-keyword">import</span> TransactionsList <span class="hljs-keyword">from</span> <span class="hljs-string">"./TransactionsList"</span>;\n<span class="hljs-keyword">import</span> Search <span class="hljs-keyword">from</span> <span class="hljs-string">"./Search"</span>;\n<span class="hljs-keyword">import</span> AddTransactionForm <span class="hljs-keyword">from</span> <span class="hljs-string">"./AddTransactionForm"</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AccountContainer</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">AddTransactionForm</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">TransactionsList</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AccountContainer;\n</code></pre>\n<p>I used Hooks and useEffects to get data from the API.</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React, { useEffect, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n<span class="hljs-keyword">import</span> TransactionsList <span class="hljs-keyword">from</span> <span class="hljs-string">\'./TransactionsList\'</span>\n<span class="hljs-keyword">import</span> Search <span class="hljs-keyword">from</span> <span class="hljs-string">\'./Search\'</span>\n<span class="hljs-keyword">import</span> AddTransactionForm <span class="hljs-keyword">from</span> <span class="hljs-string">\'./AddTransactionForm\'</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AccountContainer</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">const</span> [searchItem, setSearchItem] = useState(<span class="hljs-string">\'\'</span>)\n  <span class="hljs-keyword">const</span> [transactions, setTransactions] = useState([])\n\n  <span class="hljs-comment">// get transactions from API</span>\n  useEffect(<span class="hljs-function">() =&gt;</span> {\n    fetch(<span class="hljs-string">\'http://localhost:8001/transactions\'</span>)\n      .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> response.json())\n      .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n        setTransactions(data)\n      })\n  }, [])\n\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">AddTransactionForm</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">TransactionsList</span> <span class="hljs-attr">transaction</span>=<span class="hljs-string">{transactions}</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AccountContainer\n</code></pre>\n<p>Running the server to view the changes:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1664198387938/h08cfu0Sq.png" alt="image.png" /></p>\n<h2 id="heading-add-new-transactions-the-transaction-added-should-be-posted-to-the-backend-api">Add new transactions. The transaction added should be posted to the backend API.</h2>\n<p>To add new transaction, I started with the <code>AddTransactionForm</code> component.</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AddTransactionForm</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui segment"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui form"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"inline fields"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"date"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"date"</span> /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Description"</span> /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"category"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Category"</span> /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"amount"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Amount"</span> <span class="hljs-attr">step</span>=<span class="hljs-string">"0.01"</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui button"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>\n          Add Transaction\n        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AddTransactionForm;\n</code></pre>\n<p>First I install <code>uuid</code> to assign a unique ID to every transaction added.</p>\n<p><code>npm i uuid</code></p>\n<p>Then used state hooks to capture values, and create an event handler to send the data to the API once the form is submitted:</p>\n<pre><code class="lang-js">  <span class="hljs-keyword">const</span> handleChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n    e.preventDefault()\n    <span class="hljs-keyword">const</span> newTransaction = {\n      <span class="hljs-attr">id</span>: uuid(),\n      <span class="hljs-attr">date</span>: date,\n      <span class="hljs-attr">description</span>: description,\n      <span class="hljs-attr">category</span>: category,\n      <span class="hljs-attr">amount</span>: amount,\n    }\n    fetch(<span class="hljs-string">\'http://localhost:8001/transactions\'</span>, {\n      <span class="hljs-attr">method</span>: <span class="hljs-string">\'POST\'</span>,\n      <span class="hljs-attr">headers</span>: {\n        <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/json\'</span>,\n      },\n      <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(newTransaction),\n    })\n      .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> resp.json())\n      .then(<span class="hljs-function">(<span class="hljs-params">newQuestion</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(newQuestion))\n  }\n</code></pre>\n<p>The updated component:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n<span class="hljs-keyword">import</span> { v4 <span class="hljs-keyword">as</span> uuid } <span class="hljs-keyword">from</span> <span class="hljs-string">\'uuid\'</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AddTransactionForm</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">const</span> [description, setDescription] = useState(<span class="hljs-string">\'\'</span>)\n  <span class="hljs-keyword">const</span> [amount, setAmount] = useState(<span class="hljs-string">\'\'</span>)\n  <span class="hljs-keyword">const</span> [date, setDate] = useState(<span class="hljs-string">\'\'</span>)\n  <span class="hljs-keyword">const</span> [category, setCategory] = useState(<span class="hljs-string">\'\'</span>)\n\n  <span class="hljs-keyword">const</span> handleDescriptionChange = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {\n    setDescription(event.target.value)\n  }\n\n  <span class="hljs-keyword">const</span> handleAmountChange = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {\n    setAmount(event.target.value)\n  }\n\n  <span class="hljs-keyword">const</span> handleDateChange = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {\n    setDate(event.target.value)\n  }\n\n  <span class="hljs-keyword">const</span> handleCategoryChange = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {\n    setCategory(event.target.value)\n  }\n\n  <span class="hljs-keyword">const</span> handleChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n    e.preventDefault()\n    <span class="hljs-keyword">const</span> newTransaction = {\n      <span class="hljs-attr">id</span>: uuid(),\n      <span class="hljs-attr">date</span>: date,\n      <span class="hljs-attr">description</span>: description,\n      <span class="hljs-attr">category</span>: category,\n      <span class="hljs-attr">amount</span>: amount,\n    }\n    fetch(<span class="hljs-string">\'http://localhost:8001/transactions\'</span>, {\n      <span class="hljs-attr">method</span>: <span class="hljs-string">\'POST\'</span>,\n      <span class="hljs-attr">headers</span>: {\n        <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/json\'</span>,\n      },\n      <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(newTransaction),\n    })\n      .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> resp.json())\n      .then(<span class="hljs-function">(<span class="hljs-params">newQuestion</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(newQuestion))\n  }\n\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui segment\'</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">{handleChange}</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui form\'</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'inline fields\'</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n            <span class="hljs-attr">type</span>=<span class="hljs-string">\'date\'</span>\n            <span class="hljs-attr">name</span>=<span class="hljs-string">\'date\'</span>\n            <span class="hljs-attr">value</span>=<span class="hljs-string">{date}</span>\n            <span class="hljs-attr">onChange</span>=<span class="hljs-string">{handleDateChange}</span>\n            <span class="hljs-attr">required</span>\n          /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n            <span class="hljs-attr">type</span>=<span class="hljs-string">\'text\'</span>\n            <span class="hljs-attr">name</span>=<span class="hljs-string">\'description\'</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">\'Description\'</span>\n            <span class="hljs-attr">value</span>=<span class="hljs-string">{description}</span>\n            <span class="hljs-attr">onChange</span>=<span class="hljs-string">{handleDescriptionChange}</span>\n            <span class="hljs-attr">required</span>\n          /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n            <span class="hljs-attr">type</span>=<span class="hljs-string">\'text\'</span>\n            <span class="hljs-attr">name</span>=<span class="hljs-string">\'category\'</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">\'Category\'</span>\n            <span class="hljs-attr">value</span>=<span class="hljs-string">{category}</span>\n            <span class="hljs-attr">onChange</span>=<span class="hljs-string">{handleCategoryChange}</span>\n            <span class="hljs-attr">required</span>\n          /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n            <span class="hljs-attr">type</span>=<span class="hljs-string">\'number\'</span>\n            <span class="hljs-attr">name</span>=<span class="hljs-string">\'amount\'</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">\'Amount\'</span>\n            <span class="hljs-attr">step</span>=<span class="hljs-string">\'0.01\'</span>\n            <span class="hljs-attr">onChange</span>=<span class="hljs-string">{handleAmountChange}</span>\n            <span class="hljs-attr">required</span>\n          /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui button\'</span> <span class="hljs-attr">type</span>=<span class="hljs-string">\'submit\'</span>&gt;</span>\n          Add Transaction\n        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AddTransactionForm\n</code></pre>\n<p>Running the server to view changes:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://youtu.be/Pfk2fylJdr8">https://youtu.be/Pfk2fylJdr8</a></div>\n<h2 id="heading-filter-out-transactions-by-description">FIlter out transactions by description</h2>\n<p>Inside the <code>Search</code> component:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Search</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"ui large fluid icon input"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n        <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Search your Recent Transactions"</span>\n        <span class="hljs-attr">onChange</span>=<span class="hljs-string">{()</span> =&gt;</span> console.log("Searching...")}\n      /&gt;\n      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"circular search link icon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Search;\n</code></pre>\n<p>I added two props: <code>({ search, onSearchChange })</code></p>\n<pre><code class="lang-js">\n\n<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Search</span>(<span class="hljs-params">{ search, onSearchChange }</span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'ui large fluid icon input\'</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n        <span class="hljs-attr">type</span>=<span class="hljs-string">\'text\'</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">\'Search your Recent Transactions\'</span>\n        <span class="hljs-attr">onChange</span>=<span class="hljs-string">{onSearchChange}</span>\n        <span class="hljs-attr">value</span>=<span class="hljs-string">{search}</span>\n      /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'circular search link icon\'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Search\n</code></pre>\n<p>Next, inside the <code>AccountContainer</code> component, I wrote the logic to filter out data. I updated the Search component:</p>\n<pre><code class="lang-js">  &lt;Search search={searchItem} onSearchChange={searchFilteredItems} /&gt;\n</code></pre>\n<p><code>searchItem</code> is from the state hooks:</p>\n<pre><code class="lang-js"> <span class="hljs-keyword">const</span> [searchItem, setSearchItem] = useState(<span class="hljs-string">\'\'</span>)\n</code></pre>\n<p><code>searchFilteredItems</code> is a function:</p>\n<pre><code class="lang-js">  <span class="hljs-keyword">const</span> searchFilteredItems = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n    setSearchItem(e.target.value)\n    <span class="hljs-comment">// console.log(searchItem)</span>\n  }\n</code></pre>\n<p>That updates the value to of the input to the latest input as a user keys in.  Created a function to filter trough the response array and return only transactions that match the search input:</p>\n<pre><code class="lang-js">  <span class="hljs-keyword">const</span> displaySearchItems = transactions.filter(<span class="hljs-function">(<span class="hljs-params">transaction</span>) =&gt;</span>\n    transaction.description.toLowerCase().includes(searchItem.toLowerCase())\n  )\n</code></pre>\n<p>Updated the <code>TransactionsList</code> component to use the filtered items.</p>\n<pre><code class="lang-js">&lt;TransactionsList transaction={displaySearchItems} /&gt;\n</code></pre>\n<p>The updated file: <code>AccountContainer.js</code></p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> React, { useEffect, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n<span class="hljs-keyword">import</span> TransactionsList <span class="hljs-keyword">from</span> <span class="hljs-string">\'./TransactionsList\'</span>\n<span class="hljs-keyword">import</span> Search <span class="hljs-keyword">from</span> <span class="hljs-string">\'./Search\'</span>\n<span class="hljs-keyword">import</span> AddTransactionForm <span class="hljs-keyword">from</span> <span class="hljs-string">\'./AddTransactionForm\'</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AccountContainer</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">const</span> [searchItem, setSearchItem] = useState(<span class="hljs-string">\'\'</span>)\n  <span class="hljs-keyword">const</span> [transactions, setTransactions] = useState([])\n\n  <span class="hljs-comment">// get transations from API</span>\n  useEffect(<span class="hljs-function">() =&gt;</span> {\n    fetch(<span class="hljs-string">\'http://localhost:8001/transactions\'</span>)\n      .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> response.json())\n      .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n        setTransactions(data)\n      })\n  }, [])\n\n  <span class="hljs-keyword">const</span> searchFilteredItems = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n    setSearchItem(e.target.value)\n    <span class="hljs-comment">// console.log(searchItem)</span>\n  }\n\n  <span class="hljs-comment">// console.log(typeof transactions)</span>\n\n  <span class="hljs-keyword">const</span> displaySearchItems = transactions.filter(<span class="hljs-function">(<span class="hljs-params">transaction</span>) =&gt;</span>\n    transaction.description.toLowerCase().includes(searchItem.toLowerCase())\n  )\n\n  <span class="hljs-built_in">console</span>.log(displaySearchItems)\n  <span class="hljs-comment">// const displaySearchItems = transactions.filter((item) =&gt; {</span>\n  <span class="hljs-comment">//   return item.name.includes(searchItem)</span>\n  <span class="hljs-comment">// })</span>\n\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> <span class="hljs-attr">search</span>=<span class="hljs-string">{searchItem}</span> <span class="hljs-attr">onSearchChange</span>=<span class="hljs-string">{searchFilteredItems}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">AddTransactionForm</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">TransactionsList</span> <span class="hljs-attr">transaction</span>=<span class="hljs-string">{displaySearchItems}</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AccountContainer\n</code></pre>\n<p>Running the server:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://youtu.be/v0EtDmb6YMQ">https://youtu.be/v0EtDmb6YMQ</a></div>\n<h2 id="heading-conclusion">Conclusion</h2>\n<p>Successfully displayed data using useState and passed it dynamically to Tables. Users can add a new transaction and search for transactions based on descriptions.</p>\n<h2 id="heading-complete-source">Complete Source</h2>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://github.com/achingachris/phase2-week1-codechallenge">https://github.com/achingachris/phase2-week1-codechallenge</a></div>\n',
      contentMarkdown:
        "In my first week in phase 2 of Moringa School Software Engineering classes, I covered the basics of getting data from APIs and working with forms. The Code Challenge for the week had the following tasks:\n\n1. Fetch Transactions from an API and tabulate them.\n2. Add new transactions. The transaction added should be posted to the backend API.\n3. FIlter out transactions by description\n\nThe initial code for the challenge is in this [commit](https://github.com/achingachris/phase2-week1-codechallenge/tree/ee4bdba8aec6821633fd7944e868e1f6a03b072a).\n\n%[https://github.com/achingachris/phase2-week1-codechallenge/tree/ee4bdba8aec6821633fd7944e868e1f6a03b072a]\n\nBefore I started, I installed [concurrently](https://www.npmjs.com/package/concurrently) an npm package that allows one to run multiple commands concurrently. Like npm run watch-js & npm run watch-less but better. I wanted to run both react server and json.db server from one script:\n\n`npm run dev`\n\n```json\n  \"scripts\": {\n    \"start\": \"PORT=8000 react-scripts start\",\n    \"server\": \"json-server --watch db.json -p 8001\",\n    \"dev\": \"concurrently \\\"npm start\\\" \\\"npm run server\\\"\"\n  },\n```\n\n## Fetch Transactions from an API and tabulate them.\n\nI edited the `Transaction.js` file:\n\n```js\nimport React from \"react\";\n\nfunction Transaction() {\n  return (\n    <tr>\n      <td>{\"your code here...\"}</td>\n      <td>{\"your code here...\"}</td>\n      <td>{\"your code here...\"}</td>\n      <td>{\"your code here...\"}</td>\n    </tr>\n  );\n}\n\nexport default Transaction;\n```\n\nFirst, the `transaction` prop will be added, passing in data rendered from the API.\nFrom the API, data will have the following: id, date, description, category, and amount. So I updated the component to:\n\n```js\nimport React from 'react'\n\nfunction Transaction({ transaction }) {\n  return (\n    <tr>\n      <td>{transaction.date}</td>\n      <td>{transaction.description}</td>\n      <td>{transaction.category}</td>\n      <td>{transaction.amount}</td>\n    </tr>\n  )\n}\n\nexport default Transaction\n```\n\nNext step, I climbed up to the `TransactionList` component, where I was supposed to render the data.\n\n```js\nimport React from \"react\";\nimport Transaction from \"./Transaction\";\n\nfunction TransactionsList() {\n  return (\n    <table className=\"ui celled striped padded table\">\n      <tbody>\n        <tr>\n          <th>\n            <h3 className=\"ui center aligned header\">Date</h3>\n          </th>\n          <th>\n            <h3 className=\"ui center aligned header\">Description</h3>\n          </th>\n          <th>\n            <h3 className=\"ui center aligned header\">Category</h3>\n          </th>\n          <th>\n            <h3 className=\"ui center aligned header\">Amount</h3>\n          </th>\n        </tr>\n        {/* render a list of <Transaction> components here */}\n      </tbody>\n    </table>\n  );\n}\n\nexport default TransactionsList;\n```\n\nI added the prop `transaction` to the component, so I can fetch data from the upper-level component, `AccountContainer`. The data returned will be an array. So I mapped through the array \"transaction\" and displayed each item in a table.\n\n```js\n{transaction.map((data) => (\n    <Transaction key={data.id} transaction={data} />\n))}\n```\n\nHere is the updated component:\n\n```js\nimport React from 'react'\nimport Transaction from './Transaction'\n\nfunction TransactionsList({ transaction }) {\n  return (\n    <table className='ui celled striped padded table'>\n      <tbody>\n        <tr>\n          <th>\n            <h3 className='ui center aligned header'>Date</h3>\n          </th>\n          <th>\n            <h3 className='ui center aligned header'>Description</h3>\n          </th>\n          <th>\n            <h3 className='ui center aligned header'>Category</h3>\n          </th>\n          <th>\n            <h3 className='ui center aligned header'>Amount</h3>\n          </th>\n        </tr>\n        {transaction.map((data) => (\n          <Transaction key={data.id} transaction={data} />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default TransactionsList\n```\n\nNext is to climb up to a higher level component: `AccountContainer`\n\n```js\nimport React from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  return (\n    <div>\n      <Search />\n      <AddTransactionForm />\n      <TransactionsList />\n    </div>\n  );\n}\n\nexport default AccountContainer;\n```\n\nI used Hooks and useEffects to get data from the API.\n\n```js\nimport React, { useEffect, useState } from 'react'\nimport TransactionsList from './TransactionsList'\nimport Search from './Search'\nimport AddTransactionForm from './AddTransactionForm'\n\nfunction AccountContainer() {\n  const [searchItem, setSearchItem] = useState('')\n  const [transactions, setTransactions] = useState([])\n\n  // get transactions from API\n  useEffect(() => {\n    fetch('http://localhost:8001/transactions')\n      .then((response) => response.json())\n      .then((data) => {\n        setTransactions(data)\n      })\n  }, [])\n\n  return (\n    <div>\n      <Search />\n      <AddTransactionForm />\n      <TransactionsList transaction={transactions} />\n    </div>\n  )\n}\n\nexport default AccountContainer\n```\n\nRunning the server to view the changes:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1664198387938/h08cfu0Sq.png align=\"left\")\n\n## Add new transactions. The transaction added should be posted to the backend API.\n\nTo add new transaction, I started with the `AddTransactionForm` component.\n\n```js\nimport React from \"react\";\n\nfunction AddTransactionForm() {\n  return (\n    <div className=\"ui segment\">\n      <form className=\"ui form\">\n        <div className=\"inline fields\">\n          <input type=\"date\" name=\"date\" />\n          <input type=\"text\" name=\"description\" placeholder=\"Description\" />\n          <input type=\"text\" name=\"category\" placeholder=\"Category\" />\n          <input type=\"number\" name=\"amount\" placeholder=\"Amount\" step=\"0.01\" />\n        </div>\n        <button className=\"ui button\" type=\"submit\">\n          Add Transaction\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default AddTransactionForm;\n```\n\nFirst I install `uuid` to assign a unique ID to every transaction added.\n\n`npm i uuid`\n\nThen used state hooks to capture values, and create an event handler to send the data to the API once the form is submitted:\n\n```js\n  const handleChange = (e) => {\n    e.preventDefault()\n    const newTransaction = {\n      id: uuid(),\n      date: date,\n      description: description,\n      category: category,\n      amount: amount,\n    }\n    fetch('http://localhost:8001/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newTransaction),\n    })\n      .then((resp) => resp.json())\n      .then((newQuestion) => console.log(newQuestion))\n  }\n```\n\nThe updated component:\n\n```js\nimport React, { useState } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nfunction AddTransactionForm() {\n  const [description, setDescription] = useState('')\n  const [amount, setAmount] = useState('')\n  const [date, setDate] = useState('')\n  const [category, setCategory] = useState('')\n\n  const handleDescriptionChange = (event) => {\n    setDescription(event.target.value)\n  }\n\n  const handleAmountChange = (event) => {\n    setAmount(event.target.value)\n  }\n\n  const handleDateChange = (event) => {\n    setDate(event.target.value)\n  }\n\n  const handleCategoryChange = (event) => {\n    setCategory(event.target.value)\n  }\n\n  const handleChange = (e) => {\n    e.preventDefault()\n    const newTransaction = {\n      id: uuid(),\n      date: date,\n      description: description,\n      category: category,\n      amount: amount,\n    }\n    fetch('http://localhost:8001/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newTransaction),\n    })\n      .then((resp) => resp.json())\n      .then((newQuestion) => console.log(newQuestion))\n  }\n\n  return (\n    <div className='ui segment' onSubmit={handleChange}>\n      <form className='ui form'>\n        <div className='inline fields'>\n          <input\n            type='date'\n            name='date'\n            value={date}\n            onChange={handleDateChange}\n            required\n          />\n          <input\n            type='text'\n            name='description'\n            placeholder='Description'\n            value={description}\n            onChange={handleDescriptionChange}\n            required\n          />\n          <input\n            type='text'\n            name='category'\n            placeholder='Category'\n            value={category}\n            onChange={handleCategoryChange}\n            required\n          />\n          <input\n            type='number'\n            name='amount'\n            placeholder='Amount'\n            step='0.01'\n            onChange={handleAmountChange}\n            required\n          />\n        </div>\n        <button className='ui button' type='submit'>\n          Add Transaction\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddTransactionForm\n```\n\nRunning the server to view changes:\n\n%[https://youtu.be/Pfk2fylJdr8]\n\n## FIlter out transactions by description\n\nInside the `Search` component:\n\n```js\nimport React from \"react\";\n\nfunction Search() {\n  return (\n    <div className=\"ui large fluid icon input\">\n      <input\n        type=\"text\"\n        placeholder=\"Search your Recent Transactions\"\n        onChange={() => console.log(\"Searching...\")}\n      />\n      <i className=\"circular search link icon\"></i>\n    </div>\n  );\n}\n\nexport default Search;\n```\n\nI added two props: `({ search, onSearchChange }) `\n\n```js\n\n\nimport React from 'react'\n\nfunction Search({ search, onSearchChange }) {\n  return (\n    <div className='ui large fluid icon input'>\n      <input\n        type='text'\n        placeholder='Search your Recent Transactions'\n        onChange={onSearchChange}\n        value={search}\n      />\n      <i className='circular search link icon'></i>\n    </div>\n  )\n}\n\nexport default Search\n```\n\nNext, inside the `AccountContainer` component, I wrote the logic to filter out data. I updated the Search component:\n\n```js\n  <Search search={searchItem} onSearchChange={searchFilteredItems} />\n```\n\n`searchItem` is from the state hooks:\n\n```js\n const [searchItem, setSearchItem] = useState('')\n```\n\n`searchFilteredItems` is a function:\n\n```js\n  const searchFilteredItems = (e) => {\n    setSearchItem(e.target.value)\n    // console.log(searchItem)\n  }\n```\nThat updates the value to of the input to the latest input as a user keys in.  Created a function to filter trough the response array and return only transactions that match the search input:\n\n```js\n  const displaySearchItems = transactions.filter((transaction) =>\n    transaction.description.toLowerCase().includes(searchItem.toLowerCase())\n  )\n```\n\nUpdated the `TransactionsList` component to use the filtered items.\n\n```js\n<TransactionsList transaction={displaySearchItems} />\n```\n\nThe updated file: `AccountContainer.js `\n\n```js\nimport React, { useEffect, useState } from 'react'\nimport TransactionsList from './TransactionsList'\nimport Search from './Search'\nimport AddTransactionForm from './AddTransactionForm'\n\nfunction AccountContainer() {\n  const [searchItem, setSearchItem] = useState('')\n  const [transactions, setTransactions] = useState([])\n\n  // get transations from API\n  useEffect(() => {\n    fetch('http://localhost:8001/transactions')\n      .then((response) => response.json())\n      .then((data) => {\n        setTransactions(data)\n      })\n  }, [])\n\n  const searchFilteredItems = (e) => {\n    setSearchItem(e.target.value)\n    // console.log(searchItem)\n  }\n\n  // console.log(typeof transactions)\n\n  const displaySearchItems = transactions.filter((transaction) =>\n    transaction.description.toLowerCase().includes(searchItem.toLowerCase())\n  )\n\n  console.log(displaySearchItems)\n  // const displaySearchItems = transactions.filter((item) => {\n  //   return item.name.includes(searchItem)\n  // })\n\n  return (\n    <div>\n      <Search search={searchItem} onSearchChange={searchFilteredItems} />\n      <AddTransactionForm />\n      <TransactionsList transaction={displaySearchItems} />\n    </div>\n  )\n}\n\nexport default AccountContainer\n```\n\nRunning the server:\n\n%[https://youtu.be/v0EtDmb6YMQ]\n\n## Conclusion\n\nSuccessfully displayed data using useState and passed it dynamically to Tables. Users can add a new transaction and search for transactions based on descriptions.\n\n## Complete Source\n\n%[https://github.com/achingachris/phase2-week1-codechallenge]\n\n\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95434',
        '5cf529a93ff075303a0e036d',
        '56744721958ef13879b948fa',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5670.8802,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: true,
      toc: [
        [
          {
            id: '49f08d61-dcbc-4694-b4c8-6d7f8ff092ff',
            level: 2,
            previousLevel: null,
            parentId: null,
            slug: 'fetch-transactions-from-an-api-and-tabulate-them',
            title: 'Fetch Transactions from an API and tabulate them.',
          },
        ],
        [
          {
            id: 'c8b481f0-54c5-4821-a7a1-bc42169afee8',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'add-new-transactions-the-transaction-added-should-be-posted-to-the-backend-api',
            title:
              'Add new transactions. The transaction added should be posted to the backend API.',
          },
        ],
        [
          {
            id: '68a4478e-e29c-4fe3-8569-ef556492b96d',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'filter-out-transactions-by-description',
            title: 'FIlter out transactions by description',
          },
        ],
        [
          {
            id: '54220c20-62d3-4c79-b97e-f8ccbddeb632',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'conclusion',
            title: 'Conclusion',
          },
        ],
        [
          {
            id: '9e7ec294-a334-4755-aa45-9496dd1b75b4',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'complete-source',
            title: 'Complete Source',
          },
        ],
      ],
      numUniqueUsersWhoReacted: 0,
      _id: '6331b06867534f360ca94e26',
      title: 'How to fetch and Add Data in React from an API',
      subtitle:
        'How I solved ReactJS Code Challenge from Moringa School. Getting data from an API, Adding data, and filtering data',
      pollOptions: [],
      type: 'story',
      coverImageAttribution: 'https://unsplash.com/@kaitlynbaker',
      coverImagePhotographer: 'Kaitlyn Baker',
      isCoverAttributionHidden: false,
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-to-fetch-and-add-data-in-react-from-an-api',
      importedFromMedium: false,
      dateAdded: '2022-09-26T14:00:08.128Z',
      hasCustomDate: false,
      hasScheduledDate: false,
      stickCoverToBottom: false,
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cl8iu6xx700e7r0nvbahp8zco',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '63319a044dd8b2344a76925d',
      readTime: 6,
      __v: 1,
      viewsUpdatedOn: 1671859862237,
      dateUpdated: '2022-09-26T17:36:24.212Z',
      pendingPublicationApproval: false,
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '6331b06867534f360ca94e26',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl8dit46e03bowpnv8unxh9ri-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 130,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/unsplash/TKlxhlRdj9A/upload/v1662704839483/FenhyLAWU.jpeg',
      autoGeneratedCover: '',
      brief:
        'This post covers creating a simple weather search application using plain JavaScript, HTML, and CSS.\nDemo and Source Code\nThe project demo is live on codesandbox, and the source code is available on GitHub.\nhttps://codesandbox.io/embed/weather-robot-...',
      content:
        '<p>This post covers creating a simple weather search application using plain JavaScript, HTML, and CSS.</p>\n<h2 id="heading-demo-and-source-code">Demo and Source Code</h2>\n<p>The project demo is live on <a target="_blank" href="https://codesandbox.io/s/weather-robot-phase-1-lzt9z9">codesandbox</a>, and the source code is available on <a target="_blank" href="https://github.com/achingachris/weather-robot">GitHub</a>.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://codesandbox.io/embed/weather-robot-phase-1-lzt9z9?fontsize=14&amp;hidenavigation=1&amp;theme=dark">https://codesandbox.io/embed/weather-robot-phase-1-lzt9z9?fontsize=14&amp;hidenavigation=1&amp;theme=dark</a></div>\n<h2 id="heading-prerequisites">Prerequisites</h2>\n<ol>\n<li><a target="_blank" href="https://openweathermap.org/">Openweathermap</a> API Keys</li>\n<li>JavaScript Fetch API and DOM Manipulation</li>\n<li>Basic HTML and CSS</li>\n</ol>\n<h2 id="heading-creating-the-html-and-css-files">Creating the HTML and CSS Files</h2>\n<p>Create a new file (index.html) and add the following:</p>\n<pre><code class="lang-HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Weather Robot<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"./weatherRobot.css"</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"section-head"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"heading"</span>&gt;</span>Weather Robot<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Search for a city"</span> <span class="hljs-attr">autofocus</span> /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>GET WEATHER<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"msg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"city-array"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"cities"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./weatherRobot.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<p>Create separate files for the styles and JavaScript. Inside the CSS file, add the following:</p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="fffc4c92672843c1d5688f5c2004f9a1"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/fffc4c92672843c1d5688f5c2004f9a1" class="embed-card">https://gist.github.com/achingachris/fffc4c92672843c1d5688f5c2004f9a1</a></div><p>Open the file on your browser to view the web page</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1663869626651/gtK21BXA4.png" alt="image.png" /></p>\n<p>Now let\'s add some functionality to search and get weather information!</p>\n<h3 id="heading-getting-openweathermap-api-keys">Getting OpenWeatherMap API Keys:</h3>\n<p>After signing in to your account, navigate to https://home.openweathermap.org/api_keys to get your API Keys:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1663870023461/QK6J75zs0.png" alt="image.png" /></p>\n<p>Inside the js file, add the following at the top:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> form = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">\'.section-head form\'</span>),\n  input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">\'.section-head input\'</span>),\n  msg = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">\'.section-head .msg\'</span>),\n  list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">\'.city-array .cities\'</span>),\n  apiKey = <span class="hljs-string">\'API_KEY\'</span>\n</code></pre>\n<p>Replace the API_KEY with your API Key from <a target="_blank" href="https://home.openweathermap.org/api_keys">OpenWeatherMap</a>.</p>\n<p>In the snippets above, we grab the input to capture the city name entered by a user, <code>document.querySelector(\'.section-head input\'),</code> and return the results in a list <code>list = document.querySelector(\'.city-array .cities\'),</code></p>\n<p>We then create an event listener to listen for user inputs and query the API to get the weather of the entered city:</p>\n<pre><code class="lang-js">form.addEventListener(<span class="hljs-string">\'submit\'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n\n}\n</code></pre>\n<p>Copy the following code inside the event listener function:</p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="935d15948a95aac09150cd7dc7e99469"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/935d15948a95aac09150cd7dc7e99469" class="embed-card">https://gist.github.com/achingachris/935d15948a95aac09150cd7dc7e99469</a></div><p>Run the file to view the changes. For every valid city searched, it\'s added on the card list:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1663879328533/e51LVw9KU.png" alt="image.png" /></p>\n',
      contentMarkdown:
        'This post covers creating a simple weather search application using plain JavaScript, HTML, and CSS.\n\n## Demo and Source Code\n\nThe project demo is live on [codesandbox](https://codesandbox.io/s/weather-robot-phase-1-lzt9z9), and the source code is available on [GitHub](https://github.com/achingachris/weather-robot).\n\n%[https://codesandbox.io/embed/weather-robot-phase-1-lzt9z9?fontsize=14&hidenavigation=1&theme=dark]\n\n## Prerequisites\n\n1. [Openweathermap](https://openweathermap.org/) API Keys\n2. JavaScript Fetch API and DOM Manipulation\n3. Basic HTML and CSS\n\n## Creating the HTML and CSS Files\n\nCreate a new file (index.html) and add the following:\n\n```HTML\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Weather Robot</title>\n    <link rel="stylesheet" href="./weatherRobot.css" />\n  </head>\n  <body>\n    <section class="section-head">\n      <div class="container">\n        <h1 class="heading">Weather Robot</h1>\n        <form>\n          <input type="text" placeholder="Search for a city" autofocus />\n          <button type="submit">GET WEATHER</button>\n          <span class="msg"></span>\n        </form>\n      </div>\n    </section>\n    <section class="city-array">\n      <div class="container">\n        <ul class="cities"></ul>\n      </div>\n    </section>\n    <script src="./weatherRobot.js"></script>\n  </body>\n</html>\n```\n\n\nCreate separate files for the styles and JavaScript. Inside the CSS file, add the following:\n\n%[https://gist.github.com/achingachris/fffc4c92672843c1d5688f5c2004f9a1]\n\nOpen the file on your browser to view the web page\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1663869626651/gtK21BXA4.png align="left")\n\nNow let\'s add some functionality to search and get weather information!\n\n### Getting OpenWeatherMap API Keys:\n\nAfter signing in to your account, navigate to https://home.openweathermap.org/api_keys to get your API Keys:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1663870023461/QK6J75zs0.png align="left")\n\nInside the js file, add the following at the top:\n\n```js\nconst form = document.querySelector(\'.section-head form\'),\n  input = document.querySelector(\'.section-head input\'),\n  msg = document.querySelector(\'.section-head .msg\'),\n  list = document.querySelector(\'.city-array .cities\'),\n  apiKey = \'API_KEY\'\n```\n\nReplace the API_KEY with your API Key from [OpenWeatherMap]( https://home.openweathermap.org/api_keys).\n\nIn the snippets above, we grab the input to capture the city name entered by a user, `document.querySelector(\'.section-head input\'),` and return the results in a list `list = document.querySelector(\'.city-array .cities\'),`\n\nWe then create an event listener to listen for user inputs and query the API to get the weather of the entered city:\n\n```js\nform.addEventListener(\'submit\', (e) => {\n\n}\n```\n\nCopy the following code inside the event listener function:\n\n%[https://gist.github.com/achingachris/935d15948a95aac09150cd7dc7e99469]\n\nRun the file to view the changes. For every valid city searched, it\'s added on the card list:\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1663879328533/e51LVw9KU.png align="left")\n\n\n\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744721958ef13879b94cad'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5664.0378,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35484', '5c090d96c2a9c2a674d35485'],
      totalReactions: 2,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '632cc8bc318ff0fa18338280',
      title: 'Creating A Weather Search App in Vanilla JavaScript',
      subtitle:
        'How I made a weather app as part of my first project in a Software Engineering Bootcamp',
      pollOptions: [],
      type: 'story',
      coverImageAttribution: 'https://unsplash.com/ja/@messrro',
      coverImagePhotographer: 'Mehdi MeSSrro',
      isCoverAttributionHidden: true,
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'creating-a-weather-search-app-in-vanilla-javascript',
      importedFromMedium: false,
      dateAdded: '2022-09-22T20:42:36.483Z',
      hasCustomDate: false,
      hasScheduledDate: false,
      stickCoverToBottom: false,
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cl8dit46e03bowpnv8unxh9ri',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '631adc9800230a29830ddf4f',
      readTime: 2,
      __v: 0,
      viewsUpdatedOn: 1671881461054,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
      },
      uniqueReactions: ['5c090d96c2a9c2a674d35484', '5c090d96c2a9c2a674d35485'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
      },
      id: '632cc8bc318ff0fa18338280',
    },
    {
      audioUrls: {
        male: 'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl725hthh03s0p0nv2rhagodp-male',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl725hthh03s0p0nv2rhagodp-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 223,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1661009097663/b51wR6_VP.png',
      autoGeneratedCover: '',
      brief:
        'TL;DR\nThis post will take you through installing JupyterLabs and how to add a NodeJS kernel to it in Ubuntu.\n\nInstalling JupyterLabs\nFor a better experience, you should install Jupyter Lab inside a virtual environment. \nsudo  apt install python3-venv...',
      content:
        '<blockquote>\n<p><strong>TL;DR</strong>\nThis post will take you through installing JupyterLabs and how to add a NodeJS kernel to it in Ubuntu.</p>\n</blockquote>\n<h2 id="heading-installing-jupyterlabs">Installing JupyterLabs</h2>\n<p>For a better experience, you should install Jupyter Lab inside a virtual environment. </p>\n<pre><code class="lang-shell">sudo  apt install python3-venv\n</code></pre>\n<p>After the installation is complete, create a new environment:</p>\n<pre><code><span class="hljs-attribute">python3</span> -m venv jlab\n</code></pre><blockquote>\n<p><em>Note that you can replace the <code>jlab</code> with any name of your choice.</em></p>\n</blockquote>\n<p>Now activate the environment:</p>\n<pre><code>. jlab/bin<span class="hljs-operator">/</span>activate\n</code></pre><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1661010372178/3i2YxqlrG.png" alt="Activating a virtual environment" class="image--center mx-auto" /></p>\n<p>Now install Jupyter Lab in Ubuntu:</p>\n<pre><code><span class="hljs-attribute">pip</span> install jupyterlab\n</code></pre><p>Once the installation is complete, you can start Jupyter lab by running:</p>\n<pre><code class="lang-shell">jupyter lab\n</code></pre>\n<p>Jupyter Labs runs locally on port 8888: http://localhost:8888/</p>\n<h2 id="heading-installing-javascript-kernel">Installing Javascript Kernel</h2>\n<p>Inside the activated virtual environment, install the javascript kernel by running:</p>\n<pre><code><span class="hljs-built_in">npm</span> install -g ijavascript\n</code></pre><p>To activate the kernel, run:</p>\n<pre><code>ijsinstall\n</code></pre><p>Re-start Jupyter lab:</p>\n<pre><code class="lang-shell">jupyter lab\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1661014401573/qPeHpGSzM.png" alt="Javascript in jupyter lab" class="image--center mx-auto" /></p>\n<p>To test it out, click on the <code>NodeJS</code> logo to start a Javascript lab:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1661014803723/WNqhjI01M.png" alt="Srunning javascript on jupyter lab" class="image--center mx-auto" /></p>\n<h2 id="heading-conclusion">Conclusion</h2>\n<p>The article demonstrates how to install Jupyter labs in a virtual environment and add a JavaScript kernel.</p>\n<h2 id="heading-resources">Resources</h2>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/watch?v=gkeh9phGgYo&amp;list=PL1ROSNerT41L9l0-es4HFXyEyEmKwSya4&amp;index=20&amp;t=81s">https://www.youtube.com/watch?v=gkeh9phGgYo&amp;list=PL1ROSNerT41L9l0-es4HFXyEyEmKwSya4&amp;index=20&amp;t=81s</a></div>\n',
      contentMarkdown:
        '> **TL;DR**\n> This post will take you through installing JupyterLabs and how to add a NodeJS kernel to it in Ubuntu.\n\n## Installing JupyterLabs\n\nFor a better experience, you should install Jupyter Lab inside a virtual environment. \n\n```shell\nsudo  apt install python3-venv\n```\n\nAfter the installation is complete, create a new environment:\n\n```\npython3 -m venv jlab\n```\n\n> *Note that you can replace the `jlab` with any name of your choice.*\n\nNow activate the environment:\n\n```\n. jlab/bin/activate\n```\n\n![Activating a virtual environment](https://cdn.hashnode.com/res/hashnode/image/upload/v1661010372178/3i2YxqlrG.png align="center")\n\nNow install Jupyter Lab in Ubuntu:\n\n```\npip install jupyterlab\n``` \n\nOnce the installation is complete, you can start Jupyter lab by running:\n\n```shell\njupyter lab\n```\n\nJupyter Labs runs locally on port 8888: http://localhost:8888/\n\n## Installing Javascript Kernel\n\nInside the activated virtual environment, install the javascript kernel by running:\n\n```\nnpm install -g ijavascript\n```\n\nTo activate the kernel, run:\n\n```\nijsinstall\n```\n\nRe-start Jupyter lab:\n\n```shell\njupyter lab\n```\n\n![Javascript in jupyter lab](https://cdn.hashnode.com/res/hashnode/image/upload/v1661014401573/qPeHpGSzM.png align="center")\n\nTo test it out, click on the `NodeJS` logo to start a Javascript lab:\n\n![Srunning javascript on jupyter lab](https://cdn.hashnode.com/res/hashnode/image/upload/v1661014803723/WNqhjI01M.png align="center")\n\n## Conclusion\n\nThe article demonstrates how to install Jupyter labs in a virtual environment and add a JavaScript kernel.\n\n## Resources\n\n%[https://www.youtube.com/watch?v=gkeh9phGgYo&list=PL1ROSNerT41L9l0-es4HFXyEyEmKwSya4&index=20&t=81s]\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94cad',
        '5f058ab0c9763d47e2d2eedc',
        '5964992f5fa6f67c729cc8c3',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5600.0863,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: true,
      toc: [
        [
          {
            id: '9f3d2d4b-4344-41cb-aa99-9b102f127211',
            level: 2,
            previousLevel: null,
            parentId: null,
            slug: 'installing-jupyterlabs',
            title: 'Installing JupyterLabs',
          },
        ],
        [
          {
            id: 'cd6a06ff-8898-4177-9eee-0474485c8caf',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'installing-javascript-kernel',
            title: 'Installing Javascript Kernel',
          },
        ],
        [
          {
            id: 'e494b8d5-cfe3-4a88-adac-235c9f770d32',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'conclusion',
            title: 'Conclusion',
          },
        ],
        [
          {
            id: '1d96a64d-4785-4213-bb88-99ccdb918830',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'resources',
            title: 'Resources',
          },
        ],
      ],
      numUniqueUsersWhoReacted: 0,
      _id: '6301142c74730d13020f2cbd',
      title: 'Using JavaScript in JupyterLab',
      subtitle: 'How to Install and use Javascript in JupyterLab',
      pollOptions: [],
      type: 'story',
      coverImageAttribution: '',
      coverImagePhotographer: '',
      isCoverAttributionHidden: false,
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'using-javascript-in-jupyterlab',
      importedFromMedium: false,
      dateAdded: '2022-08-20T17:04:44.121Z',
      hasCustomDate: false,
      hasScheduledDate: false,
      stickCoverToBottom: false,
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cl725hthh03s0p0nv2rhagodp',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '6300f65dba5ef2131493a422',
      readTime: 1,
      __v: 1,
      viewsUpdatedOn: 1671814863592,
      series: null,
      dateUpdated: '2022-08-23T21:42:13.457Z',
      pendingPublicationApproval: false,
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '6301142c74730d13020f2cbd',
    },
    {
      audioUrls: {
        male: 'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl6fmiqbv03e6x5nv8edqbkr3-male',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl6fmiqbv03e6x5nv8edqbkr3-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 91,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1659652854474/xzSz-vwZm.png',
      autoGeneratedCover: '',
      brief:
        'Static websites are known for a minimum to zero functionalities. Initially, one has to write a lot of code to be able to collect data from users through forms. This post will guide you on how to add forms to a static website without creating a server...',
      content:
        '<p>Static websites are known for a minimum to zero functionalities. Initially, one has to write a lot of code to be able to collect data from users through forms. This post will guide you on how to add forms to a static website without creating a server-side application for your website.</p>\n<p>You will be using <a target="_blank" href="https://fabform.io/">FabForm</a>. FabForm allows you to add form functionalities to a static website with a simple setup procedure.</p>\n<h2 id="heading-prerequisites">Prerequisites</h2>\n<ul>\n<li>FabForm Account - Create a free account <a target="_blank" href="https://app.fabform.io/signup">here</a></li>\n<li>A static Webpage </li>\n</ul>\n<h2 id="heading-demo">Demo</h2>\n<p>You can find the live demo on Codesandbox:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://codesandbox.io/embed/pedantic-euler-rkqk4g?fontsize=14&amp;hidenavigation=1&amp;theme=dark">https://codesandbox.io/embed/pedantic-euler-rkqk4g?fontsize=14&amp;hidenavigation=1&amp;theme=dark</a></div>\n<p>Source code available on <a target="_blank" href="https://github.com/achingachris/staticpages-form">GitHub</a></p>\n<h2 id="heading-creating-a-static-site">Creating a Static site</h2>\n<p>You can skip this step if you already have a static site. You will set up a simple NextJS site that asks for the user\'s best programming language and JavaScript framework.</p>\n<p>To create a NextJS project, run the following command on your terminal:</p>\n<pre><code class="lang-shell">npm create-next-app best-language\n</code></pre>\n<p>You will style the page using <a target="_blank" href="https://getbootstrap.com/">Bootstrap</a>. Install it by running:</p>\n<pre><code class="lang-shell">npm install bootstrap@5.2.0\n</code></pre>\n<p>Once the installation is complete, open the <code>index.js</code> file and paste the code below:</p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="8a1ccc1a10ff39bffdd70427bb30272e"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/8a1ccc1a10ff39bffdd70427bb30272e" class="embed-card">https://gist.github.com/achingachris/8a1ccc1a10ff39bffdd70427bb30272e</a></div><p>Run the local server to view the changes made:</p>\n<pre><code class="lang-shell">npm run dev\n</code></pre>\n<p>Open your browser and go to <code>http://localhost:3000/</code>:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1659648912229/IwlBP048b.png" alt="simple form" /></p>\n<p>After setting up the dummy form, head over to https://fabform.io/ to create an account and follow the steps below to make the form collect data.</p>\n<h2 id="heading-using-fabform">Using FabForm</h2>\n<p>After creating a free account, head to https://app.fabform.io/forms to create an endpoint for your form.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1659649268035/b6CSrGWhD.png" alt="Creating an endpoint" /></p>\n<p>Once the endpoint is created, you will be redirected to https://app.fabform.io/forms, where all your endpoints are listed:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1659649372632/2wckSUFHc.png" alt="FabForm Endpoints" /></p>\n<p>To edit your endpoint, click on it, and click on the settings icon on the right side of the page:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1659649497570/wWUWYoezf.png" alt="endpoint settings" /></p>\n<p>Enter a targeted email where you will be notified for every response. You can add the sheet ID on the endpoint settings if you need to have the responses in a Google Sheet. </p>\n<blockquote>\n<p>Note: Add <code>fabform@fabform.iam.gserviceaccount.com</code> as an editor to the google sheet document linked.</p>\n</blockquote>\n<p>Click save after adding all the details needed.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1659649775718/OTnJaS3mH.png" alt="Screenshot from 2022-08-05 00-49-23.png" /></p>\n<p>The last step is to add an action attribute to your form:</p>\n<pre><code><span class="hljs-operator">&lt;</span>form\n  id<span class="hljs-operator">=</span><span class="hljs-string">\'contactForm\'</span>\n  action<span class="hljs-operator">=</span><span class="hljs-string">\'https://fabform.io/f/{form_id}\'</span>\n  method<span class="hljs-operator">=</span><span class="hljs-string">\'post\'</span>\n<span class="hljs-operator">&gt;</span>\n<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>form<span class="hljs-operator">&gt;</span>\n</code></pre><p>Replace the <code>{form_id}</code> with your endpoint ID. </p>\n<p>For the demo, I will showcase and use my endpoint id in the form:</p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="f3476d135cd019724bf2a59c3a78f7a3"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/f3476d135cd019724bf2a59c3a78f7a3" class="embed-card">https://gist.github.com/achingachris/f3476d135cd019724bf2a59c3a78f7a3</a></div><p>Run the development server to test the form now. After submitting, check the Google Sheet document for any changes:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1659651813843/sF27e1wHi.png" alt="Screenshot from 2022-08-05 01-23-15.png" /></p>\n<p>The response updates on your Google Sheet as shown:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1659651881616/ZJuaG1Pbl.png" alt="Screenshot from 2022-08-05 01-24-03.png" /></p>\n<h2 id="heading-conclusion">Conclusion</h2>\n<p>The post demonstrates how to add functionality to a form on a static web application with fewer configurations using FabForm.</p>\n',
      contentMarkdown:
        'Static websites are known for a minimum to zero functionalities. Initially, one has to write a lot of code to be able to collect data from users through forms. This post will guide you on how to add forms to a static website without creating a server-side application for your website.\n\nYou will be using [FabForm](https://fabform.io/). FabForm allows you to add form functionalities to a static website with a simple setup procedure.\n\n## Prerequisites\n\n- FabForm Account - Create a free account [here](https://app.fabform.io/signup)\n- A static Webpage \n\n## Demo\n\nYou can find the live demo on Codesandbox:\n\n%[https://codesandbox.io/embed/pedantic-euler-rkqk4g?fontsize=14&hidenavigation=1&theme=dark]\n\nSource code available on [GitHub](https://github.com/achingachris/staticpages-form)\n\n## Creating a Static site\n\nYou can skip this step if you already have a static site. You will set up a simple NextJS site that asks for the user\'s best programming language and JavaScript framework.\n\nTo create a NextJS project, run the following command on your terminal:\n\n```shell\nnpm create-next-app best-language\n```\n\nYou will style the page using [Bootstrap](https://getbootstrap.com/). Install it by running:\n\n```shell\nnpm install bootstrap@5.2.0\n```\n\nOnce the installation is complete, open the `index.js` file and paste the code below:\n\n%[https://gist.github.com/achingachris/8a1ccc1a10ff39bffdd70427bb30272e]\n\nRun the local server to view the changes made:\n\n```shell\nnpm run dev\n```\n\nOpen your browser and go to `http://localhost:3000/`:\n\n![simple form](https://cdn.hashnode.com/res/hashnode/image/upload/v1659648912229/IwlBP048b.png align="left")\n\nAfter setting up the dummy form, head over to https://fabform.io/ to create an account and follow the steps below to make the form collect data.\n\n## Using FabForm\n\nAfter creating a free account, head to https://app.fabform.io/forms to create an endpoint for your form.\n\n![Creating an endpoint](https://cdn.hashnode.com/res/hashnode/image/upload/v1659649268035/b6CSrGWhD.png align="left")\n\nOnce the endpoint is created, you will be redirected to https://app.fabform.io/forms, where all your endpoints are listed:\n\n![FabForm Endpoints](https://cdn.hashnode.com/res/hashnode/image/upload/v1659649372632/2wckSUFHc.png align="left")\n\nTo edit your endpoint, click on it, and click on the settings icon on the right side of the page:\n\n![endpoint settings](https://cdn.hashnode.com/res/hashnode/image/upload/v1659649497570/wWUWYoezf.png align="left")\n\nEnter a targeted email where you will be notified for every response. You can add the sheet ID on the endpoint settings if you need to have the responses in a Google Sheet. \n\n> Note: Add `fabform@fabform.iam.gserviceaccount.com` as an editor to the google sheet document linked.\n\nClick save after adding all the details needed.\n\n![Screenshot from 2022-08-05 00-49-23.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1659649775718/OTnJaS3mH.png align="left")\n\nThe last step is to add an action attribute to your form:\n\n```\n<form\n  id=\'contactForm\'\n  action=\'https://fabform.io/f/{form_id}\'\n  method=\'post\'\n>\n</form>\n```\n\nReplace the `{form_id}` with your endpoint ID. \n\nFor the demo, I will showcase and use my endpoint id in the form:\n\n%[https://gist.github.com/achingachris/f3476d135cd019724bf2a59c3a78f7a3]\n\nRun the development server to test the form now. After submitting, check the Google Sheet document for any changes:\n\n![Screenshot from 2022-08-05 01-23-15.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1659651813843/sF27e1wHi.png align="left")\n\nThe response updates on your Google Sheet as shown:\n\n![Screenshot from 2022-08-05 01-24-03.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1659651881616/ZJuaG1Pbl.png align="left")\n\n## Conclusion\n\nThe post demonstrates how to add functionality to a form on a static web application with fewer configurations using FabForm.',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '584879f0c0aaf085e2012086',
        '56744721958ef13879b948fa',
        '58f9253e01cb858c63429c31',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5570.1179,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35484'],
      totalReactions: 2,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: true,
      toc: [
        [
          {
            id: '4bfb6c75-a318-4b7b-a59a-0599b7570e15',
            level: 2,
            previousLevel: null,
            parentId: null,
            slug: 'prerequisites',
            title: 'Prerequisites',
          },
        ],
        [
          {
            id: 'cd1b151f-6731-4617-bd31-83be0807a80e',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'demo',
            title: 'Demo',
          },
        ],
        [
          {
            id: '5071a2e6-8c92-4412-b07f-a207f606ece7',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'creating-a-static-site',
            title: 'Creating a Static site',
          },
        ],
        [
          {
            id: '88e6a185-c5d7-465b-a911-465ef6018e10',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'using-fabform',
            title: 'Using FabForm',
          },
        ],
        [
          {
            id: '5587fc5c-e179-427d-80ce-42d43bbc1750',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'conclusion',
            title: 'Conclusion',
          },
        ],
      ],
      numUniqueUsersWhoReacted: 0,
      _id: '62ec4b5ef583cc2636e547ba',
      title: 'Adding Forms To Static Websites Using FabForm',
      subtitle: 'How to use FabForm to create static website forms',
      pollOptions: [],
      type: 'story',
      coverImageAttribution: '',
      coverImagePhotographer: '',
      isCoverAttributionHidden: false,
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'adding-forms-to-static-websites-using-fabform',
      importedFromMedium: false,
      dateAdded: '2022-08-04T22:42:38.119Z',
      hasCustomDate: false,
      hasScheduledDate: false,
      stickCoverToBottom: false,
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cl6fmiqbv03e6x5nv8edqbkr3',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '62ea02aa16f9480a9dac4631',
      readTime: 3,
      __v: 1,
      viewsUpdatedOn: 1671850859784,
      series: null,
      dateUpdated: '2022-08-08T22:18:10.839Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
      },
      uniqueReactions: ['5c090d96c2a9c2a674d35484'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
      },
      id: '62ec4b5ef583cc2636e547ba',
    },
    {
      audioUrls: {
        male: 'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckj2grw4k04m236s1frzr5zaf-male',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckj2grw4k04m236s1frzr5zaf-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 829,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1657393093567/Lf19dQLEn.png',
      autoGeneratedCover: '',
      brief:
        'A state is the current data passed in React components. State management in React enables you to dynamically update data in Components. \nThis post will take you through creating an initial state and an event to trigger a state update in Reactjs.\nPrer...',
      content:
        '<p>A state is the current data passed in React components. State management in React enables you to dynamically update data in Components. </p>\n<p>This post will take you through creating an initial state and an event to trigger a state update in Reactjs.</p>\n<h2 id="heading-prerequisites">Prerequisites:</h2>\n<ul>\n<li>NodeJS Installed</li>\n<li>Knowledge of React</li>\n</ul>\n<h2 id="heading-source-code-and-demo">Source Code and Demo</h2>\n<p><a target="_blank" href="https://github.com/achingachris/state-management-react-demo">GitHub Repo Link</a></p>\n<p><strong>Creating A New React App</strong>:</p>\n<pre><code class="lang-shell"># create a new react app\nnpx create-react-app state-management-demo\n# move into the new app\'s directory\ncd  state management-demo\n# start the app to see if everything is okay\nnpm start\n</code></pre>\n<p>For the Demo, clean the <code>App.js</code> to have the following:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> App = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>My React Application<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App\n</code></pre>\n<p>We will create a simple counter button to demonstrate state management.</p>\n<p>At the top of the <code>App.js</code> file, import <code>useState</code>:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n</code></pre>\n<p>Inside the <code>App()</code> function, we will set our default state, <code>0</code>. Then once a user clicks a button, the number increases by <code>1</code> per click. </p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)\n</code></pre>\n<p>We will add a function, that will fire up when the button is clicked:</p>\n<pre><code class="lang-js">  <span class="hljs-keyword">const</span> handleClick = <span class="hljs-function">() =&gt;</span> {\n    setCount(<span class="hljs-function">(<span class="hljs-params">count</span>) =&gt;</span> {\n      <span class="hljs-keyword">return</span> count + <span class="hljs-number">1</span>\n    })\n  }\n</code></pre>\n<p>Update the return function to the following:</p>\n<pre><code class="lang-js">  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'container\'</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counter<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{count}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'btn btn-outline-secondary\'</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleClick}</span>&gt;</span>Click Me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n</code></pre>\n<p>Run the development server and open the browser on port 3000: <code>http://localhost:3000/</code></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1657393644309/wXhPSpoTF.png" alt="Screenshot from 2022-07-09 22-06-26.png" /></p>\n<p>The full code:</p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="e3e85f714b5f0921450f0ce480322140"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/e3e85f714b5f0921450f0ce480322140" class="embed-card">https://gist.github.com/achingachris/e3e85f714b5f0921450f0ce480322140</a></div><p>Here is a demo:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://codesandbox.io/embed/tender-lewin-yiw2pz?fontsize=14&amp;hidenavigation=1&amp;theme=dark">https://codesandbox.io/embed/tender-lewin-yiw2pz?fontsize=14&amp;hidenavigation=1&amp;theme=dark</a></div>\n<h2 id="heading-conclusion">Conclusion:</h2>\n<p>We created a component and added a button that shows the number of times it\'s been clicked, using the <code>useState</code> hook. Cool isn\'t it?</p>\n<h2 id="heading-references">References:</h2>\n<ul>\n<li><a target="_blank" href="https://reactjs.org/docs/hooks-state.html">React Hooks and State</a></li>\n</ul>\n',
      contentMarkdown:
        "A state is the current data passed in React components. State management in React enables you to dynamically update data in Components. \n\nThis post will take you through creating an initial state and an event to trigger a state update in Reactjs.\n\n## Prerequisites:\n- NodeJS Installed\n- Knowledge of React\n\n## Source Code and Demo\n\n[GitHub Repo Link](https://github.com/achingachris/state-management-react-demo)\n\n\n**Creating A New React App**:\n\n```shell\n# create a new react app\nnpx create-react-app state-management-demo\n# move into the new app's directory\ncd  state management-demo\n# start the app to see if everything is okay\nnpm start\n```\n\nFor the Demo, clean the `App.js` to have the following:\n\n```js\nconst App = () => {\n  return <div>My React Application</div>\n}\n\nexport default App\n```\n\nWe will create a simple counter button to demonstrate state management.\n\nAt the top of the `App.js` file, import `useState`:\n\n```js\nimport { useState } from 'react'\n```\n\nInside the `App()` function, we will set our default state, `0`. Then once a user clicks a button, the number increases by `1` per click. \n\n```js\nconst [count, setCount] = useState(0)\n```\n\nWe will add a function, that will fire up when the button is clicked:\n\n```js\n  const handleClick = () => {\n    setCount((count) => {\n      return count + 1\n    })\n  }\n```\n\nUpdate the return function to the following:\n\n```js\n  return (\n    <div className='container'>\n      <h1>Counter</h1>\n      <p>{count}</p>\n      <button className='btn btn-outline-secondary' onClick={handleClick}>Click Me!</button>\n    </div>\n  )\n```\nRun the development server and open the browser on port 3000: `http://localhost:3000/`\n\n![Screenshot from 2022-07-09 22-06-26.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1657393644309/wXhPSpoTF.png align=\"left\")\n\nThe full code:\n\n%[https://gist.github.com/achingachris/e3e85f714b5f0921450f0ce480322140]\n\nHere is a demo:\n\n%[https://codesandbox.io/embed/tender-lewin-yiw2pz?fontsize=14&hidenavigation=1&theme=dark]\n\n## Conclusion:\n\nWe created a component and added a button that shows the number of times it's been clicked, using the `useState` hook. Cool isn't it?\n\n## References:\n- [React Hooks and State](https://reactjs.org/docs/hooks-state.html)\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95434',
        '5f22b52283e4e9440619af83',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4440.9369,
      responses: [
        {
          popularity: 4447.8802,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '5fe9ebf25283d44a62c71da5',
          content: '<p>Nice tutorial!</p>\n',
          contentMarkdown: 'Nice tutorial!',
          author: '5fd8b574667f6d1c2ee2f3ee',
          stamp: 'ckj8nry2u01jyoys17ugs5jx2',
          post: '5fe434d51e6a660a92506d2d',
          replies: [],
          dateAdded: '2020-12-28T14:30:10.759Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
      ],
      totalReactions: 24,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fe434d51e6a660a92506d2d',
      title: 'State Management in React',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'state-management-in-react',
      importedFromMedium: false,
      dateAdded: '2022-07-09T19:16:03.214Z',
      hasCustomDate: true,
      series: '5fe072ea1485f22e24b3776c',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '5fe9ebf25283d44a62c71da6',
          user: '5fd8b574667f6d1c2ee2f3ee',
          stamp: 'ckj8nry2u01jyoys17ugs5jx2',
        },
      ],
      cuid: 'ckj2grw4k04m236s1frzr5zaf',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fe4319bddcb940a6d28d4be',
      hasPinnedTag: false,
      readTime: 2,
      __v: 2,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      lastActivity: '2020-12-28T14:30:10.792Z',
      viewsUpdatedOn: 1671768061153,
      coverImageAttribution: '',
      coverImagePhotographer: '',
      dateUpdated: '2022-07-09T19:16:20.696Z',
      isCoverAttributionHidden: false,
      pendingPublicationApproval: false,
      subtitle: 'How to create and manage States in ReactJs',
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      id: '5fe434d51e6a660a92506d2d',
    },
    {
      audioUrls: {
        male: 'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl4bllhrf09w6q2nv0twudd5t-male',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl4bllhrf09w6q2nv0twudd5t-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 509,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1655055933238/A6XQtW5Ku.png',
      autoGeneratedCover: '',
      brief:
        'Strapi is an open-source Headless CMS. \n\nTL;DR:\n\nThe demo source code to this article can be found on GitHub.\nTo get started, you need to have the following on your computer:\n\nNodeJS v14 +\nCloudinary Account\n\nCreating a Strapi Project\nTo create a new...',
      content:
        '<p><a target="_blank" href="https://strapi.io/">Strapi</a> is an open-source Headless CMS. </p>\n<blockquote>\n<p>TL;DR:</p>\n</blockquote>\n<p>The demo source code to this article can be found on <a target="_blank" href="https://github.com/achingachris/cloudinary-on-strapi">GitHub</a>.</p>\n<p>To get started, you need to have the following on your computer:</p>\n<ul>\n<li><a target="_blank" href="https://nodejs.org/en/">NodeJS</a> v14 +</li>\n<li><a target="_blank" href="https://cloudinary.com/">Cloudinary</a> Account</li>\n</ul>\n<h2 id="heading-creating-a-strapi-project">Creating a Strapi Project</h2>\n<p>To create a new strapi project, run the following:</p>\n<pre><code class="lang-shell">npx create-strapi-app@latest my-project --quickstart\n</code></pre>\n<p>After a successful installation, Strapi will automatically open a new browser for you to create a local account:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1654894857515/pBMlVt5ix.png" alt="terminal commands" /></p>\n<p>On the browser: http://localhost:1337/admin/auth/register-admin</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1654894963453/7HN4j8iX1.png" alt="strapi headless cms" /></p>\n<h2 id="heading-installing-cloudinary-upload-plugin">Installing Cloudinary Upload Plugin</h2>\n<p>To be able to integrate Cloudinary inside your Strapi project, you\'ll need to install the <code>provider-upload-cloudinary</code>:</p>\n<p>https://www.npmjs.com/package/@strapi/provider-upload-cloudinary</p>\n<p>To install, run the following inside the root of your project:</p>\n<pre><code class="lang-shell">npm install @strapi/provider-upload-cloudinary\n</code></pre>\n<p>Inside the <code>./config</code> folder, create a new file: <code>plugins.js</code> and paste the following:</p>\n<pre><code class="lang-js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">{ env }</span>) =&gt;</span> ({\n  <span class="hljs-attr">upload</span>: {\n    <span class="hljs-attr">config</span>: {\n      <span class="hljs-attr">provider</span>: <span class="hljs-string">"cloudinary"</span>,\n      <span class="hljs-attr">providerOptions</span>: {\n        <span class="hljs-attr">cloud_name</span>: env(<span class="hljs-string">"CLOUDINARY_NAME"</span>),\n        <span class="hljs-attr">api_key</span>: env(<span class="hljs-string">"CLOUDINARY_KEY"</span>),\n        <span class="hljs-attr">api_secret</span>: env(<span class="hljs-string">"CLOUDINARY_SECRET"</span>),\n      },\n      <span class="hljs-attr">actionOptions</span>: {\n        <span class="hljs-attr">upload</span>: {},\n        <span class="hljs-attr">uploadStream</span>: {},\n        <span class="hljs-attr">delete</span>: {},\n      },\n    },\n  },\n});\n</code></pre>\n<h2 id="heading-configuring-environment-variables">Configuring environment variables</h2>\n<p>At the root of the project folder, locate the <code>.env</code> folder, and add the following:</p>\n<pre><code class="lang-env">CLOUDINARY_NAME=\nCLOUDINARY_KEY=\nCLOUDINARY_SECRET=\n</code></pre>\n<p>To find the credentials, log into your Cloudinary account and head over to the <a target="_blank" href="https://cloudinary.com/console">account console/dashboard</a>.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1654899013532/7QriWmi4f.jpg" alt="Screenshot from 2022-06-11 01-06-34.jpg" /></p>\n<p>You will find your API key and secret on the dashboard, and paste them to your <code>.env</code> file. Save and restart the development server:</p>\n<pre><code class="lang-shell">npm run develop\n</code></pre>\n<p>On the admin dashboard, navigate to <strong>Media Library</strong> to test out the integration. Click on the <code>+ Add new assets</code> to upload image/images:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1654900432510/QCGCcTE9P.png" alt="Screenshot from 2022-06-11 01-31-20.png" /></p>\n<p>Upon a successful upload, the status code on your terminal will be 200, or if you check your Cloudinary dashboard, you\'ll see the image uploaded via Strapi.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1654900871211/8vIY_CFVs.png" alt="Screenshot from 2022-06-11 01-39-03.png" /></p>\n<h2 id="heading-conclusion">Conclusion</h2>\n<p>The post covers the steps to link <a target="_blank" href="https://cloudinary.com/">Cloudinary</a> with <a target="_blank" href="https://strapi.io/">Strapi</a> Headless CMS project.</p>\n',
      contentMarkdown:
        '[Strapi](https://strapi.io/) is an open-source Headless CMS. \n\n> TL;DR:\n\nThe demo source code to this article can be found on [GitHub](https://github.com/achingachris/cloudinary-on-strapi).\n\nTo get started, you need to have the following on your computer:\n\n- [NodeJS](https://nodejs.org/en/) v14 +\n- [Cloudinary](https://cloudinary.com/) Account\n\n## Creating a Strapi Project\n\nTo create a new strapi project, run the following:\n\n```shell\nnpx create-strapi-app@latest my-project --quickstart\n```\n\nAfter a successful installation, Strapi will automatically open a new browser for you to create a local account:\n\n![terminal commands](https://cdn.hashnode.com/res/hashnode/image/upload/v1654894857515/pBMlVt5ix.png align="left")\n\nOn the browser: http://localhost:1337/admin/auth/register-admin\n\n![strapi headless cms](https://cdn.hashnode.com/res/hashnode/image/upload/v1654894963453/7HN4j8iX1.png align="left")\n\n## Installing Cloudinary Upload Plugin\n\nTo be able to integrate Cloudinary inside your Strapi project, you\'ll need to install the `provider-upload-cloudinary`:\n\nhttps://www.npmjs.com/package/@strapi/provider-upload-cloudinary\n\nTo install, run the following inside the root of your project:\n\n```shell\nnpm install @strapi/provider-upload-cloudinary\n```\n\nInside the `./config` folder, create a new file: `plugins.js` and paste the following:\n\n```js\nmodule.exports = ({ env }) => ({\n  upload: {\n    config: {\n      provider: "cloudinary",\n      providerOptions: {\n        cloud_name: env("CLOUDINARY_NAME"),\n        api_key: env("CLOUDINARY_KEY"),\n        api_secret: env("CLOUDINARY_SECRET"),\n      },\n      actionOptions: {\n        upload: {},\n        uploadStream: {},\n        delete: {},\n      },\n    },\n  },\n});\n```\n\n## Configuring environment variables\n\nAt the root of the project folder, locate the `.env` folder, and add the following:\n\n```env\nCLOUDINARY_NAME=\nCLOUDINARY_KEY=\nCLOUDINARY_SECRET=\n```\nTo find the credentials, log into your Cloudinary account and head over to the [account console/dashboard](https://cloudinary.com/console).\n\n![Screenshot from 2022-06-11 01-06-34.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1654899013532/7QriWmi4f.jpg align="left")\n\nYou will find your API key and secret on the dashboard, and paste them to your `.env` file. Save and restart the development server:\n\n```shell\nnpm run develop\n```\n\nOn the admin dashboard, navigate to **Media Library** to test out the integration. Click on the `+ Add new assets` to upload image/images:\n\n\n![Screenshot from 2022-06-11 01-31-20.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1654900432510/QCGCcTE9P.png align="left")\n\nUpon a successful upload, the status code on your terminal will be 200, or if you check your Cloudinary dashboard, you\'ll see the image uploaded via Strapi.\n\n![Screenshot from 2022-06-11 01-39-03.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1654900871211/8vIY_CFVs.png align="left")\n\n## Conclusion\nThe post covers the steps to link [Cloudinary](https://cloudinary.com/) with [Strapi](https://strapi.io/) Headless CMS project.',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5914be36db93b4aae8008897',
        '5a60b356acaaf63131a26558',
        '5678a007e0956f4764b3ed53',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5467.6617,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35484'],
      totalReactions: 1,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '62a6266a165482d2b3eeeb4e',
      title: 'How to add Cloudinary to Strapi CMS for Image/Video uploads',
      subtitle: 'Learn how to upload images to Cloudinary using Strapi CMS',
      type: 'story',
      coverImageAttribution: '',
      coverImagePhotographer: '',
      isCoverAttributionHidden: false,
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-to-add-cloudinary-to-strapi-cms-for-imagevideo-uploads',
      importedFromMedium: false,
      dateAdded: '2022-06-12T17:46:18.015Z',
      hasCustomDate: false,
      hasScheduledDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cl4bllhrf09w6q2nv0twudd5t',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '62a0ec34aa709871a80be96e',
      readTime: 2,
      __v: 0,
      viewsUpdatedOn: 1671854460867,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      uniqueReactions: ['5c090d96c2a9c2a674d35484'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      id: '62a6266a165482d2b3eeeb4e',
    },
    {
      audioUrls: {
        male: 'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl45ke5qw0027jznv1b5ra0al-male',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cl45ke5qw0027jznv1b5ra0al-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 173,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1654691126464/SaxrXg6XO.png',
      autoGeneratedCover: '',
      brief:
        'Near protocol is a decentralized application platform that gives developer-friendly features to build and develop smart contracts. \nNear offers the platform to build smart contracts in Rust and deploy them. By default, Near supports Rust and Assembly...',
      content:
        '<p><a target="_blank" href="https://near.org/">Near</a> protocol is a decentralized application platform that gives developer-friendly features to build and develop smart contracts. </p>\n<p>Near offers the platform to build smart contracts in Rust and deploy them. By default, Near supports Rust and AssemblyScript. Rust is recommended for its greater developer experience when it comes to memory allocation and a minimal runtime, among <a target="_blank" href="https://ink.substrate.io/why-rust-for-smart-contracts/">other great reasons</a>.</p>\n<h2 id="heading-installing-rust-ubuntulinux">Installing Rust (Ubuntu/Linux)</h2>\n<p>To install Rust, follow the steps below:</p>\n<h3 id="heading-install-curl">Install Curl</h3>\n<p>If you don\'t have curl installed, use the scripts below:</p>\n<pre><code class="lang-shell">sudo apt update\nsudo apt install curl\n</code></pre>\n<h3 id="heading-install-rust">Install Rust</h3>\n<p>To install Rust, paste and run the script below on your terminal:</p>\n<pre><code class="lang-shell">curl --proto \'=https\' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre>\n<p>Configure your shell using:</p>\n<pre><code class="lang-shell">source $HOME/.cargo/env\n</code></pre>\n<p>To confirm a successful installation, run the following in a terminal:</p>\n<pre><code class="lang-shell">rustup\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1654689365450/CyP1W2Fgo.png" alt="Screenshot from 2022-06-08 14-55-45.png" /></p>\n<p>After that, run</p>\n<pre><code class="lang-shell">sudo apt-get install build-essential\n</code></pre>\n<p>Add <code>wasm</code> target to your toolchain</p>\n<pre><code class="lang-shell">rustup target add wasm32-unknown-unknown\n</code></pre>\n<p>To test out for the installation, create a simple <code>Hello, World!</code> program in rust:</p>\n<p>On an empty folder create a file named: <code>main.rs</code> and add the following:</p>\n<pre><code class="lang-rs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() {\n    <span class="hljs-built_in">println!</span>(<span class="hljs-string">"Hello, world!"</span>);\n}\n</code></pre>\n<p>Save the file and compile the code using:</p>\n<pre><code class="lang-shell">rustc main.rs\n</code></pre>\n<p>Run the simple program:</p>\n<pre><code class="lang-shell">./main\n</code></pre>\n<p>If Hello, world! did print, congratulations! You have successfully installed Rust</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1654689993225/8IDCvcmFw.png" alt="Screenshot from 2022-06-08 15-05-51.png" /></p>\n<h2 id="heading-installing-near-cli">Installing <code>near-cli</code></h2>\n<p>To install the<code>near-cli</code> simply use:</p>\n<pre><code class="lang-shell">npm install -g near-cli\n</code></pre>\n<p>More on <code>near-cli</code> can be found <a target="_blank" href="https://docs.near.org/docs/tools/near-cli">here</a>.</p>\n<h2 id="heading-conclusion">Conclusion</h2>\n<p>The post takes you through installing Rust and <code>near-cli</code> for blockchain development.</p>\n<h2 id="heading-resources">Resources:</h2>\n<ul>\n<li><a target="_blank" href="https://docs.near.org/docs/tools/near-cli">Near CLI</a></li>\n<li><a target="_blank" href="https://www.rust-lang.org/tools/install">Installing Rust</a></li>\n</ul>\n',
      contentMarkdown:
        '[Near](https://near.org/) protocol is a decentralized application platform that gives developer-friendly features to build and develop smart contracts. \n\nNear offers the platform to build smart contracts in Rust and deploy them. By default, Near supports Rust and AssemblyScript. Rust is recommended for its greater developer experience when it comes to memory allocation and a minimal runtime, among [other great reasons](https://ink.substrate.io/why-rust-for-smart-contracts/).\n\n## Installing Rust (Ubuntu/Linux)\n\nTo install Rust, follow the steps below:\n\n### Install Curl\n\nIf you don\'t have curl installed, use the scripts below:\n\n```shell\nsudo apt update\nsudo apt install curl\n```\n\n### Install Rust\n\nTo install Rust, paste and run the script below on your terminal:\n\n```shell\ncurl --proto \'=https\' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\nConfigure your shell using:\n\n```shell\nsource $HOME/.cargo/env\n```\n\nTo confirm a successful installation, run the following in a terminal:\n\n```shell\nrustup\n```\n\n\n![Screenshot from 2022-06-08 14-55-45.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1654689365450/CyP1W2Fgo.png align="left")\n\n\nAfter that, run\n\n```shell\nsudo apt-get install build-essential\n```\n\nAdd `wasm` target to your toolchain\n\n```shell\nrustup target add wasm32-unknown-unknown\n```\n\nTo test out for the installation, create a simple `Hello, World!` program in rust:\n\nOn an empty folder create a file named: `main.rs` and add the following:\n\n```rs\nfn main() {\n    println!("Hello, world!");\n}\n```\n\nSave the file and compile the code using:\n\n```shell\nrustc main.rs\n```\n\nRun the simple program:\n\n```shell\n./main\n```\n\nIf Hello, world! did print, congratulations! You have successfully installed Rust\n\n\n![Screenshot from 2022-06-08 15-05-51.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1654689993225/8IDCvcmFw.png align="left")\n\n## Installing `near-cli`\n\nTo install the`near-cli` simply use:\n\n```shell\nnpm install -g near-cli\n```\n\nMore on `near-cli` can be found [here](https://docs.near.org/docs/tools/near-cli).\n\n## Conclusion\nThe post takes you through installing Rust and `near-cli` for blockchain development.\n\n## Resources:\n\n- [Near CLI](https://docs.near.org/docs/tools/near-cli)\n- [Installing Rust](https://www.rust-lang.org/tools/install)\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5684bee6bf03be7d4a9ed853',
        '59df443dfb1deef9745a4ef0',
        '5690224191716a2d1dbadbc1',
        '56744721958ef13879b94988',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5460.8557,
      responses: [
        {
          popularity: 5463.2457,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '62a31e2723f5f5accf275a67',
          content:
            '<p>Thanku <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a></p>\n',
          contentMarkdown: 'Thanku @[Chris Achinga](@chrisdevcode)',
          author: '624226a5db84f8c50fa5b247',
          stamp: 'cl48ba6mq03bu8mnvdecdcrph',
          post: '62a09557aa709871a80bdd4e',
          replies: [],
          dateAdded: '2022-06-10T10:34:15.699Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
      ],
      totalReactions: 20,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: true,
      toc: [
        [
          {
            id: 'b8734b22-86c4-4939-abf0-6cd2d453ff3f',
            level: 2,
            previousLevel: null,
            parentId: null,
            slug: 'installing-rust-ubuntulinux',
            title: 'Installing Rust (Ubuntu/Linux)',
          },
        ],
        [
          {
            id: 'a2a2d97d-8493-43fc-9396-e8f92daad41e',
            level: 3,
            previousLevel: 2,
            parentId: 'b8734b22-86c4-4939-abf0-6cd2d453ff3f',
            slug: 'install-curl',
            title: 'Install Curl',
          },
        ],
        [
          {
            id: '23f9b6fe-1a17-4c6d-8f87-c9034ca61f31',
            level: 3,
            previousLevel: 3,
            parentId: 'b8734b22-86c4-4939-abf0-6cd2d453ff3f',
            slug: 'install-rust',
            title: 'Install Rust',
          },
        ],
        [
          {
            id: 'f0e086b7-fca4-44a6-a7b9-d00f1dfd3879',
            level: 2,
            previousLevel: 3,
            parentId: null,
            slug: 'installing-near-cli',
            title: 'Installing near-cli',
          },
        ],
        [
          {
            id: '12124fbb-2069-483e-a9a6-117f5b7878e2',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'conclusion',
            title: 'Conclusion',
          },
        ],
        [
          {
            id: 'b1d74030-b7b2-4706-9ec8-a06c6204d329',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'resources',
            title: 'Resources:',
          },
        ],
      ],
      numUniqueUsersWhoReacted: 0,
      _id: '62a09557aa709871a80bdd4e',
      title: 'How to set up Rust and NEAR for Blockchain/Web3 Development',
      subtitle:
        'This post covers the setup procedure for Rust development on Linux-based OS, Ubuntu.',
      type: 'story',
      coverImageAttribution: '',
      coverImagePhotographer: '',
      isCoverAttributionHidden: false,
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-to-set-up-rust-and-near-for-blockchainweb3-development',
      importedFromMedium: false,
      dateAdded: '2022-06-08T12:25:59.114Z',
      hasCustomDate: false,
      hasScheduledDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '62a31e2723f5f5accf275a68',
          user: '624226a5db84f8c50fa5b247',
          stamp: 'cl48ba6mq03bu8mnvdecdcrph',
        },
      ],
      cuid: 'cl45ke5qw0027jznv1b5ra0al',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '629995c3a5004f19f574e251',
      readTime: 2,
      __v: 1,
      viewsUpdatedOn: 1671658262960,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      lastActivity: '2022-06-10T10:34:15.742Z',
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      id: '62a09557aa709871a80bdd4e',
    },
    {
      audioUrls: {
        male: 'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckpay3cnj0m1804s1a3hfg9p4-male',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckpay3cnj0m1804s1a3hfg9p4-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 8162,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1622364544083/hMHEA-LQG.png',
      autoGeneratedCover: '',
      brief:
        'When creating a react application/website, most of the pages would be sharing the same content all over. For example the navigation bar and page footer. Instead of importing each component in every page to be rendered, it is much easier and faster to...',
      content:
        '<p>When creating a react application/website, most of the pages would be sharing the same content all over. For example the navigation bar and page footer. Instead of importing each component in every page to be rendered, it is much easier and faster to just create a layout component.</p>\n<p>This post will cover how to create a react app using Layout Components.</p>\n<p>Live demo: https://hjpx0v.csb.app/</p>\n<p>Source Code to the demo: https://github.com/achingachris/react-layout-demo</p>\n<p>Here is how to do it:</p>\n<h2 id="heading-creating-a-react-app-using-create-react-app">Creating a React App using <code>create-react-app</code></h2>\n<p>To start a new React application, run the following on the CLI of your developer environment:</p>\n<pre><code class="lang-shell">npx create-react-app react-layout-demo\ncd react-layout-demo\nnpm start\n</code></pre>\n<p>If the installation is successful, open the browser and go to http://localhost:3000/:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653830941522/-ysRy_4y_.png" alt="Default react landing page" class="image--center mx-auto" /></p>\n<h2 id="heading-creating-the-layout-component">Creating the Layout Component</h2>\n<p>Inside the <code>src</code> directory, create a new folder: <code>components/</code> and inside the new folder, add a new file: <code>Layout.js</code></p>\n<p>Inside the new file, create a new component.</p>\n<blockquote>\n<p>You can choose either class component or functional component that works best for you 😄</p>\n</blockquote>\n<pre><code class="lang-jsx">\n<span class="hljs-keyword">const</span> Layout = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Layout<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Layout\n</code></pre>\n<h2 id="heading-making-the-component-a-layout-component">Making the Component a <code>Layout Component</code></h2>\n<p>To make the component, a <code>layout component</code>, we will use <a target="_blank" href="https://reactjs.org/docs/composition-vs-inheritance.html">React inheritance</a>, which allows the contents of the component used anywhere the <code>Layout</code> component will be imported. To do that, we will use the <code>children</code> props:</p>\n<pre><code class="lang-jsx"><span class="hljs-keyword">const</span> Layout = <span class="hljs-function">(<span class="hljs-params">{ children }</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{children}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Layout\n</code></pre>\n<h2 id="heading-adding-navigation-and-footer-to-the-layout">Adding Navigation and Footer to the Layout.</h2>\n<p>Inside the <code>src/components</code> directory, add two new files: <code>Navigation.js</code> and <code>Footer.js</code> and update the content as follows:</p>\n<p><code>Navigation.js</code></p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="63975779e8c8c4757e59485c5cef57ac"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/63975779e8c8c4757e59485c5cef57ac" class="embed-card">https://gist.github.com/achingachris/63975779e8c8c4757e59485c5cef57ac</a></div><p><code>Footer.js</code></p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="55584bf64f3e219f2efccfad694cf3a0"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/55584bf64f3e219f2efccfad694cf3a0" class="embed-card">https://gist.github.com/achingachris/55584bf64f3e219f2efccfad694cf3a0</a></div><p>To add the Navigation and Footer on the Layout component, update the <code>Layout.js</code> to:</p>\n<pre><code class="lang-jsx"><span class="hljs-keyword">import</span> Navigation <span class="hljs-keyword">from</span> <span class="hljs-string">\'./Navigation\'</span>\n<span class="hljs-keyword">import</span> Footer <span class="hljs-keyword">from</span> <span class="hljs-string">\'./Footer\'</span>\n\n<span class="hljs-keyword">const</span> Layout = <span class="hljs-function">(<span class="hljs-params">{ children }</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Navigation</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>{children}<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Layout\n</code></pre>\n<pre><code class="lang-JavaScript">\n<span class="hljs-keyword">import</span> NavigationBar <span class="hljs-keyword">from</span> <span class="hljs-string">\'../components/NavigationBar\'</span>\n<span class="hljs-keyword">import</span> Footer <span class="hljs-keyword">from</span> <span class="hljs-string">\'../components/Footer\'</span>\n\n<span class="hljs-keyword">const</span> Layout = <span class="hljs-function">(<span class="hljs-params">{children}</span>) =&gt;</span> {\n <span class="hljs-keyword">return</span> (\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">NavigationBar</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n )\n}\n</code></pre>\n<h2 id="heading-using-the-layout-component">Using the Layout Component</h2>\n<p>Import the component into the pages needed i.e</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">import</span> Layout <span class="hljs-keyword">from</span> <span class="hljs-string">\'../layout/Layout\'</span>\n\n<span class="hljs-keyword">const</span> AboutPage = <span class="hljs-function">() =&gt;</span> {\n\n<span class="hljs-keyword">return</span> (\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>&gt;</span>\n    //page content\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span></span>\n)\n\n}\n</code></pre>\n<p>Ensure that all the contents in the component are wrapped inside the <code>&lt;Layout&gt;&lt;/Layout&gt;</code></p>\n<h2 id="heading-conclusion">Conclusion</h2>\n<p>The post has covered the steps to create a Layout component in React.</p>\n<h2 id="heading-codesandbox">Codesandbox</h2>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://codesandbox.io/embed/gifted-orla-hjpx0v?fontsize=14&amp;hidenavigation=1&amp;theme=dark">https://codesandbox.io/embed/gifted-orla-hjpx0v?fontsize=14&amp;hidenavigation=1&amp;theme=dark</a></div>\n',
      contentMarkdown:
        "When creating a react application/website, most of the pages would be sharing the same content all over. For example the navigation bar and page footer. Instead of importing each component in every page to be rendered, it is much easier and faster to just create a layout component.\n\nThis post will cover how to create a react app using Layout Components.\n\nLive demo: https://hjpx0v.csb.app/\n\nSource Code to the demo: https://github.com/achingachris/react-layout-demo\n\nHere is how to do it:\n\n## Creating a React App using `create-react-app`\n\nTo start a new React application, run the following on the CLI of your developer environment:\n\n```shell\nnpx create-react-app react-layout-demo\ncd react-layout-demo\nnpm start\n```\n\nIf the installation is successful, open the browser and go to http://localhost:3000/:\n\n\n![Default react landing page](https://cdn.hashnode.com/res/hashnode/image/upload/v1653830941522/-ysRy_4y_.png align=\"center\")\n\n## Creating the Layout Component\n\nInside the `src` directory, create a new folder: `components/` and inside the new folder, add a new file: `Layout.js`\n\nInside the new file, create a new component.\n\n>You can choose either class component or functional component that works best for you 😄\n\n```jsx\n\nconst Layout = () => {\n  return (\n    <div>Layout</div>\n  )\n}\n\nexport default Layout\n```\n\n## Making the Component a `Layout Component`\n\nTo make the component, a `layout component`, we will use [React inheritance](https://reactjs.org/docs/composition-vs-inheritance.html), which allows the contents of the component used anywhere the `Layout` component will be imported. To do that, we will use the `children` props:\n\n```jsx\nconst Layout = ({ children }) => {\n  return <div>{children}</div>\n}\n\nexport default Layout\n```\n\n## Adding Navigation and Footer to the Layout.\n\nInside the `src/components` directory, add two new files: `Navigation.js` and `Footer.js` and update the content as follows:\n\n`Navigation.js`\n\n%[https://gist.github.com/achingachris/63975779e8c8c4757e59485c5cef57ac]\n\n`Footer.js`\n\n%[https://gist.github.com/achingachris/55584bf64f3e219f2efccfad694cf3a0]\n\nTo add the Navigation and Footer on the Layout component, update the `Layout.js` to:\n\n```jsx\nimport Navigation from './Navigation'\nimport Footer from './Footer'\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Navigation />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n\nexport default Layout\n```\n\n\n```JavaScript\n\nimport NavigationBar from '../components/NavigationBar'\nimport Footer from '../components/Footer'\n\nconst Layout = ({children}) => {\n return (\n  <div>\n    <NavigationBar />\n    <Footer />\n  </div>\n )\n}\n\n```\n\n## Using the Layout Component\n\nImport the component into the pages needed i.e\n\n```JavaScript\nimport Layout from '../layout/Layout'\n\nconst AboutPage = () => {\n\nreturn (\n  <Layout>\n    //page content\n  </Layout>\n)\n\n}\n\n```\n\nEnsure that all the contents in the component are wrapped inside the `<Layout></Layout>`\n\n## Conclusion\n\nThe post has covered the steps to create a Layout component in React.\n\n## Codesandbox\n\n%[https://codesandbox.io/embed/gifted-orla-hjpx0v?fontsize=14&hidenavigation=1&theme=dark]\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95434',
        '571c5374fc5b53a1ace37ce8',
        '5f058ab0c9763d47e2d2eedc',
        '56744721958ef13879b94be1',
        '56744721958ef13879b949bc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5442.1521,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35486',
      ],
      totalReactions: 45,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: true,
      toc: [
        [
          {
            id: '704cc1fb-7897-4359-9717-9a263de7e9f1',
            level: 2,
            previousLevel: null,
            parentId: null,
            slug: 'creating-a-react-app-using-create-react-app',
            title: 'Creating a React App using create-react-app',
          },
        ],
        [
          {
            id: '66023df9-d1ce-4890-98dd-06d65caf0a95',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'creating-the-layout-component',
            title: 'Creating the Layout Component',
          },
        ],
        [
          {
            id: 'c3bb4adc-c5ee-426c-83c6-070d13f4bf13',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'making-the-component-a-layout-component',
            title: 'Making the Component a Layout Component',
          },
        ],
        [
          {
            id: 'abe7b96f-188c-45ed-ad78-7e29762ca5a0',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'adding-navigation-and-footer-to-the-layout',
            title: 'Adding Navigation and Footer to the Layout.',
          },
        ],
        [
          {
            id: '96d686a6-7c61-4961-a8b9-4d7e68a8333b',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'using-the-layout-component',
            title: 'Using the Layout Component',
          },
        ],
        [
          {
            id: 'c042148b-bc09-44ff-94ac-a7af4fbae5c3',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'conclusion',
            title: 'Conclusion',
          },
        ],
        [
          {
            id: '50bcbb0f-3dbc-4f6e-bd2c-d4528d481f9d',
            level: 2,
            previousLevel: 2,
            parentId: null,
            slug: 'codesandbox',
            title: 'Codesandbox',
          },
        ],
      ],
      numUniqueUsersWhoReacted: 0,
      _id: '60b3525dfb51fd32a4dc24d7',
      title: 'How To Create A Layout Component: React',
      subtitle:
        'Step by Step Guide on creating a layout on a create-react-app Project',
      type: 'story',
      ogImage: '',
      metaTitle: 'Creating A Layout Component in React',
      metaDescription:
        'Step by Step Guide on creating a layout on a create-react-app Project',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-to-create-a-layout-component-react',
      importedFromMedium: false,
      dateAdded: '2022-05-29T14:14:09.491Z',
      hasCustomDate: true,
      stickCoverToBottom: true,
      series: '5fe072ea1485f22e24b3776c',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckpay3cnj0m1804s1a3hfg9p4',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60b1d4af9b1e2e1dccbcde3b',
      hasPinnedTag: false,
      readTime: 2,
      __v: 2,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 7,
        reaction_5c090d96c2a9c2a674d35485: 5,
        reaction_567453d0b73d6a82ac8c5abd: 4,
        reaction_567453d0b73d6a82ac8c5abc: 4,
        reaction_5c090d96c2a9c2a674d3548a: 4,
        reaction_5c090d96c2a9c2a674d3548b: 5,
        reaction_5d9dd859f31791c942dc5b52: 4,
        reaction_5c090d96c2a9c2a674d35488: 4,
        reaction_567453d0b73d6a82ac8c5ab9: 4,
        reaction_5c090d96c2a9c2a674d35486: 4,
      },
      viewsUpdatedOn: 1671877860879,
      dateUpdated: '2022-05-29T14:14:21.289Z',
      pendingPublicationApproval: false,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35486',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 7,
        reaction_5c090d96c2a9c2a674d35485: 5,
        reaction_567453d0b73d6a82ac8c5abd: 4,
        reaction_567453d0b73d6a82ac8c5abc: 4,
        reaction_5c090d96c2a9c2a674d3548a: 4,
        reaction_5c090d96c2a9c2a674d3548b: 5,
        reaction_5d9dd859f31791c942dc5b52: 4,
        reaction_5c090d96c2a9c2a674d35488: 4,
        reaction_567453d0b73d6a82ac8c5ab9: 4,
        reaction_5c090d96c2a9c2a674d35486: 4,
      },
      id: '60b3525dfb51fd32a4dc24d7',
    },
    {
      audioUrls: {
        male: 'https://prodstage-audioblog-hnaudioblog3e1448cf-shw992q87veq.s3-us-west-2.amazonaws.com/ckzlodkv00159rks13hirg0bp',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckzlodkv00159rks13hirg0bp-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 557,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1644297911443/H5zi1EK2y.png',
      autoGeneratedCover: '',
      brief:
        "Making payments online should be seamless and less frustrating. I conquered my fear and tested out Flutterwave and I was really impressed.  Here is how to create a simple payment form using Flutterwave and WordPress.\nWhat you'll need\n\nXampp\nWordPress...",
      content:
        '<p>Making payments online should be seamless and less frustrating. I conquered my fear and tested out Flutterwave and I was really impressed.  Here is how to create a simple payment form using Flutterwave and WordPress.</p>\n<h2 id="heading-what-youll-need">What you\'ll need</h2>\n<ul>\n<li>Xampp</li>\n<li>WordPress</li>\n<li>Flutterwave Account (Test Mode/Live)</li>\n</ul>\n<p>To get started with WordPress in your local development environment, here is a step by step guide:</p>\n<p><a target="_blank" href="https://chrisdevcode.hashnode.dev/how-to-install-wordpress-in-windows">How To Install WordPress in Windows</a></p>\n<h2 id="heading-creating-flutterwave-account">Creating Flutterwave Account</h2>\n<ol>\n<li>Create a flutterwave account.</li>\n<li>Go to settings, and under the <code>API</code> tab, you\'ll get your API keys.</li>\n</ol>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644776955114/KfEJop0ox.png" alt="flutterwave_dash.png" /></p>\n<h2 id="heading-flutterwave-wordpress-plugin">Flutterwave WordPress Plugin</h2>\n<p>Flutterwave has a built-in WordPress plugin. </p>\n<p>On your WordPress Admin page, go to <code>plugins</code> and click on <code>add new</code>.</p>\n<p>Search for <code>Flutterwave Payment Forms</code></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644777426214/lVLMhLTES.png" alt="Screenshot_1.png" /></p>\n<p>Install the plugin by Flutterwave Developers, (top left on the screenshot). After installation is complete, click on <code>Activate</code> to activate the plugin.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644778135462/LPI6T_0r_.png" alt="Screenshot_2.png" /></p>\n<p>After activation, you\'ll be taken to the installed plugins page, and on the top of the page, click on the big blue button to enter your Flutterwave API keys.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644778311899/K2O6i6M-a.png" alt="Screenshot_3.png" /></p>\n<p>Select the payment method from the dropdown options:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644778902961/JUqHF297v.png" alt="Screenshot_4.png" /></p>\n<p>Scroll down to select payment currency</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644778971053/hREgPaa4u.png" alt="Screenshot_5.png" /></p>\n<p>Other fields are optional, go ahead and save the settings.</p>\n<h2 id="heading-using-flutterwave-shortcode">Using flutterwave shortcode</h2>\n<p>To be able to add the flutterwave payment forms, simply add the shortcodes into a WordPress page. The codes are as follows:</p>\n<pre><code class="lang-shell">// button\n [flw-pay-button]\n\n// button with text\n[flw-pay-button]Button Text[/flw-pay-button]\n</code></pre>\n<p>On the editing page, select <code>shortcode</code> from the editing block:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644780639270/ei9otEKrt.png" alt="Screenshot_6.png" /></p>\n<p>Insert the shortcode of your choice (flutterwave shortcode):</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644780711065/mf3CrDmY_.png" alt="Screenshot_7.png" /></p>\n<p>Save and preview the page:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644780754845/XV_eLVtiV.png" alt="Screenshot_8.png" /></p>\n<h2 id="heading-testing-the-payment-form">Testing the Payment Form</h2>\n<p>Fill out the form and click on <code>Pay Now</code> to see what happens:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644781128278/fo3N_aeDg.png" alt="Screenshot_9.png" /></p>\n<p>You\'ll be redirected to a flutterwave modal box:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644781171454/JBpYRnmfA.png" alt="Screenshot_10.png" /></p>\n<p>As shown, a user can select a preferred payment method</p>\n<p>Once the payment is complete, the transaction will reflect on your flutterwave dashboard, under the <code>transactions</code> tab:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644781272833/PzOB6rTh6.png" alt="Screenshot_13.png" /></p>\n<h3 id="heading-parting-short">Parting Short</h3>\n<p>Flutterwave has made it simpler and easier to add payments functionalities, WordPress is one of the examples. It also gives you an option for mobile payments (M-Pesa for my Country) and card payments</p>\n',
      contentMarkdown:
        "Making payments online should be seamless and less frustrating. I conquered my fear and tested out Flutterwave and I was really impressed.  Here is how to create a simple payment form using Flutterwave and WordPress.\n\n## What you'll need\n\n- Xampp\n- WordPress\n- Flutterwave Account (Test Mode/Live)\n\nTo get started with WordPress in your local development environment, here is a step by step guide:\n\n[How To Install WordPress in Windows](https://chrisdevcode.hashnode.dev/how-to-install-wordpress-in-windows)\n\n## Creating Flutterwave Account\n\n1. Create a flutterwave account.\n2. Go to settings, and under the `API` tab, you'll get your API keys.\n\n\n![flutterwave_dash.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644776955114/KfEJop0ox.png)\n\n## Flutterwave WordPress Plugin\n\nFlutterwave has a built-in WordPress plugin. \n\nOn your WordPress Admin page, go to `plugins` and click on `add new`.\n\nSearch for `Flutterwave Payment Forms`\n\n\n![Screenshot_1.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644777426214/lVLMhLTES.png)\n\nInstall the plugin by Flutterwave Developers, (top left on the screenshot). After installation is complete, click on `Activate` to activate the plugin.\n\n\n![Screenshot_2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644778135462/LPI6T_0r_.png)\n\nAfter activation, you'll be taken to the installed plugins page, and on the top of the page, click on the big blue button to enter your Flutterwave API keys.\n\n\n![Screenshot_3.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644778311899/K2O6i6M-a.png)\n\nSelect the payment method from the dropdown options:\n\n![Screenshot_4.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644778902961/JUqHF297v.png)\n\nScroll down to select payment currency\n\n![Screenshot_5.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644778971053/hREgPaa4u.png)\n\nOther fields are optional, go ahead and save the settings.\n\n## Using flutterwave shortcode\n\nTo be able to add the flutterwave payment forms, simply add the shortcodes into a WordPress page. The codes are as follows:\n\n```shell\n// button\n [flw-pay-button]\n\n// button with text\n[flw-pay-button]Button Text[/flw-pay-button]\n```\n\nOn the editing page, select `shortcode` from the editing block:\n\n\n![Screenshot_6.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644780639270/ei9otEKrt.png)\n\nInsert the shortcode of your choice (flutterwave shortcode):\n\n![Screenshot_7.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644780711065/mf3CrDmY_.png)\n\nSave and preview the page:\n\n\n![Screenshot_8.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644780754845/XV_eLVtiV.png)\n\n## Testing the Payment Form\n\nFill out the form and click on `Pay Now` to see what happens:\n\n\n![Screenshot_9.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644781128278/fo3N_aeDg.png)\n\nYou'll be redirected to a flutterwave modal box:\n\n\n![Screenshot_10.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644781171454/JBpYRnmfA.png)\n\nAs shown, a user can select a preferred payment method\n\nOnce the payment is complete, the transaction will reflect on your flutterwave dashboard, under the `transactions` tab:\n\n\n![Screenshot_13.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644781272833/PzOB6rTh6.png)\n\n### Parting Short\n\nFlutterwave has made it simpler and easier to add payments functionalities, WordPress is one of the examples. It also gives you an option for mobile payments (M-Pesa for my Country) and card payments",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94beb',
        '56744721958ef13879b94965',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5239.3377,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '62095f5552bfb318205e5520',
      title: 'How To Create a Payment Form on WordPress using Flutterwave',
      subtitle: 'Using Flutterwave with WordPress',
      type: 'story',
      coverImageAttribution: '',
      coverImagePhotographer: '',
      isCoverAttributionHidden: false,
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-to-create-a-payment-form-on-wordpress-using-flutterwave',
      importedFromMedium: false,
      dateAdded: '2022-02-13T19:43:17.666Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckzlodkv00159rks13hirg0bp',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '6200e4c1295d2760067762ed',
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      viewsUpdatedOn: 1671397260982,
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '62095f5552bfb318205e5520',
    },
    {
      audioUrls: {
        male: 'https://prodstage-audioblog-hnaudioblog3e1448cf-shw992q87veq.s3-us-west-2.amazonaws.com/ckzdvjocr02gqbps19qrzgngq',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckzdvjocr02gqbps19qrzgngq-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 142,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1644296891933/vvxFZqzBU.png',
      autoGeneratedCover: '',
      brief:
        "Let's get started.\nWhat you Need\n\nXampp installed \n\nDownloading WordPress\nWordPress, it's available for free. To download the installation files, head over to https://wordpress.org/download/. \nFollow the following steps to install and start using Wor...",
      content:
        '<p>Let\'s get started.</p>\n<h2 id="heading-what-you-need">What you Need</h2>\n<ul>\n<li>Xampp installed </li>\n</ul>\n<h2 id="heading-downloading-wordpress">Downloading WordPress</h2>\n<p><a target="_blank" href="https://wordpress.org/is an open-source CMS (Content Management System">WordPress</a>, it\'s available for free. To download the installation files, head over to https://wordpress.org/download/. </p>\n<p>Follow the following steps to install and start using WordPress locally:</p>\n<h3 id="heading-1-unzip-the-downloaded-folder">1. Unzip the downloaded folder</h3>\n<p>Unzip the folder and move to <code>C:\\xampp\\htdocs</code> (<code>htdocs</code> inside Xampp directory).</p>\n<p>Ensure that the document has the <code>index.php</code> file among other <code>.php</code> files in the root</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644267299430/XJfndSfpS.png" alt="file content" /></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644265979518/yQTkDxfOL.png" alt="Xampp htdocs" /></p>\n<p>Rename the folder to your project name. I will name mine <code>hashnode</code>.</p>\n<h2 id="heading-start-xampp-server">Start Xampp Server</h2>\n<p>Open Xampp and start Apache and MySQL services.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644266202583/5qxghzit6.png" alt="Starting XAMPP" /></p>\n<p>Test if the server is running by going to <code>http://localhost/dashboard/</code></p>\n<p>If a similar page like the image below loads up, everything is good to go:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644267039756/10w3VtQ2C.png" alt="Local Host Server" /></p>\n<h2 id="heading-create-database">Create Database</h2>\n<p>On your browser, go to <code>http://localhost/phpmyadmin/</code> to create a new database for the new WordPress site.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644267735809/v1PVZuK5d.png" alt="phpMyadmin" /></p>\n<p>On the left panel, click on <code>New</code> to create a new database. I\'ll call mine \'hashnode\'. Leave other options as they are and click on \'Create\'.</p>\n<h2 id="heading-configure-wordpress">Configure WordPress</h2>\n<p>On your browser, open the newly added WordPress site: <code>http://localhost/{folderName}</code>. Since I renamed mine to <code>hashnode</code>, I\'ll go to <code>http://localhost/hashnode</code>.</p>\n<p>Select your language once the page loads. (English for me)</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644307983119/I7eHB6ENe.png" alt="Screenshot_7.png" /></p>\n<p>A new page load to add database configurations:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644308866521/JGwJUwOBs.png" alt="Screenshot_8.png" /></p>\n<p>Replace <code>database_name_here</code> with the database name created.</p>\n<p>Replace <code>password_here</code> with an empty space, since we don\'t have a password to the database.</p>\n<p>Replace <code>username_here</code> with <code>root</code></p>\n<p>Refer to the code snippet below:</p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="fba7790934cd7a2248b42682a852d1f7"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/fba7790934cd7a2248b42682a852d1f7" class="embed-card">https://gist.github.com/achingachris/fba7790934cd7a2248b42682a852d1f7</a></div><p>Alternatively you can add Database configurations to the <code>wp-config-sample.php</code> file. Locate where the database configurations are and edit as instructed below:</p>\n<pre><code class="lang-php"><span class="hljs-comment">// ** Database settings - You can get this info from your web host ** //</span>\n<span class="hljs-comment">/** The name of the database for WordPress */</span>\ndefine( <span class="hljs-string">\'DB_NAME\'</span>, <span class="hljs-string">\'database_name_here\'</span> );\n\n<span class="hljs-comment">/** Database username */</span>\ndefine( <span class="hljs-string">\'DB_USER\'</span>, <span class="hljs-string">\'username_here\'</span> );\n\n<span class="hljs-comment">/** Database password */</span>\ndefine( <span class="hljs-string">\'DB_PASSWORD\'</span>, <span class="hljs-string">\'password_here\'</span> );\n\n<span class="hljs-comment">/** Database hostname */</span>\ndefine( <span class="hljs-string">\'DB_HOST\'</span>, <span class="hljs-string">\'localhost\'</span> );\n\n<span class="hljs-comment">/** Database charset to use in creating database tables. */</span>\ndefine( <span class="hljs-string">\'DB_CHARSET\'</span>, <span class="hljs-string">\'utf8\'</span> );\n\n<span class="hljs-comment">/** The database collate type. Don\'t change this if in doubt. */</span>\ndefine( <span class="hljs-string">\'DB_COLLATE\'</span>, <span class="hljs-string">\'\'</span> );\n</code></pre>\n<p>Replace <code>database_name_here</code> with the database name created.</p>\n<p>Replace <code>password_here</code> with an empty space, since we don\'t have a password to the database.</p>\n<p>Replace <code>username_here</code> with <code>root</code></p>\n<p>Once that is done, click on submit. If the configurations are successful, an installation page loads:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644309046796/7wqiZbDiN.png" alt="Screenshot_11.png" /></p>\n<p>Enter your site details as shown on the page (image shown)</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644309463752/RO3pNolYp.png" alt="Screenshot_12.png" /></p>\n<p>Once you have entered the site details and your credentials, you\'ll be redirected to a login page, after that, your site is ready for editing!</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644309598700/P73v7JuRd.png" alt="Screenshot_13.png" /></p>\n<h3 id="heading-parting-shot">Parting Shot!</h3>\n<p>I have never used WordPress locally, up until recently, and I had to document it. What do you think about WordPress, does it cater for your needs when creating solutions?</p>\n',
      contentMarkdown:
        "Let's get started.\n\n## What you Need\n\n- Xampp installed \n\n## Downloading WordPress\n\n[WordPress](https://wordpress.org/is an open-source CMS (Content Management System), it's available for free. To download the installation files, head over to https://wordpress.org/download/. \n\nFollow the following steps to install and start using WordPress locally:\n\n### 1. Unzip the downloaded folder\n\nUnzip the folder and move to `C:\\xampp\\htdocs` (`htdocs` inside Xampp directory).\n\nEnsure that the document has the `index.php` file among other `.php` files in the root\n\n![file content](https://cdn.hashnode.com/res/hashnode/image/upload/v1644267299430/XJfndSfpS.png)\n\n![Xampp htdocs](https://cdn.hashnode.com/res/hashnode/image/upload/v1644265979518/yQTkDxfOL.png)\n\nRename the folder to your project name. I will name mine `hashnode`.\n\n## Start Xampp Server\n\nOpen Xampp and start Apache and MySQL services.\n\n![Starting XAMPP](https://cdn.hashnode.com/res/hashnode/image/upload/v1644266202583/5qxghzit6.png)\n\nTest if the server is running by going to `http://localhost/dashboard/`\n\nIf a similar page like the image below loads up, everything is good to go:\n\n![Local Host Server](https://cdn.hashnode.com/res/hashnode/image/upload/v1644267039756/10w3VtQ2C.png)\n\n## Create Database\n\nOn your browser, go to `http://localhost/phpmyadmin/` to create a new database for the new WordPress site.\n\n![phpMyadmin](https://cdn.hashnode.com/res/hashnode/image/upload/v1644267735809/v1PVZuK5d.png)\n\nOn the left panel, click on `New` to create a new database. I'll call mine 'hashnode'. Leave other options as they are and click on 'Create'.\n\n##  Configure WordPress\n\nOn your browser, open the newly added WordPress site: `http://localhost/{folderName}`. Since I renamed mine to `hashnode`, I'll go to `http://localhost/hashnode`.\n\nSelect your language once the page loads. (English for me)\n\n![Screenshot_7.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644307983119/I7eHB6ENe.png)\n\nA new page load to add database configurations:\n\n![Screenshot_8.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644308866521/JGwJUwOBs.png)\n\nReplace `database_name_here` with the database name created.\n\nReplace `password_here` with an empty space, since we don't have a password to the database.\n\nReplace `username_here` with `root`\n\nRefer to the code snippet below:\n\n%[https://gist.github.com/achingachris/fba7790934cd7a2248b42682a852d1f7]\n\nAlternatively you can add Database configurations to the `wp-config-sample.php` file. Locate where the database configurations are and edit as instructed below:\n\n```php\n// ** Database settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'database_name_here' );\n\n/** Database username */\ndefine( 'DB_USER', 'username_here' );\n\n/** Database password */\ndefine( 'DB_PASSWORD', 'password_here' );\n\n/** Database hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The database collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n```\n\nReplace `database_name_here` with the database name created.\n\nReplace `password_here` with an empty space, since we don't have a password to the database.\n\nReplace `username_here` with `root`\n\nOnce that is done, click on submit. If the configurations are successful, an installation page loads:\n\n![Screenshot_11.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644309046796/7wqiZbDiN.png)\n\nEnter your site details as shown on the page (image shown)\n\n![Screenshot_12.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644309463752/RO3pNolYp.png)\n\nOnce you have entered the site details and your credentials, you'll be redirected to a login page, after that, your site is ready for editing!\n\n\n![Screenshot_13.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644309598700/P73v7JuRd.png)\n\n### Parting Shot!\n\nI have never used WordPress locally, up until recently, and I had to document it. What do you think about WordPress, does it cater for your needs when creating solutions?",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94beb',
        '56744723958ef13879b953f7',
        '56744723958ef13879b95372',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5228.8558,
      responses: [
        {
          popularity: 5706.1339,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6349e55a7b9ff55063441350',
          content:
            "<p>This<a target='_blank' rel='noopener noreferrer ugc nofollow'  href=\"https://www.youtube.com/watch?v=PUwRinHHTCo\">,</a> is how tutorials should be done. Great work, Chris!</p>\n",
          contentMarkdown:
            'This[,](https://www.youtube.com/watch?v=PUwRinHHTCo) is how tutorials should be done. Great work, Chris!',
          author: '5f872467c5c9ff500d6cb486',
          stamp: 'cl992pe9w003uiqnvfkrg06ni',
          post: '62022ccecb8b977b256bac6f',
          replies: [],
          dateAdded: '2022-10-14T22:40:26.758Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '62022ccecb8b977b256bac6f',
      title: 'How To Install WordPress in Windows',
      subtitle: 'Step by Step Guide on setting up WordPress on Windows',
      type: 'story',
      coverImageAttribution: '',
      coverImagePhotographer: '',
      isCoverAttributionHidden: false,
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-to-install-wordpress-in-windows',
      importedFromMedium: false,
      dateAdded: '2022-02-08T08:41:50.031Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '6349e55a7b9ff55063441351',
          user: '5f872467c5c9ff500d6cb486',
          stamp: 'cl992pe9w003uiqnvfkrg06ni',
        },
      ],
      cuid: 'ckzdvjocr02gqbps19qrzgngq',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '62017f5f3a8a6e5fe119a5f2',
      hasPinnedTag: false,
      readTime: 3,
      __v: 1,
      sB: true,
      series: null,
      dateUpdated: '2022-02-08T08:54:21.614Z',
      pendingPublicationApproval: false,
      viewsUpdatedOn: 1670909462230,
      lastActivity: '2022-10-14T22:40:26.765Z',
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '62022ccecb8b977b256bac6f',
    },
    {
      audioUrls: {
        male: 'https://prodstage-audioblog-hnaudioblog3e1448cf-shw992q87veq.s3-us-west-2.amazonaws.com/ckza7c3es0x4cbbs1eaozg3yk',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckza7c3es0x4cbbs1eaozg3yk-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 1796,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1644082199392/o4gOgeQFW.png',
      autoGeneratedCover: '',
      brief:
        "Deploying NextJS to production\nBy default, NextJS applications are easily deployable on Vercel with zero configurations. That doesn't mean you shouldn't explore what other platforms have to offer.\nTo deploy a NextJS application, simply follow the ste...",
      content:
        '<h1 id="heading-deploying-nextjs-to-production">Deploying NextJS to production</h1>\n<p>By default, <a target="_blank" href="https://nextjs.org/">NextJS</a> applications are easily deployable on <a target="_blank" href="https://vercel.com/">Vercel</a> with zero configurations. That doesn\'t mean you shouldn\'t explore what other platforms have to offer.</p>\n<p>To deploy a NextJS application, simply follow the steps below. \nIf you want to start straight up without the hustle, use the button below:</p>\n<p><a target="_blank" href="https://app.netlify.com/start/deploy?repository=https://github.com/achingachris/next-netlify-starter"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy on Netlfiy" /></a></p>\n<h2 id="heading-create-a-netlify-account">Create a Netlify Account</h2>\n<p>On your browser, go to https://app.netlify.com/signup to create your Netlify account.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644080613728/s27NP3fJY.png" alt="Creating a Netlify Account" /></p>\n<p>Choose a method that works best with you(I would use GitHub)</p>\n<h2 id="heading-set-your-next-project-ready">Set Your Next project Ready</h2>\n<p>Install <code>@netlify/plugin-nextjs</code> dependency on your project:</p>\n<pre><code class="lang-shell">npm i @netlify/plugin-nextjs\n</code></pre>\n<p>On the root of your NextJS project, create a <code>netlify.toml</code> file and the following code in the file:</p>\n<pre><code class="lang-toml"><span class="hljs-section">[build]</span>\n  <span class="hljs-attr">command</span> = <span class="hljs-string">"npm run build"</span>\n  <span class="hljs-attr">publish</span> = <span class="hljs-string">".next"</span>\n\n<span class="hljs-section">[[plugins]]</span>\n  <span class="hljs-attr">package</span> = <span class="hljs-string">"@netlify/plugin-nextjs"</span>\n</code></pre>\n<blockquote>\n<p>Ensure to update and commit changes on GitHub</p>\n</blockquote>\n<h2 id="heading-deploy-on-netlify">Deploy on Netlify</h2>\n<p>To deploy, head over to your Netlify dashboard, https://app.netlify.com/ and create on the <code>Add New Site</code> button in the <code>Site</code> tab.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644082441537/hYhIpMP6B.png" alt="addnew" /></p>\n<p>From the dropdown, select <code>Import an Existing Project</code>.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644082852674/JQrAOg-uD.png" alt="create-dropdown.png" /></p>\n<p>You\'ll be taken to a new page and asked to pick a Git provider, I will use GitHub.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644083397211/PSMnVT4zF.png" alt="pick-git.png" /></p>\n<p>Choose the repository with your project in it and proceed to deploy the site. Do not change anything under the <code>Basic build settings</code>. </p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644083552224/rtND2bWdb.png" alt="build.png" /></p>\n<p>Click on the <code>Deploy Site</code> button and wait for it to complete.</p>\n<p>Once the deployment is successful, you are ready to go!</p>\n<blockquote>\n<p>Netlify offers automatic deploys once you push a commit, and provides a preview link for the build! That is very useful!</p>\n</blockquote>\n<p>View The demo site: https://nextnetlifystarter.netlify.app/</p>\n<p>View The Source: https://github.com/achingachris/next-netlify-starter</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644087308025/otfRPzknj.png" alt="next-on-netlify.png" /></p>\n<h3 id="heading-you-got-this">You Got This</h3>\n',
      contentMarkdown:
        '# Deploying NextJS to production\n\nBy default, [NextJS](https://nextjs.org/) applications are easily deployable on [Vercel](https://vercel.com/) with zero configurations. That doesn\'t mean you shouldn\'t explore what other platforms have to offer.\n\nTo deploy a NextJS application, simply follow the steps below. \nIf you want to start straight up without the hustle, use the button below:\n\n[![Deploy on Netlfiy](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/achingachris/next-netlify-starter)\n\n## Create a Netlify Account\n\nOn your browser, go to https://app.netlify.com/signup to create your Netlify account.\n\n\n![Creating a Netlify Account](https://cdn.hashnode.com/res/hashnode/image/upload/v1644080613728/s27NP3fJY.png)\n\nChoose a method that works best with you(I would use GitHub)\n\n## Set Your Next project Ready\n\nInstall `@netlify/plugin-nextjs` dependency on your project:\n\n```shell\nnpm i @netlify/plugin-nextjs\n```\n\nOn the root of your NextJS project, create a `netlify.toml` file and the following code in the file:\n\n```toml\n[build]\n  command = "npm run build"\n  publish = ".next"\n\n[[plugins]]\n  package = "@netlify/plugin-nextjs"\n\n```\n\n>Ensure to update and commit changes on GitHub\n\n##  Deploy on Netlify\n\nTo deploy, head over to your Netlify dashboard, https://app.netlify.com/ and create on the `Add New Site` button in the `Site` tab.\n\n![addnew](https://cdn.hashnode.com/res/hashnode/image/upload/v1644082441537/hYhIpMP6B.png)\n\nFrom the dropdown, select `Import an Existing Project`.\n\n![create-dropdown.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644082852674/JQrAOg-uD.png)\n\nYou\'ll be taken to a new page and asked to pick a Git provider, I will use GitHub.\n\n![pick-git.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644083397211/PSMnVT4zF.png)\n\nChoose the repository with your project in it and proceed to deploy the site. Do not change anything under the `Basic build settings`. \n\n![build.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644083552224/rtND2bWdb.png)\n\nClick on the `Deploy Site` button and wait for it to complete.\n\nOnce the deployment is successful, you are ready to go!\n\n>Netlify offers automatic deploys once you push a commit, and provides a preview link for the build! That is very useful!\n\nView The demo site: https://nextnetlifystarter.netlify.app/\n\nView The Source: https://github.com/achingachris/next-netlify-starter\n\n\n![next-on-netlify.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1644087308025/otfRPzknj.png)\n\n### You Got This\n\n\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '61f964df43e34d1181694f7a',
        '57ce27e495368c463b098050',
        '584879f0c0aaf085e2012086',
        '56744721958ef13879b94dad',
        '56744721958ef13879b94c63',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 5225.2828,
      responses: [
        {
          popularity: 5223.9707,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '61fed21b8d15cb3e7ce636ae',
          content: '<p>Good read!</p>\n',
          contentMarkdown: 'Good read!',
          author: '5e77137ab302cf0e5bdad4e4',
          stamp: 'ckza8o11i0y4lccs13ebca4nz',
          post: '61fec95efd8b083e5728d07f',
          replies: [],
          dateAdded: '2022-02-05T19:38:03.463Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abd',
      ],
      totalReactions: 23,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '61fec95efd8b083e5728d07f',
      title: 'Deploying NextJS on Netlify - Starter Template',
      subtitle: 'Deploy a NextJS project on Netlify',
      type: 'story',
      coverImageAttribution: '',
      coverImagePhotographer: '',
      isCoverAttributionHidden: false,
      ogImage: '',
      metaTitle: 'Deploying a NextJS site on Netlify',
      metaDescription:
        'Learn how to deploy your NextJS project from GitHub to Netlify. Get to start from already to use template',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'deploying-nextjs-on-netlify-starter-template',
      importedFromMedium: false,
      dateAdded: '2022-02-05T19:00:46.962Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '61fed21b8d15cb3e7ce636af',
          user: '5e77137ab302cf0e5bdad4e4',
          stamp: 'ckza8o11i0y4lccs13ebca4nz',
        },
      ],
      cuid: 'ckza7c3es0x4cbbs1eaozg3yk',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '61feb4d08d15cb3e7ce633ce',
      hasPinnedTag: false,
      readTime: 2,
      __v: 1,
      viewsUpdatedOn: 1671881460989,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
      },
      lastActivity: '2022-02-05T19:38:22.607Z',
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abd',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
      },
      id: '61fec95efd8b083e5728d07f',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckul9sxpo053lrvs107060xhr',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckul9sxpo053lrvs107060xhr-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 99,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1633494038264/eaSLt__Z0.png',
      autoGeneratedCover: '',
      brief:
        "Hi There! Welcome to Data 101.\n\nNOTE:\nI'll be using Google's Colab and Python in the article.\nTo learn how to read files, refer to the previous article in this  series :\nhttps://chrisdevcode.hashnode.dev/reading-data-from-files-using-python\nData Expl...",
      content:
        '<blockquote>\n<p>Hi There! Welcome to Data 101.</p>\n</blockquote>\n<p>NOTE:</p>\n<p>I\'ll be using Google\'s Colab and Python in the article.</p>\n<p>To learn how to read files, refer to the previous article in this  <a target="_blank" href="https://chrisdevcode.hashnode.dev/series/data-101">series</a> :</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://chrisdevcode.hashnode.dev/reading-data-from-files-using-python">https://chrisdevcode.hashnode.dev/reading-data-from-files-using-python</a></div>\n<h1 id="data-exploration">Data Exploration</h1>\n<p>In Data Exploration, we look into finding the number of instances of records, number of columns and rows, the columns and data types in each column...</p>\n<p>I will be using  <a target="_blank" href="https://pandas.pydata.org/">pandas</a>  library throughout.</p>\n<p>I will be using  <a target="_blank" href="https://docs.google.com/spreadsheets/d/1hipdEeKU6UBrCpzyLEF-Vj5F4nA8gCRLYJP50CKr-B0/edit?usp=sharing">airlines</a>  and  <a target="_blank" href="https://docs.google.com/spreadsheets/d/1fWIIVmxXSwahoB79rxRFRY2qQbaQpAED0fx_RKR1o20/edit?usp=sharing">airports</a>  CSV files.</p>\n<p>To import the data:</p>\n<pre><code class="lang-python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd\nairlines = pd.read_csv(<span class="hljs-string">\'airlines.csv\'</span>)\nairports = pd.read_csv(<span class="hljs-string">\'airports.csv\'</span>)\n</code></pre>\n<h3 id="viewing-first-and-last-few-rows">Viewing First and Last few rows</h3>\n<p>To view the first 5 rows on the data set, we use  <code>.head()</code> from pandas.</p>\n<pre><code class="lang-python">airports.head()\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633871741764/Z-4IDvsyG.png" alt="head.png" /></p>\n<p>You can use <code>.head(x)</code> to get x number of rows from the top</p>\n<p>To view the last 5 rows on the data set, we use  <code>.tail()</code> from pandas.</p>\n<pre><code class="lang-python">airports.tail()\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633872092900/3qlS9DH25.png" alt="tail.png" /></p>\n<h3 id="viewing-rows-and-columns">Viewing Rows and Columns</h3>\n<p>To know the number of columns and rows in your data frame, use <code>.shape</code>. It returns the dimensions of your data set:</p>\n<pre><code class="lang-python">airports.shape\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633872345871/mTW49VAbB.png" alt="shape.png" /></p>\n<p>To view the columns in the data frame, use <code>.columns()</code></p>\n<pre><code class="lang-python">airports.columns\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633872419220/ly8KEV0vX.png" alt="columns.png" /></p>\n<h3 id="viewing-data-types">Viewing Data Types</h3>\n<p>To view datatypes of each data in each column, use <code>.dtypes</code>:</p>\n<pre><code class="lang-python">airports.dtypes\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633872704929/f-fn1Ixjg.png" alt="dtype.png" /></p>\n<hr />\n\n<p>Other tricks you could use are:</p>\n<pre><code class="lang-python">x.rows\nx.info()\nx.describe()\nx.unique()\nx.describe()\n</code></pre>\n',
      contentMarkdown:
        "\n> \nHi There! Welcome to Data 101.\n\nNOTE:\n\nI'll be using Google's Colab and Python in the article.\n\nTo learn how to read files, refer to the previous article in this  [series](https://chrisdevcode.hashnode.dev/series/data-101) :\n\n%[https://chrisdevcode.hashnode.dev/reading-data-from-files-using-python]\n\n# Data Exploration\n\nIn Data Exploration, we look into finding the number of instances of records, number of columns and rows, the columns and data types in each column...\n\nI will be using  [pandas](https://pandas.pydata.org/)  library throughout.\n\nI will be using  [airlines](https://docs.google.com/spreadsheets/d/1hipdEeKU6UBrCpzyLEF-Vj5F4nA8gCRLYJP50CKr-B0/edit?usp=sharing)  and  [airports](https://docs.google.com/spreadsheets/d/1fWIIVmxXSwahoB79rxRFRY2qQbaQpAED0fx_RKR1o20/edit?usp=sharing)  CSV files.\n\nTo import the data:\n\n```python\nimport pandas as pd\nairlines = pd.read_csv('airlines.csv')\nairports = pd.read_csv('airports.csv')\n\n```\n\n### Viewing First and Last few rows\n\nTo view the first 5 rows on the data set, we use  `.head()` from pandas.\n\n```python\nairports.head()\n```\n\n![head.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633871741764/Z-4IDvsyG.png)\n\nYou can use `.head(x)` to get x number of rows from the top\n\nTo view the last 5 rows on the data set, we use  `.tail()` from pandas.\n\n```python\nairports.tail()\n```\n\n![tail.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633872092900/3qlS9DH25.png)\n\n### Viewing Rows and Columns\n\nTo know the number of columns and rows in your data frame, use `.shape`. It returns the dimensions of your data set:\n\n```python\nairports.shape\n```\n\n![shape.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633872345871/mTW49VAbB.png)\n\nTo view the columns in the data frame, use `.columns()`\n\n```python\nairports.columns\n```\n\n![columns.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633872419220/ly8KEV0vX.png)\n\n### Viewing Data Types\n\nTo view datatypes of each data in each column, use `.dtypes`:\n\n```python\nairports.dtypes\n```\n\n![dtype.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633872704929/f-fn1Ixjg.png)\n\n<hr />\n\nOther tricks you could use are:\n\n```python\nx.rows\nx.info()\nx.describe()\nx.unique()\nx.describe()\n```\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94e35',
        '56744721958ef13879b94d67',
        '5f058ab0c9763d47e2d2eedc',
        '5f6629266dfc523d0a89357b',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4996.9291,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35484'],
      totalReactions: 1,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '6162ec7053401f641ba10529',
      title: 'Quick Data Exploration - Python',
      subtitle:
        'Finding the number of columns and rows, finding what columns are there, and data types - Using Python (pandas)',
      type: 'story',
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'quick-data-exploration-python',
      importedFromMedium: false,
      dateAdded: '2021-10-10T13:36:48.240Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      series: '615b4106ad6beb6f6506f578',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckul9sxpo053lrvs107060xhr',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '615d2310e16040649ad7e174',
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      viewsUpdatedOn: 1667005256488,
      uniqueReactions: ['5c090d96c2a9c2a674d35484'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      id: '6162ec7053401f641ba10529',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckuegnbpq03tdpxs12vtg4fq7',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckuegnbpq03tdpxs12vtg4fq7-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 172,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1633375792676/HEBwBDQW-.png',
      autoGeneratedCover: '',
      brief:
        "Hi There! Welcome to Data 101.\n\nIn this article, I will take you through reading files using Python as you prepare to analyze them.\nI will be using  Google's Colaboratory tool as my IDE. You don't have to install or set up anything on your laptop/com...",
      content:
        '<blockquote>\n<p>Hi There! Welcome to Data 101.</p>\n</blockquote>\n<p>In this article, I will take you through reading files using Python as you prepare to analyze them.</p>\n<p>I will be using  <a target="_blank" href="https://research.google.com/colaboratory/">Google\'s Colaboratory</a> tool as my IDE. You don\'t have to install or set up anything on your laptop/computer to use it, simply go to https://research.google.com/colaboratory/ and create a new notebook.</p>\n<h1 id="reading-csv-files">Reading CSV Files</h1>\n<p>You\'ll need to upload a data file. To do so, click on the folder icon on the far left of the Notebook:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633372078972/e0xilNfH3.png" alt="upload.png" /></p>\n<p>I will be using <a target="_blank" href="https://docs.google.com/spreadsheets/d/1hipdEeKU6UBrCpzyLEF-Vj5F4nA8gCRLYJP50CKr-B0/edit?usp=sharing">airlines</a> and  <a target="_blank" href="https://docs.google.com/spreadsheets/d/1fWIIVmxXSwahoB79rxRFRY2qQbaQpAED0fx_RKR1o20/edit?usp=sharing">airports</a>  CSV files</p>\n<p>On the new Notebook, import  <a target="_blank" href="https://pandas.pydata.org/">Pandas</a>. Pandas is a Python library that is used for data manipulation.</p>\n<pre><code class="lang-python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd\n</code></pre>\n<p>Since we have two files, let\'s create two variables with the path to the files:</p>\n<pre><code class="lang-python">airlines = pd.read_csv(<span class="hljs-string">\'airlines.csv\'</span>)\nairports = pd.read_csv(<span class="hljs-string">\'airports.csv\'</span>)\n</code></pre>\n<p>The <code>.read_csv</code> from pandas library enables us to read the CSV files. (That simple!).</p>\n<p>To view the contents of the files read, we\'ll use <code>.head()</code> from pandas that will return the first 5 rows of the data loaded.</p>\n<pre><code class="lang-python">airlines.head()\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633373312017/jmezcHP4h.png" alt="airlines.png" /></p>\n<pre><code class="lang-python">airports.head()\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633373368025/4GYrU3cCq.png" alt="airports.png" /></p>\n<h1 id="reading-json-files">Reading JSON Files</h1>\n<p>Get the file <a target="_blank" href="https://drive.google.com/file/d/1mYtu9mgykInL-FSQzugq9lIokbwShUAF/view?usp=sharing">airports.json</a></p>\n<p>We\'ll create the path to the file:</p>\n<pre><code class="lang-python">airports_json = pd.read_json(<span class="hljs-string">\'airports.json\'</span>)\n</code></pre>\n<p>To view the first 5 data objects:</p>\n<pre><code class="lang-python">airports_json.head()\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633375000266/enC-lbCFG.png" alt="airportjson.png" /></p>\n<h2 id="conclusion">Conclusion</h2>\n<p>This is probably the first-ever step into data analysis, and we nailed it!</p>\n<p>Here is the whole demo file:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://github.com/achingachris/datasciencelearninghub/blob/master/data_cleaning.ipynb">https://github.com/achingachris/datasciencelearninghub/blob/master/data_cleaning.ipynb</a></div>\n',
      contentMarkdown:
        "\n> \nHi There! Welcome to Data 101.\n\nIn this article, I will take you through reading files using Python as you prepare to analyze them.\n\nI will be using  [Google's Colaboratory](https://research.google.com/colaboratory/) tool as my IDE. You don't have to install or set up anything on your laptop/computer to use it, simply go to https://research.google.com/colaboratory/ and create a new notebook.\n\n# Reading CSV Files\n\nYou'll need to upload a data file. To do so, click on the folder icon on the far left of the Notebook:\n\n![upload.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633372078972/e0xilNfH3.png)\n\nI will be using [airlines](https://docs.google.com/spreadsheets/d/1hipdEeKU6UBrCpzyLEF-Vj5F4nA8gCRLYJP50CKr-B0/edit?usp=sharing) and  [airports](https://docs.google.com/spreadsheets/d/1fWIIVmxXSwahoB79rxRFRY2qQbaQpAED0fx_RKR1o20/edit?usp=sharing)  CSV files\n\nOn the new Notebook, import  [Pandas](https://pandas.pydata.org/). Pandas is a Python library that is used for data manipulation.\n\n```python\nimport pandas as pd\n```\n\nSince we have two files, let's create two variables with the path to the files:\n\n```python\nairlines = pd.read_csv('airlines.csv')\nairports = pd.read_csv('airports.csv')\n```\n\nThe `.read_csv` from pandas library enables us to read the CSV files. (That simple!).\n\nTo view the contents of the files read, we'll use `.head()` from pandas that will return the first 5 rows of the data loaded.\n\n```python\nairlines.head()\n```\n\n![airlines.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633373312017/jmezcHP4h.png)\n\n```python\nairports.head()\n```\n\n![airports.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633373368025/4GYrU3cCq.png)\n\n\n# Reading JSON Files\n\nGet the file [airports.json](https://drive.google.com/file/d/1mYtu9mgykInL-FSQzugq9lIokbwShUAF/view?usp=sharing)\n\nWe'll create the path to the file:\n\n```python\nairports_json = pd.read_json('airports.json')\n```\n\nTo view the first 5 data objects:\n\n```python\nairports_json.head()\n```\n\n![airportjson.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633375000266/enC-lbCFG.png)\n\n## Conclusion\n\nThis is probably the first-ever step into data analysis, and we nailed it!\n\nHere is the whole demo file:\n\n\n%[https://github.com/achingachris/datasciencelearninghub/blob/master/data_cleaning.ipynb]\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f058ab0c9763d47e2d2eedc',
        '56744721958ef13879b94d67',
        '56744721958ef13879b94e35',
        '5f6629266dfc523d0a89357b',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4987.7787,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 9,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '615ca3f88dc8c063d56f63e6',
      title: 'Reading Data From Files Using Python',
      subtitle: 'Learn how to read CSV and JSON files using Python',
      type: 'story',
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'reading-data-from-files-using-python',
      importedFromMedium: false,
      dateAdded: '2021-10-05T19:14:00.524Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      series: '615b4106ad6beb6f6506f578',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckuegnbpq03tdpxs12vtg4fq7',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '615b441258a5294ce01ae334',
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      viewsUpdatedOn: 1665721809425,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      id: '615ca3f88dc8c063d56f63e6',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/cktk4rxfb03nko8s11xngau89',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cktk4rxfb03nko8s11xngau89-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 125,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1631626143000/-FC9KmgZl.png',
      autoGeneratedCover: '',
      brief:
        'Well, a simple answer to this; I was tired and overwhelmed. \n\n\nI had signed up for a lot of competitions, boot camps, and hackathons, and had a lot of personal stuff I needed to do. It was too much so had to rest.\nThe other thing is that I had comple...',
      content:
        '<blockquote>\n<p>Well, a simple answer to this; I was tired and overwhelmed. </p>\n</blockquote>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631626382156/HzGpOwW9c.jpeg" alt="tired I am meme" /></p>\n<p>I had signed up for a lot of competitions, boot camps, and hackathons, and had a lot of personal stuff I needed to do. It was too much so had to rest.</p>\n<p>The other thing is that I had completely run out of ideas on what to write, especially for my technical blog. I was also focusing on the number of views I was getting on every article I get and sometimes that does not go well.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631626764365/BiuP7lvY0.jpeg" alt="noidea1.jpeg" /></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631626751491/2PReJxaTK.jpeg" alt="noidea.jpg" /></p>\n<p>I know I’m not alone who is struggling with a lot and trying to keep up the fast-moving world in software development and tech in general. In the middle of catching up with all the updates, we get all mixed in the mix and forget the most important thing, mental health.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631626898564/viQ33Hg88.png" alt="ok not to be ok" /></p>\n<p>I have always ignored whatever mental health or issues have to do with, but at some point, I couldn’t and had to stop that.</p>\n<p>Personally, I hate reading lengthy articles, especially if they are not technical, I would end by saying you don’t have to do everything or try and participate in everything, evaluate your capabilities and go with what is perfect for you.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631627000028/5znu9HckI.jpeg" alt="tldr" /></p>\n<p>If you feel tired or overwhelmed, just take a rest, long or short. Just don’t quit.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631626520336/Oyq8KYTyd.jpeg" alt="rest don\'t quite" /></p>\n<p>Finally:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://youtu.be/X53-8g49EjQ">https://youtu.be/X53-8g49EjQ</a></div>\n',
      contentMarkdown:
        "\n> \nWell, a simple answer to this; I was tired and overwhelmed. \n\n\n![tired I am meme](https://cdn.hashnode.com/res/hashnode/image/upload/v1631626382156/HzGpOwW9c.jpeg)\n\nI had signed up for a lot of competitions, boot camps, and hackathons, and had a lot of personal stuff I needed to do. It was too much so had to rest.\n\nThe other thing is that I had completely run out of ideas on what to write, especially for my technical blog. I was also focusing on the number of views I was getting on every article I get and sometimes that does not go well.\n\n\n![noidea1.jpeg](https://cdn.hashnode.com/res/hashnode/image/upload/v1631626764365/BiuP7lvY0.jpeg)\n\n![noidea.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1631626751491/2PReJxaTK.jpeg)\n\nI know I’m not alone who is struggling with a lot and trying to keep up the fast-moving world in software development and tech in general. In the middle of catching up with all the updates, we get all mixed in the mix and forget the most important thing, mental health.\n\n![ok not to be ok](https://cdn.hashnode.com/res/hashnode/image/upload/v1631626898564/viQ33Hg88.png)\n\nI have always ignored whatever mental health or issues have to do with, but at some point, I couldn’t and had to stop that.\n\nPersonally, I hate reading lengthy articles, especially if they are not technical, I would end by saying you don’t have to do everything or try and participate in everything, evaluate your capabilities and go with what is perfect for you.\n\n![tldr](https://cdn.hashnode.com/res/hashnode/image/upload/v1631627000028/5znu9HckI.jpeg)\n\nIf you feel tired or overwhelmed, just take a rest, long or short. Just don’t quit.\n\n![rest don't quite](https://cdn.hashnode.com/res/hashnode/image/upload/v1631626520336/Oyq8KYTyd.jpeg)\n\nFinally:\n\n%[https://youtu.be/X53-8g49EjQ]\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f058ab0c9763d47e2d2eedc',
        '56744723958ef13879b952d7',
        '5f7e39240e5d207780d949e9',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4947.0248,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
      ],
      totalReactions: 10,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '6140a83250c35a12989fa434',
      title: 'Why I Took a Break From Writing.',
      subtitle:
        'I needed it. I needed to take the break. Now I am perfect and good to go!',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'why-i-took-a-break-from-writing',
      stickCoverToBottom: false,
      pollOptions: [],
      dateAdded: '2021-09-14T13:48:34.612Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cktk4rxfb03nko8s11xngau89',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '6140a08950c35a12989fa30c',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
      },
      viewsUpdatedOn: 1669748459964,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
      },
      id: '6140a83250c35a12989fa434',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/cks3dmein0vkbees16qtnhq3o',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cks3dmein0vkbees16qtnhq3o-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 533,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1628437355003/L08vgFLE4.png',
      autoGeneratedCover: '',
      brief:
        "Usually, you'll need to install third-party packages like  react-bootstrap or  reactstrap for you to fully get the benefits of  Bootstrap components.\nThe updated  NextJS  version has made it possible to use Bootstrap with react without necessarily in...",
      content:
        '<p>Usually, you\'ll need to install third-party packages like  <a target="_blank" href="https://react-bootstrap.github.io/">react-bootstrap</a> or  <a target="_blank" href="https://reactstrap.github.io/">reactstrap</a> for you to fully get the benefits of  <a target="_blank" href="https://getbootstrap.com/docs/5.1/components/accordion/">Bootstrap components</a>.</p>\n<p>The updated  <a target="_blank" href="https://nextjs.org/docs">NextJS</a>  version has made it possible to use Bootstrap with react without necessarily installing 3rd party packages, which would rather make your app heavy and slow. Here is how to do it:</p>\n<p>First of all, you\'ll need to be using NextJS version 11.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://nextjs.org/conf">https://nextjs.org/conf</a></div>\n<p>To enjoy all that bootstrap has to offer, you have to use both CSS and JS files from both. On bootstrap\'s home page, there are the CDN links to bootstrap CSS and JS files.</p>\n<p>NextJS has the <strong>Head</strong> and <strong>Script</strong> components that let us use the CDN directly without any configuration.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://nextjs.org/docs/api-reference/next/head">https://nextjs.org/docs/api-reference/next/head</a></div>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://nextjs.org/docs/basic-features/script">https://nextjs.org/docs/basic-features/script</a></div>\n<p>On your layout file or page file, import the two components from NextJS;</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> Script <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/script\'</span>\n<span class="hljs-keyword">import</span> Head <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/head\'</span>\n</code></pre>\n<p>At the top, we\'ll use <code>Head</code> to get the bootstrap styles;</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> Head <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/head\'</span>\n\n<span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n        <span class="hljs-attr">rel</span>=<span class="hljs-string">\'stylesheet\'</span>\n        <span class="hljs-attr">href</span>=<span class="hljs-string">\'https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\'</span>\n        <span class="hljs-attr">referrerPolicy</span>=<span class="hljs-string">\'no-referrer\'</span>\n      /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index\n</code></pre>\n<p>Note that you can use the <code>&lt;link&gt;</code> inside the <code>&lt;Head&gt;&lt;/Head&gt;</code> component in Next, and just like that you\'d have brought in bootstrap CSS into your project.</p>\n<p>Most of the features need to have Bootstrap\'s javascript to actually work, to do that we\'ll use the <code>&lt;Script&gt;</code> at the bottom of the file:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> Head <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/head\'</span>\n<span class="hljs-keyword">import</span> Script <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/script\'</span>\n\n<span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n        <span class="hljs-attr">rel</span>=<span class="hljs-string">\'stylesheet\'</span>\n        <span class="hljs-attr">href</span>=<span class="hljs-string">\'https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\'</span>\n        <span class="hljs-attr">referrerPolicy</span>=<span class="hljs-string">\'no-referrer\'</span>\n      /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span></span>\n\n   <span class="hljs-comment">// page content</span>\n   <span class="hljs-comment">// some code goes here</span>\n\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Script</span>\n        <span class="hljs-attr">src</span>=<span class="hljs-string">\'https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js\'</span>\n        <span class="hljs-attr">strategy</span>=<span class="hljs-string">\'afterInteractive\'</span>\n/&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index\n</code></pre>\n<p>The Script component takes in the CDN link as the prop to <code>src</code>.</p>\n<p>With that included, you can comfortably use Bootstrap classes on your page and get responsive and desired results.</p>\n<p>Get the sample code used here:</p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="d63873c468f47f1f130b35f961f6b54a"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/achingachris/d63873c468f47f1f130b35f961f6b54a" class="embed-card">https://gist.github.com/achingachris/d63873c468f47f1f130b35f961f6b54a</a></div>',
      contentMarkdown:
        "Usually, you'll need to install third-party packages like  [react-bootstrap](https://react-bootstrap.github.io/) or  [reactstrap](https://reactstrap.github.io/) for you to fully get the benefits of  [Bootstrap components](https://getbootstrap.com/docs/5.1/components/accordion/).\n\nThe updated  [NextJS](https://nextjs.org/docs)  version has made it possible to use Bootstrap with react without necessarily installing 3rd party packages, which would rather make your app heavy and slow. Here is how to do it:\n\nFirst of all, you'll need to be using NextJS version 11.\n\n%[https://nextjs.org/conf]\n\nTo enjoy all that bootstrap has to offer, you have to use both CSS and JS files from both. On bootstrap's home page, there are the CDN links to bootstrap CSS and JS files.\n\nNextJS has the **Head** and **Script** components that let us use the CDN directly without any configuration.\n\n%[https://nextjs.org/docs/api-reference/next/head]\n\n%[https://nextjs.org/docs/basic-features/script]\n\nOn your layout file or page file, import the two components from NextJS;\n\n```js\nimport Script from 'next/script'\nimport Head from 'next/head'\n```\n\nAt the top, we'll use `Head` to get the bootstrap styles;\n\n```js\nimport Head from 'next/head'\n\nconst index = () => {\n  return (\n   <Head>\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css'\n        referrerPolicy='no-referrer'\n      />\n    </Head>\n  )\n}\n\nexport default index\n```\n\nNote that you can use the `<link>` inside the `<Head></Head>` component in Next, and just like that you'd have brought in bootstrap CSS into your project.\n\nMost of the features need to have Bootstrap's javascript to actually work, to do that we'll use the `<Script>` at the bottom of the file:\n\n```js\nimport Head from 'next/head'\nimport Script from 'next/script'\n\nconst index = () => {\n  return (\n   <Head>\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css'\n        referrerPolicy='no-referrer'\n      />\n    </Head>\n  \n   // page content\n   // some code goes here\n\n<Script\n        src='https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js'\n        strategy='afterInteractive'\n/>\n  )\n}\n\nexport default index\n```\n\nThe Script component takes in the CDN link as the prop to `src`.\n\nWith that included, you can comfortably use Bootstrap classes on your page and get responsive and desired results.\n\nGet the sample code used here:\n\n%[https://gist.github.com/achingachris/d63873c468f47f1f130b35f961f6b54a]\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94cad',
        '584879f0c0aaf085e2012086',
        '56744723958ef13879b95434',
        '56744721958ef13879b94be1',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4876.6164,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35485', '567453d0b73d6a82ac8c5abd'],
      totalReactions: 3,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '610ffbdab79d6a113668304c',
      title: 'Using Bootstrap in NextJS (No packages needed!)',
      subtitle:
        'Learn how to integrate Bootstrap into NextJS without installing 3rd packages',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'using-bootstrap-in-nextjs-no-packages-needed',
      pollOptions: [],
      dateAdded: '2021-08-08T15:44:26.036Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cks3dmein0vkbees16qtnhq3o',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '610fc29db79d6a1136682b44',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_567453d0b73d6a82ac8c5abd: 2,
      },
      viewsUpdatedOn: 1671773461128,
      uniqueReactions: ['5c090d96c2a9c2a674d35485', '567453d0b73d6a82ac8c5abd'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35484: 0,
      },
      id: '610ffbdab79d6a113668304c',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckrw2y6tt0310rks1e2vle1li',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckrw2y6tt0310rks1e2vle1li-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 798,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1627996204957/ipANKv0St.png',
      autoGeneratedCover: '',
      brief:
        'Express JS is a backend framework that runs on Node JS.\nIt really comes in handy when creating backend microservices for our applications. \nI will take you through simple steps in creating a simple API with Express.\nInstalling dependencies\nThis shoul...',
      content:
        '<p>Express JS is a backend framework that runs on Node JS.</p>\n<p>It really comes in handy when creating backend microservices for our applications. </p>\n<p>I will take you through simple steps in creating a simple API with Express.</p>\n<h2 id="installing-dependencies">Installing dependencies</h2>\n<p>This should be the simplest of all:</p>\n<p>On the project root, open up your terminal/CMD and install express using the following command:</p>\n<pre><code class="lang-shell">npm install express\n</code></pre>\n<h2 id="create-a-server-file">Create a server file</h2>\n<p>While still on the root of your project, create a JavaScript file; <code>app.js</code></p>\n<h2 id="creating-a-server">Creating A server:</h2>\n<p>On the newly created file (app.js), let\'s create a simple server:</p>\n<pre><code class="lang-js"><span class="hljs-comment">// importing express</span>\n<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'express\'</span>)\n\n<span class="hljs-comment">// creating a instance of express</span>\n<span class="hljs-keyword">const</span> app = express();\n</code></pre>\n<p>After bringing express into the app, let\'s create a simple server:</p>\n<pre><code class="lang-js">app.listen(<span class="hljs-number">5000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'App Running On Port 5000!\'</span>))\n</code></pre>\n<p> <a target="_blank" href="http://expressjs.com/en/5x/api.html#app.listen">The  .listen() method binds and listens for connections on the specified host and port.</a> </p>\n<p>Your file should now have the following code:</p>\n<pre><code class="lang-js"><span class="hljs-comment">// importing express</span>\n<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'express\'</span>)\n\n<span class="hljs-comment">// creating a instance of express</span>\n<span class="hljs-keyword">const</span> app = express();\n\napp.listen(<span class="hljs-number">5000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'App Running On Port 5000!\'</span>))\n</code></pre>\n<p>On your terminal, run the server using:</p>\n<pre><code class="lang-shell">node app.js\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627993632364/uETsDecIQ.png" alt="run1.png" /></p>\n<p>When you see the message: \'App Running On Port 5000!\' on your terminal, well! you are good to GO.</p>\n<h2 id="getting-the-api">Getting the API</h2>\n<p>Well normally, your backend application will be sending data to a client site, let\'s create a simple server.</p>\n<p>On the same folder, create a new file "data.js" with the following data:</p>\n<pre><code class="lang-JS"><span class="hljs-keyword">const</span> colors = [\n  {\n    <span class="hljs-attr">color</span>: <span class="hljs-string">\'red\'</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">\'#f00\'</span>,\n  },\n  {\n    <span class="hljs-attr">color</span>: <span class="hljs-string">\'green\'</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">\'#0f0\'</span>,\n  },\n  {\n    <span class="hljs-attr">color</span>: <span class="hljs-string">\'blue\'</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">\'#00f\'</span>,\n  },\n  {\n    <span class="hljs-attr">color</span>: <span class="hljs-string">\'cyan\'</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">\'#0ff\'</span>,\n  },\n  {\n    <span class="hljs-attr">color</span>: <span class="hljs-string">\'magenta\'</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">\'#f0f\'</span>,\n  },\n  {\n    <span class="hljs-attr">color</span>: <span class="hljs-string">\'yellow\'</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">\'#ff0\'</span>,\n  },\n  {\n    <span class="hljs-attr">color</span>: <span class="hljs-string">\'black\'</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">\'#000\'</span>,\n  },\n]\n\n<span class="hljs-built_in">module</span>.exports = colors\n</code></pre>\n<p>let\'s write the code to server the data from the file from our server:</p>\n<pre><code class="lang-js"><span class="hljs-comment">// getting the data file</span>\n<span class="hljs-keyword">const</span> color = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'./data\'</span>)\n\n<span class="hljs-comment">// serving data</span>\napp.get(<span class="hljs-string">\'/api/colors\'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {\n    res.send(color)\n})\n</code></pre>\n<p>First, we bring in the data file and create the route for getting the data.</p>\n<pre><code class="lang-js"><span class="hljs-comment">// importing express</span>\n<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'express\'</span>)\n\n<span class="hljs-comment">// getting the data file</span>\n<span class="hljs-keyword">const</span> color = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'./data\'</span>)\n\n<span class="hljs-comment">// creating a instance of express</span>\n<span class="hljs-keyword">const</span> app = express();\n\n<span class="hljs-comment">// serving data</span>\napp.get(<span class="hljs-string">\'/api/colors\'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {\n    res.send(color)\n})\n\napp.listen(<span class="hljs-number">5000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'App Running On Port 5000!\'</span>))\n</code></pre>\n<p>Run the server and go to http://localhost:5000/api/colors on your browser.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627995834660/69ZwbpgZY.png" alt="results.png" /></p>\n<p>Wasn\'t that simple!</p>\n',
      contentMarkdown:
        "Express JS is a backend framework that runs on Node JS.\n\nIt really comes in handy when creating backend microservices for our applications. \n\nI will take you through simple steps in creating a simple API with Express.\n\n## Installing dependencies\n\nThis should be the simplest of all:\n\nOn the project root, open up your terminal/CMD and install express using the following command:\n\n```shell\nnpm install express\n```\n\n## Create a server file\n\nWhile still on the root of your project, create a JavaScript file; `app.js`\n\n## Creating A server:\n\nOn the newly created file (app.js), let's create a simple server:\n\n```js\n// importing express\nconst express = require('express')\n\n// creating a instance of express\nconst app = express();\n```\n\nAfter bringing express into the app, let's create a simple server:\n\n```js\napp.listen(5000, console.log('App Running On Port 5000!'))\n```\n [The  .listen() method binds and listens for connections on the specified host and port.](http://expressjs.com/en/5x/api.html#app.listen) \n\nYour file should now have the following code:\n\n```js\n// importing express\nconst express = require('express')\n\n// creating a instance of express\nconst app = express();\n\napp.listen(5000, console.log('App Running On Port 5000!'))\n```\n\nOn your terminal, run the server using:\n\n```shell\nnode app.js\n```\n\n![run1.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627993632364/uETsDecIQ.png)\n\nWhen you see the message: 'App Running On Port 5000!' on your terminal, well! you are good to GO.\n\n## Getting the API\n\nWell normally, your backend application will be sending data to a client site, let's create a simple server.\n\nOn the same folder, create a new file \"data.js\" with the following data:\n\n```JS\nconst colors = [\n  {\n    color: 'red',\n    value: '#f00',\n  },\n  {\n    color: 'green',\n    value: '#0f0',\n  },\n  {\n    color: 'blue',\n    value: '#00f',\n  },\n  {\n    color: 'cyan',\n    value: '#0ff',\n  },\n  {\n    color: 'magenta',\n    value: '#f0f',\n  },\n  {\n    color: 'yellow',\n    value: '#ff0',\n  },\n  {\n    color: 'black',\n    value: '#000',\n  },\n]\n\nmodule.exports = colors\n```\n\nlet's write the code to server the data from the file from our server:\n\n```js\n// getting the data file\nconst color = require('./data')\n\n// serving data\napp.get('/api/colors', (req, res) => {\n    res.send(color)\n})\n```\n\nFirst, we bring in the data file and create the route for getting the data.\n\n```js\n// importing express\nconst express = require('express')\n\n// getting the data file\nconst color = require('./data')\n\n// creating a instance of express\nconst app = express();\n\n// serving data\napp.get('/api/colors', (req, res) => {\n    res.send(color)\n})\n\napp.listen(5000, console.log('App Running On Port 5000!'))\n```\n\nRun the server and go to http://localhost:5000/api/colors on your browser.\n\n![results.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627995834660/69ZwbpgZY.png)\n\nWasn't that simple!\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b9487d',
        '56d729602c0ee8a839b966f1',
        '56744721958ef13879b94cad',
        '56744723958ef13879b95245',
        '56744721958ef13879b94e17',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4866.9371,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35488',
      ],
      totalReactions: 7,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '61094074725d9303e0350386',
      title: 'How to Create A Simple API: ExpressJS',
      subtitle:
        'Creating an Express API in less than 5 long minutes (technical tutorial)',
      type: 'story',
      ogImage: '',
      metaTitle: '',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-to-create-a-simple-api-expressjs',
      importedFromMedium: false,
      dateAdded: '2021-08-03T13:11:16.941Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckrw2y6tt0310rks1e2vle1li',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '610921f3cfe20703b4e06cf7',
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 3,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
      },
      viewsUpdatedOn: 1671586262016,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35488',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 3,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
      },
      id: '61094074725d9303e0350386',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckr4sdfft00ht2rs1a7mi9rej',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckr4sdfft00ht2rs1a7mi9rej-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 148,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1626345817347/dUnvzekjI.png',
      autoGeneratedCover: '',
      brief:
        "Most of us use GitHub services frequently if not on a daily basis. \nIf you are a student, GitHub offers student packages with great tools and freebies you could use. Check my article on Github's Developer Pack for students.\nIn this article, I will ta...",
      content:
        '<p>Most of us use GitHub services frequently if not on a daily basis. </p>\n<p>If you are a student, GitHub offers student packages with great tools and freebies you could use. Check my article on <a target="_blank" href="https://chrisdevcode.hashnode.dev/github-students-developer-pack">Github\'s Developer Pack for students</a>.</p>\n<p>In this article, I will take you through using GitHub REST API to display your repos on your portfolio website. I will use <a target="_blank" href="http://postman.com/">postman</a> to test the API.</p>\n<p><a target="_blank" href="https://docs.github.com/en/rest">GitHub REST API Documentation</a>.</p>\n<h2 id="playing-with-the-api">Playing With The API</h2>\n<p>I\'ll use  <a target="_blank" href="https://chrisdevcode.hashnode.dev/using-postman-like-a-pro">postman</a>  to show you what the API can offer for your own personal use. For this, I\'ll be using the endpoint to fetch a user\'s repositories.</p>\n<pre><code><span class="hljs-attribute">https</span>:<span class="hljs-comment">//api.github.com/users/{github_username}</span>\n<span class="hljs-attribute">https</span>:<span class="hljs-comment">//api.github.com/users/{github_username}/repos</span>\n</code></pre><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626342617407/nEm1m4pQl.png" alt="Postman Screenshot" /></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626342060506/oxI1ZjT2k.png" alt="Postman Screenshot" /></p>\n<h3 id="using-the-github-user-endpoint">Using the GitHub User endpoint:</h3>\n<pre><code><span class="hljs-attribute">https</span>:<span class="hljs-comment">//api.github.com/users/{github_username}</span>\n</code></pre><p>i.e:</p>\n<pre><code><span class="hljs-attribute">https</span>:<span class="hljs-comment">//api.github.com/users/achingachris</span>\n</code></pre><p>This returns GitHub user details:</p>\n<pre><code class="lang-JSON">{\n    <span class="hljs-attr">"login"</span>: <span class="hljs-string">""</span>,\n    <span class="hljs-attr">"id"</span>: ,\n    <span class="hljs-attr">"node_id"</span>: <span class="hljs-string">""</span>,\n    <span class="hljs-attr">"avatar_url"</span>: <span class="hljs-string">""</span>,\n    <span class="hljs-attr">"gravatar_id"</span>: <span class="hljs-string">""</span>,\n    <span class="hljs-attr">"url"</span>: <span class="hljs-string">""</span>,\n    <span class="hljs-attr">"html_url"</span>: <span class="hljs-string">"https://github.com/achingachris"</span>,\n    <span class="hljs-attr">"followers_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/followers"</span>,\n    <span class="hljs-attr">"following_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/following{/other_user}"</span>,\n    <span class="hljs-attr">"gists_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/gists{/gist_id}"</span>,\n    <span class="hljs-attr">"starred_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/starred{/owner}{/repo}"</span>,\n    <span class="hljs-attr">"subscriptions_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/subscriptions"</span>,\n    <span class="hljs-attr">"organizations_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/orgs"</span>,\n    <span class="hljs-attr">"repos_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/repos"</span>,\n    <span class="hljs-attr">"events_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/events{/privacy}"</span>,\n    <span class="hljs-attr">"received_events_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/received_events"</span>,\n    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"User"</span>,\n    <span class="hljs-attr">"site_admin"</span>: <span class="hljs-literal">false</span>,\n    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"chrisdevcode"</span>,\n    <span class="hljs-attr">"company"</span>: <span class="hljs-literal">null</span>,\n    <span class="hljs-attr">"blog"</span>: <span class="hljs-string">""</span>,\n    <span class="hljs-attr">"location"</span>: <span class="hljs-string">"Kenya"</span>,\n    <span class="hljs-attr">"email"</span>: <span class="hljs-literal">null</span>,\n    <span class="hljs-attr">"hireable"</span>: <span class="hljs-literal">null</span>,\n    <span class="hljs-attr">"bio"</span>: <span class="hljs-string">"React | Next | Node | C#(dotnet)\\r\\n\\r\\nTech Community Lover"</span>,\n    <span class="hljs-attr">"twitter_username"</span>: <span class="hljs-literal">null</span>,\n    <span class="hljs-attr">"public_repos"</span>: <span class="hljs-number">211</span>,\n    <span class="hljs-attr">"public_gists"</span>: <span class="hljs-number">15</span>,\n    <span class="hljs-attr">"followers"</span>: <span class="hljs-number">91</span>,\n    <span class="hljs-attr">"following"</span>: <span class="hljs-number">117</span>,\n    <span class="hljs-attr">"created_at"</span>: <span class="hljs-string">"2019-04-29T22:17:15Z"</span>,\n    <span class="hljs-attr">"updated_at"</span>: <span class="hljs-string">"2021-07-15T06:56:22Z"</span>\n}\n</code></pre>\n<p>You could use this to display:</p>\n<ol>\n<li>Public respos and gists</li>\n<li>Date you created your GitHub account</li>\n<li>GitHub bio</li>\n<li>Number of people you follow and followers too.</li>\n</ol>\n<h3 id="using-the-github-user-repos-endpoint">Using the GitHub User Repos endpoint:</h3>\n<pre><code><span class="hljs-attribute">https</span>:<span class="hljs-comment">//api.github.com/users/{github_username}/repos</span>\n</code></pre><p>i.e:</p>\n<pre><code><span class="hljs-attribute">https</span>:<span class="hljs-comment">//api.github.com/users/achingachris/repos</span>\n</code></pre><p>The results returned:</p>\n<p>PS - It also returns the user details plus all the repos:</p>\n<pre><code class="lang-JSON">{\n        <span class="hljs-attr">"id"</span>: <span class="hljs-number">300814209</span>,\n        <span class="hljs-attr">"node_id"</span>: <span class="hljs-string">"MDEwOlJlcG9zaXRvcnkzMDA4MTQyMDk="</span>,\n        <span class="hljs-attr">"name"</span>: <span class="hljs-string">"AI-ML-Bootcamp"</span>,\n        <span class="hljs-attr">"full_name"</span>: <span class="hljs-string">"achingachris/AI-ML-Bootcamp"</span>,\n        <span class="hljs-attr">"private"</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">"owner"</span>: {\n            <span class="hljs-attr">"login"</span>: <span class="hljs-string">"achingachris"</span>,\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">50122165</span>,\n            <span class="hljs-attr">"node_id"</span>: <span class="hljs-string">"MDQ6VXNlcjUwMTIyMTY1"</span>,\n            <span class="hljs-attr">"avatar_url"</span>: <span class="hljs-string">"https://avatars.githubusercontent.com/u/50122165?v=4"</span>,\n            <span class="hljs-attr">"gravatar_id"</span>: <span class="hljs-string">""</span>,\n            <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris"</span>,\n            <span class="hljs-attr">"html_url"</span>: <span class="hljs-string">"https://github.com/achingachris"</span>,\n            <span class="hljs-attr">"followers_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/followers"</span>,\n            <span class="hljs-attr">"following_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/following{/other_user}"</span>,\n            <span class="hljs-attr">"gists_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/gists{/gist_id}"</span>,\n            <span class="hljs-attr">"starred_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/starred{/owner}{/repo}"</span>,\n            <span class="hljs-attr">"subscriptions_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/subscriptions"</span>,\n            <span class="hljs-attr">"organizations_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/orgs"</span>,\n            <span class="hljs-attr">"repos_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/repos"</span>,\n            <span class="hljs-attr">"events_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/events{/privacy}"</span>,\n            <span class="hljs-attr">"received_events_url"</span>: <span class="hljs-string">"https://api.github.com/users/achingachris/received_events"</span>,\n            <span class="hljs-attr">"type"</span>: <span class="hljs-string">"User"</span>,\n            <span class="hljs-attr">"site_admin"</span>: <span class="hljs-literal">false</span>\n        },\n        <span class="hljs-attr">"html_url"</span>: <span class="hljs-string">"https://github.com/achingachris/AI-ML-Bootcamp"</span>,\n        <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Artificial Intelligence and Machine Learning Bootcamp - Strathmore University"</span>,\n        <span class="hljs-attr">"fork"</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp"</span>,\n        <span class="hljs-attr">"forks_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/forks"</span>,\n        <span class="hljs-attr">"keys_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/keys{/key_id}"</span>,\n        <span class="hljs-attr">"collaborators_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/collaborators{/collaborator}"</span>,\n        <span class="hljs-attr">"teams_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/teams"</span>,\n        <span class="hljs-attr">"hooks_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/hooks"</span>,\n        <span class="hljs-attr">"issue_events_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/issues/events{/number}"</span>,\n        <span class="hljs-attr">"events_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/events"</span>,\n        <span class="hljs-attr">"assignees_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/assignees{/user}"</span>,\n        <span class="hljs-attr">"branches_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/branches{/branch}"</span>,\n        <span class="hljs-attr">"tags_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/tags"</span>,\n        <span class="hljs-attr">"blobs_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/blobs{/sha}"</span>,\n        <span class="hljs-attr">"git_tags_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/tags{/sha}"</span>,\n        <span class="hljs-attr">"git_refs_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/refs{/sha}"</span>,\n        <span class="hljs-attr">"trees_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/trees{/sha}"</span>,\n        <span class="hljs-attr">"statuses_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/statuses/{sha}"</span>,\n        <span class="hljs-attr">"languages_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/languages"</span>,\n        <span class="hljs-attr">"stargazers_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/stargazers"</span>,\n        <span class="hljs-attr">"contributors_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/contributors"</span>,\n        <span class="hljs-attr">"subscribers_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/subscribers"</span>,\n        <span class="hljs-attr">"subscription_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/subscription"</span>,\n        <span class="hljs-attr">"commits_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/commits{/sha}"</span>,\n        <span class="hljs-attr">"git_commits_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/commits{/sha}"</span>,\n        <span class="hljs-attr">"comments_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/comments{/number}"</span>,\n        <span class="hljs-attr">"issue_comment_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/issues/comments{/number}"</span>,\n        <span class="hljs-attr">"contents_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/contents/{+path}"</span>,\n        <span class="hljs-attr">"compare_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/compare/{base}...{head}"</span>,\n        <span class="hljs-attr">"merges_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/merges"</span>,\n        <span class="hljs-attr">"archive_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/{archive_format}{/ref}"</span>,\n        <span class="hljs-attr">"downloads_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/downloads"</span>,\n        <span class="hljs-attr">"issues_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/issues{/number}"</span>,\n        <span class="hljs-attr">"pulls_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/pulls{/number}"</span>,\n        <span class="hljs-attr">"milestones_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/milestones{/number}"</span>,\n        <span class="hljs-attr">"notifications_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/notifications{?since,all,participating}"</span>,\n        <span class="hljs-attr">"labels_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/labels{/name}"</span>,\n        <span class="hljs-attr">"releases_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/releases{/id}"</span>,\n        <span class="hljs-attr">"deployments_url"</span>: <span class="hljs-string">"https://api.github.com/repos/achingachris/AI-ML-Bootcamp/deployments"</span>,\n        <span class="hljs-attr">"created_at"</span>: <span class="hljs-string">"2020-10-03T06:39:03Z"</span>,\n        <span class="hljs-attr">"updated_at"</span>: <span class="hljs-string">"2020-10-07T19:30:57Z"</span>,\n        <span class="hljs-attr">"pushed_at"</span>: <span class="hljs-string">"2020-10-07T19:30:54Z"</span>,\n        <span class="hljs-attr">"git_url"</span>: <span class="hljs-string">"git://github.com/achingachris/AI-ML-Bootcamp.git"</span>,\n        <span class="hljs-attr">"ssh_url"</span>: <span class="hljs-string">"git@github.com:achingachris/AI-ML-Bootcamp.git"</span>,\n        <span class="hljs-attr">"clone_url"</span>: <span class="hljs-string">"https://github.com/achingachris/AI-ML-Bootcamp.git"</span>,\n        <span class="hljs-attr">"svn_url"</span>: <span class="hljs-string">"https://github.com/achingachris/AI-ML-Bootcamp"</span>,\n        <span class="hljs-attr">"homepage"</span>: <span class="hljs-string">""</span>,\n        <span class="hljs-attr">"size"</span>: <span class="hljs-number">140</span>,\n        <span class="hljs-attr">"stargazers_count"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"watchers_count"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"language"</span>: <span class="hljs-string">"Jupyter Notebook"</span>,\n        <span class="hljs-attr">"has_issues"</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">"has_projects"</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">"has_downloads"</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">"has_wiki"</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">"has_pages"</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">"forks_count"</span>: <span class="hljs-number">0</span>,\n        <span class="hljs-attr">"mirror_url"</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">"archived"</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">"disabled"</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">"open_issues_count"</span>: <span class="hljs-number">0</span>,\n        <span class="hljs-attr">"license"</span>: {\n            <span class="hljs-attr">"key"</span>: <span class="hljs-string">"mit"</span>,\n            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"MIT License"</span>,\n            <span class="hljs-attr">"spdx_id"</span>: <span class="hljs-string">"MIT"</span>,\n            <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://api.github.com/licenses/mit"</span>,\n            <span class="hljs-attr">"node_id"</span>: <span class="hljs-string">"MDc6TGljZW5zZTEz"</span>\n        },\n        <span class="hljs-attr">"forks"</span>: <span class="hljs-number">0</span>,\n        <span class="hljs-attr">"open_issues"</span>: <span class="hljs-number">0</span>,\n        <span class="hljs-attr">"watchers"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"default_branch"</span>: <span class="hljs-string">"main"</span>\n    },\n</code></pre>\n<p>From this, you could use this to show your GitHub repos\' details with much ease.</p>\n<p>To explore more on using the GitHub REST API for Users, visit: </p>\n<p>https://docs.github.com/en/rest/reference/users</p>\n<h2 id="next-step">Next Step</h2>\n<p>Check out my Blog for a tutorial on using the GitHub API in a NEXTJS app.</p>\n',
      contentMarkdown:
        'Most of us use GitHub services frequently if not on a daily basis. \n\nIf you are a student, GitHub offers student packages with great tools and freebies you could use. Check my article on [Github\'s Developer Pack for students](https://chrisdevcode.hashnode.dev/github-students-developer-pack).\n\nIn this article, I will take you through using GitHub REST API to display your repos on your portfolio website. I will use [postman](http://postman.com/) to test the API.\n\n[GitHub REST API Documentation](https://docs.github.com/en/rest).\n\n## Playing With The API\n\nI\'ll use  [postman](https://chrisdevcode.hashnode.dev/using-postman-like-a-pro)  to show you what the API can offer for your own personal use. For this, I\'ll be using the endpoint to fetch a user\'s repositories.\n\n```\nhttps://api.github.com/users/{github_username}\nhttps://api.github.com/users/{github_username}/repos\n```\n\n![Postman Screenshot](https://cdn.hashnode.com/res/hashnode/image/upload/v1626342617407/nEm1m4pQl.png)\n\n![Postman Screenshot](https://cdn.hashnode.com/res/hashnode/image/upload/v1626342060506/oxI1ZjT2k.png)\n\n### Using the GitHub User endpoint:\n\n```\nhttps://api.github.com/users/{github_username}\n```\n\ni.e:\n\n```\nhttps://api.github.com/users/achingachris\n```\n\nThis returns GitHub user details:\n\n```JSON\n{\n    "login": "",\n    "id": ,\n    "node_id": "",\n    "avatar_url": "",\n    "gravatar_id": "",\n    "url": "",\n    "html_url": "https://github.com/achingachris",\n    "followers_url": "https://api.github.com/users/achingachris/followers",\n    "following_url": "https://api.github.com/users/achingachris/following{/other_user}",\n    "gists_url": "https://api.github.com/users/achingachris/gists{/gist_id}",\n    "starred_url": "https://api.github.com/users/achingachris/starred{/owner}{/repo}",\n    "subscriptions_url": "https://api.github.com/users/achingachris/subscriptions",\n    "organizations_url": "https://api.github.com/users/achingachris/orgs",\n    "repos_url": "https://api.github.com/users/achingachris/repos",\n    "events_url": "https://api.github.com/users/achingachris/events{/privacy}",\n    "received_events_url": "https://api.github.com/users/achingachris/received_events",\n    "type": "User",\n    "site_admin": false,\n    "name": "chrisdevcode",\n    "company": null,\n    "blog": "",\n    "location": "Kenya",\n    "email": null,\n    "hireable": null,\n    "bio": "React | Next | Node | C#(dotnet)\\r\\n\\r\\nTech Community Lover",\n    "twitter_username": null,\n    "public_repos": 211,\n    "public_gists": 15,\n    "followers": 91,\n    "following": 117,\n    "created_at": "2019-04-29T22:17:15Z",\n    "updated_at": "2021-07-15T06:56:22Z"\n}\n```\n\nYou could use this to display:\n\n\n1. Public respos and gists\n2. Date you created your GitHub account\n3. GitHub bio\n4. Number of people you follow and followers too.\n\n### Using the GitHub User Repos endpoint:\n\n```\nhttps://api.github.com/users/{github_username}/repos\n```\n\ni.e:\n\n\n```\nhttps://api.github.com/users/achingachris/repos\n```\n\nThe results returned:\n\nPS - It also returns the user details plus all the repos:\n\n```JSON\n{\n        "id": 300814209,\n        "node_id": "MDEwOlJlcG9zaXRvcnkzMDA4MTQyMDk=",\n        "name": "AI-ML-Bootcamp",\n        "full_name": "achingachris/AI-ML-Bootcamp",\n        "private": false,\n        "owner": {\n            "login": "achingachris",\n            "id": 50122165,\n            "node_id": "MDQ6VXNlcjUwMTIyMTY1",\n            "avatar_url": "https://avatars.githubusercontent.com/u/50122165?v=4",\n            "gravatar_id": "",\n            "url": "https://api.github.com/users/achingachris",\n            "html_url": "https://github.com/achingachris",\n            "followers_url": "https://api.github.com/users/achingachris/followers",\n            "following_url": "https://api.github.com/users/achingachris/following{/other_user}",\n            "gists_url": "https://api.github.com/users/achingachris/gists{/gist_id}",\n            "starred_url": "https://api.github.com/users/achingachris/starred{/owner}{/repo}",\n            "subscriptions_url": "https://api.github.com/users/achingachris/subscriptions",\n            "organizations_url": "https://api.github.com/users/achingachris/orgs",\n            "repos_url": "https://api.github.com/users/achingachris/repos",\n            "events_url": "https://api.github.com/users/achingachris/events{/privacy}",\n            "received_events_url": "https://api.github.com/users/achingachris/received_events",\n            "type": "User",\n            "site_admin": false\n        },\n        "html_url": "https://github.com/achingachris/AI-ML-Bootcamp",\n        "description": "Artificial Intelligence and Machine Learning Bootcamp - Strathmore University",\n        "fork": false,\n        "url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp",\n        "forks_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/forks",\n        "keys_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/keys{/key_id}",\n        "collaborators_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/collaborators{/collaborator}",\n        "teams_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/teams",\n        "hooks_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/hooks",\n        "issue_events_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/issues/events{/number}",\n        "events_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/events",\n        "assignees_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/assignees{/user}",\n        "branches_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/branches{/branch}",\n        "tags_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/tags",\n        "blobs_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/blobs{/sha}",\n        "git_tags_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/tags{/sha}",\n        "git_refs_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/refs{/sha}",\n        "trees_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/trees{/sha}",\n        "statuses_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/statuses/{sha}",\n        "languages_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/languages",\n        "stargazers_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/stargazers",\n        "contributors_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/contributors",\n        "subscribers_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/subscribers",\n        "subscription_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/subscription",\n        "commits_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/commits{/sha}",\n        "git_commits_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/git/commits{/sha}",\n        "comments_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/comments{/number}",\n        "issue_comment_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/issues/comments{/number}",\n        "contents_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/contents/{+path}",\n        "compare_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/compare/{base}...{head}",\n        "merges_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/merges",\n        "archive_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/{archive_format}{/ref}",\n        "downloads_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/downloads",\n        "issues_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/issues{/number}",\n        "pulls_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/pulls{/number}",\n        "milestones_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/milestones{/number}",\n        "notifications_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/notifications{?since,all,participating}",\n        "labels_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/labels{/name}",\n        "releases_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/releases{/id}",\n        "deployments_url": "https://api.github.com/repos/achingachris/AI-ML-Bootcamp/deployments",\n        "created_at": "2020-10-03T06:39:03Z",\n        "updated_at": "2020-10-07T19:30:57Z",\n        "pushed_at": "2020-10-07T19:30:54Z",\n        "git_url": "git://github.com/achingachris/AI-ML-Bootcamp.git",\n        "ssh_url": "git@github.com:achingachris/AI-ML-Bootcamp.git",\n        "clone_url": "https://github.com/achingachris/AI-ML-Bootcamp.git",\n        "svn_url": "https://github.com/achingachris/AI-ML-Bootcamp",\n        "homepage": "",\n        "size": 140,\n        "stargazers_count": 1,\n        "watchers_count": 1,\n        "language": "Jupyter Notebook",\n        "has_issues": true,\n        "has_projects": true,\n        "has_downloads": true,\n        "has_wiki": true,\n        "has_pages": false,\n        "forks_count": 0,\n        "mirror_url": null,\n        "archived": false,\n        "disabled": false,\n        "open_issues_count": 0,\n        "license": {\n            "key": "mit",\n            "name": "MIT License",\n            "spdx_id": "MIT",\n            "url": "https://api.github.com/licenses/mit",\n            "node_id": "MDc6TGljZW5zZTEz"\n        },\n        "forks": 0,\n        "open_issues": 0,\n        "watchers": 1,\n        "default_branch": "main"\n    },\n```\n\nFrom this, you could use this to show your GitHub repos\' details with much ease.\n\nTo explore more on using the GitHub REST API for Users, visit: \n\nhttps://docs.github.com/en/rest/reference/users\n\n## Next Step\n\nCheck out my Blog for a tutorial on using the GitHub API in a NEXTJS app.\n\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94c63',
        '56b1208d04f0061506b360ff',
        '56744723958ef13879b95245',
        '5f058ab0c9763d47e2d2eedc',
        '60ed9e18fc37a15ec15683b3',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4830.5057,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
      ],
      totalReactions: 7,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60f011c52863df330327af97',
      title: 'GitHub REST API',
      subtitle: 'Using the GitHub REST API to fetch your repos.',
      type: 'story',
      metaTitle: 'GitHub Users REST API',
      metaDescription: 'Using the GitHub REST API to display your repos',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'github-rest-api',
      pollOptions: [],
      dateAdded: '2021-07-15T10:45:25.335Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckr4sdfft00ht2rs1a7mi9rej',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60eff63d23b128642163c779',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 3,
      __v: 0,
      reactionToCountMap: {
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
      },
      series: '5fb973291b7ab0041800d9ce',
      dateUpdated: '2021-09-13T08:34:12.850Z',
      pendingPublicationApproval: false,
      viewsUpdatedOn: 1670950864774,
      uniqueReactions: [
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
      ],
      reactionToCountMapUnique: {
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
      },
      id: '60f011c52863df330327af97',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckq2ssb0v0dllsxs1hsiy1k26',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckq2ssb0v0dllsxs1hsiy1k26-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 2947,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1624027333188/XJD9Qp1sN.png',
      autoGeneratedCover: '',
      brief:
        'C# is a general-purpose, multi-paradigm programming language encompassing static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented, and component-oriented programming disciplines.\nIn this article, ...',
      content:
        '<p>C# is a general-purpose, multi-paradigm programming language encompassing static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented, and component-oriented programming disciplines.</p>\n<p>In this article, I will take you through installing and setting up C#(c-sharp) environment on a Ubuntu OS(Operating System).</p>\n<p>Requirements:</p>\n<ul>\n<li><a target="_blank" href="https://ubuntu.com/">Ubuntu</a>  OS (20.0 and above)</li>\n<li>Internet Connection (For Installation)</li>\n<li><a target="_blank" href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview">Command Line Skills</a>  (for the obvious LOL)</li>\n<li><a target="_blank" href="https://code.visualstudio.com/">Visual Studio Code</a> </li>\n</ul>\n<blockquote>\n<p>Note that .NET is a C# library</p>\n</blockquote>\n<h2 id="installing-net-csharp">Installing .NET (Csharp)</h2>\n<p>Start your terminal on Ubuntu;</p>\n<p><code>ctr</code> + <code>shift</code> + <code>T</code></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624046438527/NHPeFyFrP.png" alt="Terminal" /></p>\n<p>First we need to add the Microsoft package signing key to your list of trusted keys and add the package repository. Run the commands in the order as they appear;</p>\n<pre><code class="lang-shell">wget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\n</code></pre>\n<pre><code class="lang-shell">sudo dpkg -i packages-microsoft-prod.deb\n</code></pre>\n<hr />\n\n<p>Installing .NET SDK</p>\n<pre><code class="lang-shell">sudo apt-get update; \\\n  sudo apt-get install -y apt-transport-https &amp;&amp; \\\n  sudo apt-get update &amp;&amp; \\\n  sudo apt-get install -y dotnet-sdk-5.0\n</code></pre>\n<p>Installing The Runtime</p>\n<pre><code class="lang-shell">sudo apt-get update; \\\n  sudo apt-get install -y apt-transport-https &amp;&amp; \\\n  sudo apt-get update &amp;&amp; \\\n  sudo apt-get install -y aspnetcore-runtime-5.0\n</code></pre>\n<p>To test the installation, run the command <code>dotnet</code> on your terminal;</p>\n<pre><code class="lang-shell">dotnet\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624046930043/zzhtV5SXU.png" alt="test.png" /></p>\n<p>yaay! we are done with that.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu">https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu</a></div>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a></div>\n<h2 id="visual-studio-code-setup">Visual Studio Code Setup</h2>\n<p>This is an easy procedure, as we only need to install an extension on VSCode.</p>\n<p>The extension is: <strong>C# for Visual Studio Code (powered by OmniSharp)</strong></p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp">https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp</a></div>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624047760180/DZnQEhotl.png" alt="extension screenshot" /></p>\n<p>How to Install VSCode Extensions:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://youtu.be/SKcZ3cwX8lA">https://youtu.be/SKcZ3cwX8lA</a></div>\n<p>Once you have the extension added, we can create the famous <strong>Hello World</strong> application in C#.</p>\n<h2 id="creating-hello-world-in-c">Creating Hello World in C</h2>\n<p>First you create a new Project folder, say <code>c-sharp</code>, and open the empty folder with Visual Studio Code.</p>\n<p>Open the integrated terminal in VSCode or use the terminal (ensure you are in the project\'s folder path).</p>\n<p>To start a C# program use the command below;</p>\n<pre><code class="lang-shell">dotnet new console\n</code></pre>\n<p><code>dotnet new</code> is creating a new dotnet project. <code>console</code> is to specify the application type, in this case our program will be running on our terminal (console).</p>\n<p>Once you run the command, a couple of files and folders are created.</p>\n<p>We are only interested in the <code>Program.cs</code> file for now:</p>\n<pre><code class="lang-cs"><span class="hljs-keyword">using</span> System;\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">hello</span>\n{\n    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span>\n    {\n        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-keyword">string</span>[] args</span>)</span>\n        {\n            Console.WriteLine(<span class="hljs-string">"Hello World!"</span>);\n        }\n    }\n}\n</code></pre>\n<p>You don\'t need to change anything for now.</p>\n<p>Let\'s run the program using the command:</p>\n<pre><code class="lang-shell">dotnet run\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624050366155/8fe4Unc_f.png" alt="hello.png" /></p>\n<p>And that is how you get to use C# in Ubuntu. </p>\n<p>Demo Files:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://github.com/ChrisAchinga/c-sharp">https://github.com/ChrisAchinga/c-sharp</a></div>\n<blockquote>\n<p>Don\'t mind my terminal name, my laptop is really slow LOL!</p>\n</blockquote>\n',
      contentMarkdown:
        "C# is a general-purpose, multi-paradigm programming language encompassing static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented, and component-oriented programming disciplines.\n\nIn this article, I will take you through installing and setting up C#(c-sharp) environment on a Ubuntu OS(Operating System).\n\nRequirements:\n\n-  [Ubuntu](https://ubuntu.com/)  OS (20.0 and above)\n- Internet Connection (For Installation)\n-  [Command Line Skills](https://ubuntu.com/tutorials/command-line-for-beginners#1-overview)  (for the obvious LOL)\n-  [Visual Studio Code](https://code.visualstudio.com/) \n\n>Note that .NET is a C# library\n\n## Installing .NET (Csharp)\n\nStart your terminal on Ubuntu;\n\n`ctr` + `shift` + `T`\n\n![Terminal](https://cdn.hashnode.com/res/hashnode/image/upload/v1624046438527/NHPeFyFrP.png)\n\nFirst we need to add the Microsoft package signing key to your list of trusted keys and add the package repository. Run the commands in the order as they appear;\n\n```shell\nwget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\n```\n\n```shell\nsudo dpkg -i packages-microsoft-prod.deb\n```\n\n<hr />\n\nInstalling .NET SDK\n\n```shell\nsudo apt-get update; \\\n  sudo apt-get install -y apt-transport-https && \\\n  sudo apt-get update && \\\n  sudo apt-get install -y dotnet-sdk-5.0\n```\n\nInstalling The Runtime\n\n```shell\nsudo apt-get update; \\\n  sudo apt-get install -y apt-transport-https && \\\n  sudo apt-get update && \\\n  sudo apt-get install -y aspnetcore-runtime-5.0\n```\n\nTo test the installation, run the command `dotnet` on your terminal;\n\n```shell\ndotnet\n```\n\n![test.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624046930043/zzhtV5SXU.png)\n\nyaay! we are done with that.\n\n%[https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu]\n\n%[https://dotnet.microsoft.com/download]\n\n## Visual Studio Code Setup\n\nThis is an easy procedure, as we only need to install an extension on VSCode.\n\nThe extension is: **C# for Visual Studio Code (powered by OmniSharp)**\n\n%[https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp]\n\n![extension screenshot](https://cdn.hashnode.com/res/hashnode/image/upload/v1624047760180/DZnQEhotl.png)\n\nHow to Install VSCode Extensions:\n\n%[https://youtu.be/SKcZ3cwX8lA]\n\nOnce you have the extension added, we can create the famous **Hello World** application in C#.\n\n## Creating Hello World in C#\n\nFirst you create a new Project folder, say `c-sharp`, and open the empty folder with Visual Studio Code.\n\nOpen the integrated terminal in VSCode or use the terminal (ensure you are in the project's folder path).\n\nTo start a C# program use the command below;\n\n```shell\ndotnet new console\n```\n\n`dotnet new` is creating a new dotnet project. `console` is to specify the application type, in this case our program will be running on our terminal (console).\n\nOnce you run the command, a couple of files and folders are created.\n\nWe are only interested in the `Program.cs` file for now:\n\n```cs\nusing System;\n\nnamespace hello\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n```\n\nYou don't need to change anything for now.\n\nLet's run the program using the command:\n\n```shell\ndotnet run\n```\n\n![hello.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624050366155/8fe4Unc_f.png)\n\nAnd that is how you get to use C# in Ubuntu. \n\nDemo Files:\n\n%[https://github.com/ChrisAchinga/c-sharp]\n\n>Don't mind my terminal name, my laptop is really slow LOL!\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f058ab0c9763d47e2d2eedc',
        '56744721958ef13879b94a30',
        '56744721958ef13879b94988',
        '57323a8bae9d49b5a5a5b39c',
        '57a37bf75bfdd08aeffb5832',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4778.6156,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
      ],
      totalReactions: 10,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60cd050837952431a171158b',
      title: 'C#(Dotnet) Setup in Ubuntu with VSCode',
      subtitle: 'Installation and Creating a simple C-Sharp Program',
      type: 'story',
      ogImage: '',
      metaTitle: 'C#(Dotnet) Setup in Ubuntu with VSCode',
      metaDescription:
        'Installation and Creating a simple C-Sharp Program in a Linux-based environment (Ubuntu)',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'cdotnet-setup-in-ubuntu-with-vscode',
      importedFromMedium: false,
      dateAdded: '2021-06-18T20:41:44.831Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckq2ssb0v0dllsxs1hsiy1k26',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60cc857837952431a1710894',
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
      },
      series: null,
      dateUpdated: '2021-06-18T21:06:48.782Z',
      pendingPublicationApproval: false,
      viewsUpdatedOn: 1671872460659,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
      },
      id: '60cd050837952431a171158b',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckhwew9md08cnfps1a31cfsxf',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckhwew9md08cnfps1a31cfsxf-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 1448,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1624011810919/-kZ0ahFA5.png',
      autoGeneratedCover: '',
      brief:
        'Access the best real-world tools, learning events, and training to shape the next generation of software development, using student benefits from GitHub Education\n\nGitHub Education helps students, teachers, and schools access the tools and events the...',
      content:
        '<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624009597944/dBooP2KKw.png" alt="GitHub Education" /></p>\n<blockquote>\n<p>Access the best real-world tools, learning events, and training to shape the next generation of software development, using student benefits from GitHub Education</p>\n<ul>\n<li>GitHub Education helps students, teachers, and schools access the tools and events they need to shape the next generation of software development.</li>\n</ul>\n</blockquote>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://education.github.com/">https://education.github.com/</a></div>\n<p>Well as a student whose goal/dreams or maybe ambitions are to prosper in the developer zone, GitHub Education offers the bridge to your success using the GitHub Student Developer Pack. Really cool tools available for free of course.</p>\n<p>I will give a quick introduction to all of them, but before that, you should be verified by GitHub that you are a student.</p>\n<p>The application is simple: (You must have a GitHub account) Using the simple steps:</p>\n<ol>\n<li>Head over to https://education.github.com/</li>\n<li>Click on the <code>get benefits</code> button on the top-right</li>\n<li>You may want to click on the <code>Get Student Offer</code></li>\n<li>You\'ll be directed to a simple application page, fill the details then wait up for the approval.</li>\n</ol>\n<p>In the meantime:\nI won\'t list all the tools available because they too many, I\'ll list the common and most used tools, be sure to create your account to be able to view them and all and enjoy the services while it lasts.</p>\n<h2 id="github-student-developer-pack-offers">GitHub Student Developer Pack Offers</h2>\n<h3 id="categories">Categories</h3>\n<ul>\n<li><a class="post-section-overview" href="#cloud">Cloud</a></li>\n<li><a class="post-section-overview" href="#design">Design</a></li>\n<li><a class="post-section-overview" href="#developer-tools">Developer Tools</a></li>\n<li><a class="post-section-overview" href="#domains">Domains</a></li>\n<li><a class="post-section-overview" href="#game-development">Game Development</a></li>\n<li><a class="post-section-overview" href="#infrastructure-and-api">Infrastructure &amp; API</a></li>\n<li><a class="post-section-overview" href="#internet-of-things">Internet of Things</a></li>\n<li><a class="post-section-overview" href="#learn">Learn</a></li>\n<li><a class="post-section-overview" href="#marketing">Marketing</a></li>\n<li><a class="post-section-overview" href="#mobile">Mobile</a></li>\n<li><a class="post-section-overview" href="#productivity">Productivity</a></li>\n<li><a class="post-section-overview" href="#security-and-analytics">Security &amp; Analytics</a></li>\n</ul>\n<h2 id="cloud">Cloud</h2>\n<blockquote>\n<p>services from cloud service providers with free credits for GitHub Students</p>\n</blockquote>\n<h4 id="digital-ocean">Digital Ocean</h4>\n<p>$100 in platform credit for new users.</p>\n<h4 id="microsoft-azure">Microsoft Azure</h4>\n<p>Free access to 25+ Microsoft Azure cloud services plus $100 in Azure credit.</p>\n<h4 id="heroku">Heroku</h4>\n<p>One free Hobby Dyno for up to two years.</p>\n<p><a target="_blank" href="https://education.github.com/pack/offers?sort=popularity&amp;tag=Cloud">View More</a></p>\n<hr />\n\n<h2 id="design">Design</h2>\n<blockquote>\n<p>Design tools for User Interface and Design, and User Experience</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>canva</td><td>With Canva, anyone can create professional-looking graphics and designs. Featuring thousands of templates and an easy-to-use editor.</td></tr>\n<tr>\n<td>Bootstrap Studio</td><td>Bootstrap Studio is a powerful desktop app for creating responsive websites using the Bootstrap framework.</td></tr>\n<tr>\n<td>iconscout</td><td>Iconscout is a design resources marketplace to get high-quality icons, illustrations, and stock images.</td></tr>\n<tr>\n<td>Typeform</td><td>Interactive forms, surveys &amp; quizzes to engage and grow your audience</td></tr>\n<tr>\n<td>Kodika.io</td><td>Build iOS applications with drag &amp; drop.</td></tr>\n<tr>\n<td>XOJO</td><td>A cross-platform development tool for making native apps for the Desktop.</td></tr>\n<tr>\n<td>Neve</td><td>Neve’s mobile-first approach, compatibility with AMP, and popular page-builders make website building accessible for everyone.</td></tr>\n</tbody>\n</table>\n</div><p><a target="_blank" href="https://education.github.com/pack/offers?sort=popularity&amp;tag=Design">View More</a></p>\n<hr />\n\n<h2 id="developer-tools">Developer Tools</h2>\n<blockquote>\n<p>Tools and Services to help you create your product, including text editors and more</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>GitHub</td><td>Powerful collaboration, code review, and code management</td></tr>\n<tr>\n<td>Jetbrains</td><td>Professional desktop IDEs: IntelliJ IDEA, PyCharm, and more.</td></tr>\n<tr>\n<td>GitKraken</td><td>GitKraken Pro Suite: cross-platform Git GUI, Kanban Boards for issue/task tracking, and Timelines for project planning.</td></tr>\n<tr>\n<td>termius</td><td>SSH client that works on desktop and mobile. Termius securely syncs data across all your devices.</td></tr>\n<tr>\n<td>repl.it</td><td>An online IDE that lets you instantly code in over fifty languages. Start learning, building, collaborating and hosting all in one place.</td></tr>\n<tr>\n<td>Working Copy</td><td>Powerful Git client for iPhone &amp; iPad.</td></tr>\n<tr>\n<td>Travis CI</td><td>Continuous integration platform for open source and private projects</td></tr>\n<tr>\n<td>BrowserStack</td><td>Test your web apps with BrowserStack\'s Real Device Cloud, which gives you instant access to 2000+ browsers and real iOS and Android devices.</td></tr>\n<tr>\n<td>Codecov</td><td>Codecov makes it easy to implement code coverage to develop healthier code</td></tr>\n<tr>\n<td>Better Code Hub</td><td>Codecov makes it easy to implement code coverage to develop healthier code</td></tr>\n<tr>\n<td>SQL gate</td><td>Simple but powerful IDE for multiple SQL databases.</td></tr>\n<tr>\n<td>Weglot</td><td>Make any website multilingual and manage your translations through a single platform.</td></tr>\n</tbody>\n</table>\n</div><p><a target="_blank" href="https://education.github.com/pack/offers?sort=popularity&amp;tag=Developer+tools">View More</a></p>\n<hr />\n\n<h2 id="domains">Domains</h2>\n<blockquote>\n<p>Getting domain names for your projects</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>name.com</td><td>Domain names, web hosting, and websites. Unicorns and rainbows come standard with our customer support.</td></tr>\n<tr>\n<td>Namecheap</td><td>Affordable registration, hosting, and domain management</td></tr>\n<tr>\n<td>.tech domains</td><td>A powerful domain extension to convey that you belong to the technology industry.</td></tr>\n</tbody>\n</table>\n</div><p><a target="_blank" href="https://education.github.com/pack/offers?sort=popularity&amp;tag=Domains">View More</a></p>\n<hr />\n\n<h2 id="game-development">Game Development</h2>\n<blockquote>\n<p>Tools that provide a platform to develop games</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Unity</td><td>Accomplish your creative goals using the world’s leading real-time development platform, used to create half of the world’s games.</td></tr>\n</tbody>\n</table>\n</div><p><a target="_blank" href="https://education.github.com/pack/offers?sort=popularity&amp;tag=Game+development">View More</a></p>\n<hr />\n\n<h2 id="infrastructure-and-api">Infrastructure And API</h2>\n<blockquote>\n<p>Database tools and API integration tools</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Mongo DB</td><td>A general-purpose, document-based, distributed database built for modern application developers and for the cloud era</td></tr>\n<tr>\n<td>Arduino education</td><td>Empower scientists and artists of the future with creative STEM programs.</td></tr>\n<tr>\n<td>mail gun</td><td>Powerful APIs that enable you to send, receive and track email effortlessly.</td></tr>\n<tr>\n<td>stripe</td><td>Web and mobile payments, built for developers</td></tr>\n<tr>\n<td>carto</td><td>An open and powerful platform for spatial data analysis, visualization, and application creation.</td></tr>\n<tr>\n<td>Crypto lens</td><td>License and sell your software securely.</td></tr>\n<tr>\n<td>Block chair</td><td>Connect to the world of blockchains through Blockchair’s professional APIs — supports most major cryptocurrencies.</td></tr>\n<tr>\n<td>Push bots</td><td>The easiest way to engage your mobile &amp; web app users via push notifications.</td></tr>\n</tbody>\n</table>\n</div><p><a target="_blank" href="https://education.github.com/pack/offers?sort=popularity&amp;tag=Infrastructure+%26+APIs">View More</a></p>\n<hr />\n\n<h2 id="internet-of-things">Internet Of Things</h2>\n<blockquote>\n<p>The interconnection via the Internet of computing devices embedded in everyday objects, enabling them to send and receive data.</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>adafruit</td><td>Adafruit is an open-source hardware and open-source educational electronics company based in NYC, USA.</td></tr>\n<tr>\n<td>arduino</td><td>Empower scientists and artists of the future with creative STEM programs.</td></tr>\n</tbody>\n</table>\n</div><p><a target="_blank" href="https://education.github.com/pack/offers?sort=popularity&amp;tag=Internet+of+Things">View More</a></p>\n<hr />\n\n<h2 id="learn">Learn</h2>\n<blockquote>\n<p>Platform to learn and engage in bootcamps and tutorials</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Frontend masters</td><td>Advance your skills with in-depth JavaScript, Node.js &amp; front-end engineering courses.</td></tr>\n<tr>\n<td>Datacamp</td><td>DataCamp helps companies and individuals make better use of data. Our users build data fluency while learning from the world’s top data scientists.</td></tr>\n<tr>\n<td>GitHub Campus Experts</td><td>GitHub Campus Experts are students who build technical communities on campus, with training and support from GitHub.</td></tr>\n<tr>\n<td>Interview cake</td><td>Interview Cake makes coding interviews a piece of cake with practice questions, data structures and algorithms reference pages, cheat sheets, and more.</td></tr>\n<tr>\n<td>Go rails</td><td>Tutorials for web developers learning Ruby, Rails, Javascript, Turbolinks, Stimulus.js, Vue.js, and more.</td></tr>\n</tbody>\n</table>\n</div><p><a target="_blank" href="[View More](https://education.github.com/pack/offers?sort=popularity&amp;tag=Learn">View More</a></p>\n<hr />\n\n<h2 id="marketing">Marketing</h2>\n<blockquote>\n<p>Marketing tools for your product solution</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>appfigures</td><td>App Store analytics, optimization, and intelligence.</td></tr>\n<tr>\n<td>Customerly</td><td>Live chat, behavioural funnels, newsletters, and in-app surveys for SaaS.</td></tr>\n<tr>\n<td>Jaamly</td><td>Helping developers, designers, and startups to launch their apps on the App Store.</td></tr>\n</tbody>\n</table>\n</div><p><a target="_blank" href="[View More](https://education.github.com/pack/offers?sort=popularity&amp;tag=Marketing">View More</a></p>\n<hr />\n\n<h2 id="mobile">Mobile</h2>\n<blockquote>\n<p>Mobile Development Tools</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Sofy</td><td>SOFY automates your software testing, uses machine learning to create tests, suggests test scenarios based on product changes, customer usage data and runs at scale.</td></tr>\n<tr>\n<td>termius</td><td>SSH client that works on desktop and mobile. Termius securely syncs data across all your devices.</td></tr>\n<tr>\n<td>kodika.io</td><td>Build iOS applications with drag &amp; drop.</td></tr>\n</tbody>\n</table>\n</div><h2 id="productivity">Productivity</h2>\n<blockquote>\n<p>Enhance your productivity</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>PromoDone</td><td>With PomoDone, hack and track your time and boost your productivity by applying Pomodoro technique to your workflow -- eliminate distraction, sharpen focus and prevent burnout.</td></tr>\n<tr>\n<td>HazeOver</td><td>Get focused while working on your projects or studying with HazeOver for Mac.</td></tr>\n<tr>\n<td>Use Together</td><td>Remote pair programming and team collaboration tool.</td></tr>\n<tr>\n<td>Crowdin</td><td>Crowdin is a cloud-based solution that streamlines localization management.</td></tr>\n</tbody>\n</table>\n</div><h2 id="security-and-analytics">Security And Analytics</h2>\n<blockquote>\n<p>Secure your projects and analyze data tools</p>\n</blockquote>\n<div class="hn-table">\n<table>\n<thead>\n<tr>\n<td>Tool                           </td><td>Description</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Datadog</td><td>Cloud-based infrastructure monitoring.</td></tr>\n<tr>\n<td>blackfire.io</td><td>Code performance measurement tool. Find &amp; fix bottlenecks.</td></tr>\n<tr>\n<td>HoneyBadger.io</td><td>The web developer\'s secret weapon: exception, uptime monitoring that\'s so awesome, you\'ll wish your site had more errors.</td></tr>\n</tbody>\n</table>\n</div><h2 id="reference">Reference</h2>\n<ol>\n<li>https://education.github.com/</li>\n</ol>\n',
      contentMarkdown:
        "![GitHub Education](https://cdn.hashnode.com/res/hashnode/image/upload/v1624009597944/dBooP2KKw.png)\n\n>Access the best real-world tools, learning events, and training to shape the next generation of software development, using student benefits from GitHub Education\n\n> * GitHub Education helps students, teachers, and schools access the tools and events they need to shape the next generation of software development.\n\n\n%[https://education.github.com/]\n\n\nWell as a student whose goal/dreams or maybe ambitions are to prosper in the developer zone, GitHub Education offers the bridge to your success using the GitHub Student Developer Pack. Really cool tools available for free of course.\n\nI will give a quick introduction to all of them, but before that, you should be verified by GitHub that you are a student.\n\nThe application is simple: (You must have a GitHub account) Using the simple steps:\n\n1. Head over to https://education.github.com/\n2. Click on the `get benefits` button on the top-right\n3. You may want to click on the `Get Student Offer`\n4. You'll be directed to a simple application page, fill the details then wait up for the approval.\n\nIn the meantime:\nI won't list all the tools available because they too many, I'll list the common and most used tools, be sure to create your account to be able to view them and all and enjoy the services while it lasts.\n\n## GitHub Student Developer Pack Offers\n\n### Categories\n\n* [Cloud](#cloud)\n* [Design](#design)\n* [Developer Tools](#developer-tools)\n* [Domains](#domains)\n* [Game Development](#game-development)\n* [Infrastructure & API](#infrastructure-and-api)\n* [Internet of Things](#internet-of-things)\n* [Learn](#learn)\n* [Marketing](#marketing)\n* [Mobile](#mobile)\n* [Productivity](#productivity)\n* [Security & Analytics](#security-and-analytics)\n\n## Cloud\n\n> services from cloud service providers with free credits for GitHub Students\n\n#### Digital Ocean\n\n$100 in platform credit for new users.\n\n#### Microsoft Azure\n\nFree access to 25+ Microsoft Azure cloud services plus $100 in Azure credit.\n\n#### Heroku\n\nOne free Hobby Dyno for up to two years.\n\n[View More](https://education.github.com/pack/offers?sort=popularity&tag=Cloud)\n<hr />\n\n## Design\n\n> Design tools for User Interface and Design, and User Experience\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                                                          |\n| ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| canva                                                                                                 | With Canva, anyone can create professional-looking graphics and designs. Featuring thousands of templates and an easy-to-use editor. |\n| Bootstrap Studio                                                                                      | Bootstrap Studio is a powerful desktop app for creating responsive websites using the Bootstrap framework.                           |\n| iconscout                                                                                             | Iconscout is a design resources marketplace to get high-quality icons, illustrations, and stock images.                                 |\n| Typeform                                                                                              | Interactive forms, surveys & quizzes to engage and grow your audience                                                                |\n| Kodika.io                                                                                             | Build iOS applications with drag & drop.                                                                                             |\n| XOJO                                                                                                  | A cross-platform development tool for making native apps for the Desktop.                                                            |\n| Neve                                                                                                  | Neve’s mobile-first approach, compatibility with AMP, and popular page-builders make website building accessible for everyone.       |\n\n[View More](https://education.github.com/pack/offers?sort=popularity&tag=Design)\n<hr />\n\n## Developer Tools\n\n> Tools and Services to help you create your product, including text editors and more\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                                                                  |\n| ----------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| GitHub                                                                                                | Powerful collaboration, code review, and code management                                                                                     |\n| Jetbrains                                                                                             | Professional desktop IDEs: IntelliJ IDEA, PyCharm, and more.                                                                                 |\n| GitKraken                                                                                             | GitKraken Pro Suite: cross-platform Git GUI, Kanban Boards for issue/task tracking, and Timelines for project planning.                      |\n| termius                                                                                               | SSH client that works on desktop and mobile. Termius securely syncs data across all your devices.                                            |\n| repl.it                                                                                               | An online IDE that lets you instantly code in over fifty languages. Start learning, building, collaborating and hosting all in one place.    |\n| Working Copy                                                                                          | Powerful Git client for iPhone & iPad.                                                                                                       |\n| Travis CI                                                                                             | Continuous integration platform for open source and private projects                                                                         |\n| BrowserStack                                                                                          | Test your web apps with BrowserStack's Real Device Cloud, which gives you instant access to 2000+ browsers and real iOS and Android devices. |\n| Codecov                                                                                               | Codecov makes it easy to implement code coverage to develop healthier code                                                                   |\n| Better Code Hub                                                                                       | Codecov makes it easy to implement code coverage to develop healthier code                                                                   |\n| SQL gate                                                                                              | Simple but powerful IDE for multiple SQL databases.                                                                                          |\n| Weglot                                                                                                | Make any website multilingual and manage your translations through a single platform.                                                        |\n\n[View More](https://education.github.com/pack/offers?sort=popularity&tag=Developer+tools)\n<hr />\n\n## Domains\n\n> Getting domain names for your projects\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                             |\n| ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| name.com                                                                                              | Domain names, web hosting, and websites. Unicorns and rainbows come standard with our customer support. |\n| Namecheap                                                                                             | Affordable registration, hosting, and domain management                                                 |\n| .tech domains                                                                                        | A powerful domain extension to convey that you belong to the technology industry.                       |\n\n[View More](https://education.github.com/pack/offers?sort=popularity&tag=Domains)\n<hr />\n\n## Game Development\n\n> Tools that provide a platform to develop games\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                                                        |\n| ----------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| Unity                                                                                                 | Accomplish your creative goals using the world’s leading real-time development platform, used to create half of the world’s games. |\n\n[View More](https://education.github.com/pack/offers?sort=popularity&tag=Game+development)\n<hr />\n\n## Infrastructure And API\n\n> Database tools and API integration tools\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                                           |\n| ----------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |\n| Mongo DB                                                                                              | A general-purpose, document-based, distributed database built for modern application developers and for the cloud era |\n| Arduino education                                                                                     | Empower scientists and artists of the future with creative STEM programs.                                             |\n| mail gun                                                                                              | Powerful APIs that enable you to send, receive and track email effortlessly.                                          |\n| stripe                                                                                                | Web and mobile payments, built for developers                                                                         |\n| carto                                                                                                 | An open and powerful platform for spatial data analysis, visualization, and application creation.                     |\n| Crypto lens                                                                                           | License and sell your software securely.                                                                              |\n| Block chair                                                                                           | Connect to the world of blockchains through Blockchair’s professional APIs — supports most major cryptocurrencies.    |\n| Push bots                                                                                             | The easiest way to engage your mobile & web app users via push notifications.                                         |\n\n[View More](https://education.github.com/pack/offers?sort=popularity&tag=Infrastructure+%26+APIs)\n<hr />\n\n## Internet Of Things\n\n> The interconnection via the Internet of computing devices embedded in everyday objects, enabling them to send and receive data.\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                            |\n| ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| adafruit                                                                                              | Adafruit is an open-source hardware and open-source educational electronics company based in NYC, USA. |\n| arduino                                                                                               | Empower scientists and artists of the future with creative STEM programs.                              |\n\n[View More](https://education.github.com/pack/offers?sort=popularity&tag=Internet+of+Things)\n<hr />\n\n## Learn\n\n> Platform to learn and engage in bootcamps and tutorials\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                                                                             |\n| ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Frontend masters                                                                                      | Advance your skills with in-depth JavaScript, Node.js & front-end engineering courses.                                                                  |\n| Datacamp                                                                                              | DataCamp helps companies and individuals make better use of data. Our users build data fluency while learning from the world’s top data scientists.     |\n| GitHub Campus Experts                                                                                 | GitHub Campus Experts are students who build technical communities on campus, with training and support from GitHub.                                    |\n| Interview cake                                                                                        | Interview Cake makes coding interviews a piece of cake with practice questions, data structures and algorithms reference pages, cheat sheets, and more. |\n| Go rails                                                                                              | Tutorials for web developers learning Ruby, Rails, Javascript, Turbolinks, Stimulus.js, Vue.js, and more.                                               |\n\n[View More]([View More](https://education.github.com/pack/offers?sort=popularity&tag=Learn)\n<hr />\n\n## Marketing\n\n> Marketing tools for your product solution\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                        |\n| ----------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |\n| appfigures                                                                                            | App Store analytics, optimization, and intelligence.                               |\n| Customerly                                                                                            | Live chat, behavioural funnels, newsletters, and in-app surveys for SaaS.          |\n| Jaamly                                                                                                | Helping developers, designers, and startups to launch their apps on the App Store. |\n\n[View More]([View More](https://education.github.com/pack/offers?sort=popularity&tag=Marketing)\n<hr />\n\n## Mobile\n\n> Mobile Development Tools\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                                                                                           |\n| ----------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Sofy                                                                                                  | SOFY automates your software testing, uses machine learning to create tests, suggests test scenarios based on product changes, customer usage data and runs at scale. |\n| termius                                                                                               | SSH client that works on desktop and mobile. Termius securely syncs data across all your devices.                                                                     |\n| kodika.io                                                                                             | Build iOS applications with drag & drop.                                                                                                                              |\n\n\n## Productivity\n\n> Enhance your productivity\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                                                                                                      |\n| ----------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| PromoDone                                                                                             | With PomoDone, hack and track your time and boost your productivity by applying Pomodoro technique to your workflow -- eliminate distraction, sharpen focus and prevent burnout. |\n| HazeOver                                                                                              | Get focused while working on your projects or studying with HazeOver for Mac.                                                                                                    |\n| Use Together                                                                                          | Remote pair programming and team collaboration tool.                                                                                                                             |\n| Crowdin                                                                                               | Crowdin is a cloud-based solution that streamlines localization management.                                                                                                      |\n\n## Security And Analytics\n\n> Secure your projects and analyze data tools\n\n| Tool&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Description                                                                                                                         |\n| ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| Datadog                                                                                               | Cloud-based infrastructure monitoring.                                                                                              |\n| blackfire.io                                                                                          | Code performance measurement tool. Find & fix bottlenecks.                                                                          |\n| HoneyBadger.io                                                                                        | The web developer's secret weapon: exception, uptime monitoring that's so awesome, you'll wish your site had more errors. |\n\n## Reference\n\n1. https://education.github.com/",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94c63',
        '56744723958ef13879b9526c',
        '57ebac0bd9b08ec06a77be05',
        '5f789ec19c3b6e410121699a',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4778.1567,
      responses: [
        {
          popularity: 5388.3194,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '626fab8677f8e2f7fe9347d6',
          content:
            "<p>The GitHub Student Programming Pack gives students access to free and premium developer tools. If you&#39;re seeking a means to learn from the actual world, this is a great alternative  <a target='_blank' rel='noopener noreferrer ugc nofollow'  href=\"https://www.bestessays.com.au/\">bestessays.com.au</a>  Premium courses and access to the newest developer tools are included in the GitHub Student Developer Packs.</p>\n",
          contentMarkdown:
            "The GitHub Student Programming Pack gives students access to free and premium developer tools. If you're seeking a means to learn from the actual world, this is a great alternative  [bestessays.com.au](https://www.bestessays.com.au/)  Premium courses and access to the newest developer tools are included in the GitHub Student Developer Packs.",
          author: '6263e4d60f819f588af75e6b',
          stamp: 'cl2ojvd1700bye0nv73wbfbo8',
          post: '5fbd684730fc2d1b859e3d69',
          replies: [],
          dateAdded: '2022-05-02T09:59:34.844Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 5371.2893,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6263f9f20f819f588af75ff8',
          content:
            "<p>Visit GitHub Education and click to Get benefits in the top-right corner.GitHub Student Developer Packs contain premium courses and offer access to the latest developer tools. For example, students can learn about data science, virtual reality and  <a target='_blank' rel='noopener noreferrer ugc nofollow'  href=\"https://sopwritingservices.net/free-examples/\">Free Examples</a>  from it.They have Posts in Free Essay Examples also.This is a best essay writing example.</p>\n",
          contentMarkdown:
            'Visit GitHub Education and click to Get benefits in the top-right corner.GitHub Student Developer Packs contain premium courses and offer access to the latest developer tools. For example, students can learn about data science, virtual reality and  [Free Examples](https://sopwritingservices.net/free-examples/)  from it.They have Posts in Free Essay Examples also.This is a best essay writing example.',
          author: '6260270e7019274627fd7b89',
          stamp: 'cl2bvloxl075tw4nvg138bygv',
          post: '5fbd684730fc2d1b859e3d69',
          replies: [],
          dateAdded: '2022-04-23T13:06:58.810Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 5359.108,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '625b9cb352fb7bd53380f798',
          content:
            "<p>Well as an understudy whose objective/dreams or perhaps desires are to thrive in the engineer zone, GitHub Education offers the scaffold to your prosperity utilizing the  <a target='_blank' rel='noopener noreferrer ugc nofollow'  href=\"https://smmirror.com/2022/01/best-colleges-in-california-2022/\">find more info</a>  Best Colleges in California 2022 that furnish enlisting understudies with a plenty of classes, astounding help choices, and a potential chance to acquire a degree from a trusted and regarded California foundation.</p>\n",
          contentMarkdown:
            'Well as an understudy whose objective/dreams or perhaps desires are to thrive in the engineer zone, GitHub Education offers the scaffold to your prosperity utilizing the  [find more info](https://smmirror.com/2022/01/best-colleges-in-california-2022/)  Best Colleges in California 2022 that furnish enlisting understudies with a plenty of classes, astounding help choices, and a potential chance to acquire a degree from a trusted and regarded California foundation.',
          author: '5e7b9c2eb841244e20d163d8',
          stamp: 'cl22t8qf50a8wy6nv2eo51z6x',
          post: '5fbd684730fc2d1b859e3d69',
          replies: [],
          dateAdded: '2022-04-17T04:50:59.394Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4778.0517,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60cca1e5554b0d31c60533b2',
          content:
            '<p>The best thing for students. Anyone who wants to start his journey in the developers&#39; world should grab it.</p>\n',
          contentMarkdown:
            "The best thing for students. Anyone who wants to start his journey in the developers' world should grab it.",
          author: '6076fb5a4155da32fc83a94f',
          stamp: 'ckq2doccf08v2tys180vg35z8',
          post: '5fbd684730fc2d1b859e3d69',
          replies: [],
          dateAdded: '2021-06-18T13:38:45.761Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 4,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
      ],
      totalReactions: 32,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: true,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fbd684730fc2d1b859e3d69',
      title: 'GitHub Students Developer Pack',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'github-students-developer-pack',
      pollOptions: [],
      dateAdded: '2021-06-17T20:08:39.000Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '626fab8677f8e2f7fe9347d7',
          user: '6263e4d60f819f588af75e6b',
          stamp: 'cl2ojvd1700bye0nv73wbfbo8',
        },
        {
          _id: '6263f9f20f819f588af75ff9',
          user: '6260270e7019274627fd7b89',
          stamp: 'cl2bvloxl075tw4nvg138bygv',
        },
        {
          _id: '625b9cb352fb7bd53380f799',
          user: '5e7b9c2eb841244e20d163d8',
          stamp: 'cl22t8qf50a8wy6nv2eo51z6x',
        },
        {
          _id: '60cca1e5554b0d31c60533b3',
          user: '6076fb5a4155da32fc83a94f',
          stamp: 'ckq2doccf08v2tys180vg35z8',
        },
      ],
      cuid: 'ckhwew9md08cnfps1a31cfsxf',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fbd67b0ec43af1ba6095292',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 8,
      __v: 5,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 6,
        reaction_5c090d96c2a9c2a674d35486: 3,
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_567453d0b73d6a82ac8c5ab9: 3,
        reaction_567453d0b73d6a82ac8c5abd: 3,
        reaction_567453d0b73d6a82ac8c5abc: 5,
        reaction_5c090d96c2a9c2a674d3548a: 3,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      dateUpdated: '2021-06-18T22:36:20.113Z',
      metaTitle: 'GitHub Students Developer Pack',
      pendingPublicationApproval: false,
      subtitle: 'great freebies from GitHub education for Students',
      hasCustomDate: true,
      lastActivity: '2022-05-02T09:59:34.853Z',
      series: '5fb973291b7ab0041800d9ce',
      viewsUpdatedOn: 1671854460865,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 6,
        reaction_5c090d96c2a9c2a674d35486: 3,
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_567453d0b73d6a82ac8c5ab9: 3,
        reaction_567453d0b73d6a82ac8c5abd: 3,
        reaction_567453d0b73d6a82ac8c5abc: 5,
        reaction_5c090d96c2a9c2a674d3548a: 3,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      id: '5fbd684730fc2d1b859e3d69',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckpz8yerg00estbs1apit218q',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckpz8yerg00estbs1apit218q-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 750,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1623745178266/LGEiKbsO_.png',
      autoGeneratedCover: '',
      brief:
        "Hashnode is one of the first places to go to for tutorials, developer articles, and news. It is without a doubt that using its API is the coolest thing one can ever do.\n\nIf you haven't created an account with Hashnode, don't hesitate to do so\n\nDemo a...",
      content:
        '<p><a class="user-mention" href="https://hashnode.com/@hashnode">Hashnode</a> is one of the first places to go to for tutorials, developer articles, and news. It is without a doubt that using its API is the coolest thing one can ever do.</p>\n<blockquote>\n<p>If you haven\'t created an account with <a class="user-mention" href="https://hashnode.com/@hashnode">Hashnode</a>, <a target="_blank" href="https://hashnode.com/@chrisdevcode/joinme">don\'t hesitate to do so</a></p>\n</blockquote>\n<h1 id="demo-and-source-code">Demo and Source Code</h1>\n<p>https://github.com/achingachris/hashnode-api</p>\n<p>https://hashnode-api-self.vercel.app/</p>\n<h1 id="lets-code">Let\'s Code</h1>\n<p>In this article, I will take you through Displaying blog articles from <a target="_blank" href="https://hashnode.com/@chrisdevcode/joinme">hashnode</a> on a Next JS website.</p>\n<p>To do that, you will need to have the following checked:</p>\n<ul>\n<li>Hashnode Account</li>\n<li>NodeJS</li>\n<li>Text Editor (visual studio code)</li>\n</ul>\n<p>I will be using <a target="_blank" href="https://www.apollographql.com/">Apollo graphQL</a> to help querying data in NextJS</p>\n<h2 id="hashnode-api">Hashnode API</h2>\n<p>Hashnode API used graphQL. It\'s pretty and fast in getting data. </p>\n<p><a target="_blank" href="https://api.hashnode.com/">Hashnode API Playground</a></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623745369823/-0-Glxxo9.png" alt="Hashnode API Playground Image" /></p>\n<p>To learn more about queries for fetching data can be found in the docs drawer on the right side of the browser:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623746032430/rCVXMI_K8.png" alt="Hashnode API docs" /></p>\n<p>Let\'s test out some queries for getting your blog post publications:</p>\n<pre><code class="lang-query">{\n  user(username: "chrisdevcode") {\n    publication {\n      posts(page: 0) {\n        _id\n        coverImage\n        slug\n        title\n        brief\n        dateAdded\n        dateUpdated\n      }\n    }\n  }\n}\n</code></pre>\n<p>Change the <code>chrisdevcode</code> to your hashnode username:</p>\n<pre><code class="lang-query">user(username: "hashnode_user_name")\n</code></pre>\n<p>Note that in the publication query object, we have to specify the page number, 0 is the page that loads first when someone visits your blog home, i.e it is where the most recent articles appear.</p>\n<pre><code class="lang-query"> publication {\n      posts(page: 0) {\n       //\n      }\n    }\n</code></pre>\n<p>Back to the playground, paste in the query and run it:</p>\n<pre><code class="lang-query">{\n  user(username: "chrisdevcode") {\n    publication {\n      posts(page: 0) {\n        _id\n        coverImage\n        slug\n        title\n        brief\n        dateAdded\n        dateUpdated\n      }\n    }\n  }\n}\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623747006393/e11g7ir0G.png" alt="apiView.png" /></p>\n<p>The data fetched :</p>\n<pre><code class="lang-JSON">{\n  <span class="hljs-attr">"data"</span>: {\n    <span class="hljs-attr">"user"</span>: {\n      <span class="hljs-attr">"publication"</span>: {\n        <span class="hljs-attr">"posts"</span>: [\n          {\n            <span class="hljs-attr">"_id"</span>: <span class="hljs-string">"60c313ef1e145957d5af691a"</span>,\n            <span class="hljs-attr">"coverImage"</span>: <span class="hljs-string">"https://cdn.hashnode.com/res/hashnode/image/upload/v1623247532659/tqLf2R120.png"</span>,\n            <span class="hljs-attr">"slug"</span>: <span class="hljs-string">"using-markdown-in-hashnode-beginners-guide"</span>,\n            <span class="hljs-attr">"title"</span>: <span class="hljs-string">"Using Markdown In Hashnode: Beginners Guide"</span>,\n            <span class="hljs-attr">"brief"</span>: <span class="hljs-string">"Hashnode is by far my best Developer blogging platform. One of the things making me love it is the use of markdown in writing and editing articles. \\nIf you just created a Hashnode blog or thinking of creating one, then this is the best article for yo..."</span>,\n            <span class="hljs-attr">"dateAdded"</span>: <span class="hljs-string">"2021-06-11T07:42:39.715Z"</span>,\n            <span class="hljs-attr">"dateUpdated"</span>: <span class="hljs-literal">null</span>\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<p>And that\'s it, now let\'s do this on a Next website/app.</p>\n<h2 id="next-app">Next APP</h2>\n<h3 id="creating-a-next-app">Creating a next app:</h3>\n<p>Open your terminal/CMD and create a next app:</p>\n<pre><code class="lang-shell">npx create-next-app hashnode-api\n</code></pre>\n<p><strong>Installing Apollo and GraphQL</strong></p>\n<pre><code class="lang-shell">npm install @apollo/client graphql\n</code></pre>\n<p>Test the application:</p>\n<pre><code class="lang-shell">npm run dev\n</code></pre>\n<p>Open your browser and go to http://localhost:3000/</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623748670544/dNU8rf_Oh.png" alt="Next Home Page" /></p>\n<blockquote>\n<p>We will only edit one file for the purpose of demonstration i.e <code>index.js</code></p>\n</blockquote>\n<p>Open the index file i.e <code>pages/index.js</code> and clean the code into:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Hashnode Articles<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p><a target="_blank" href="https://github.com/ChrisAchinga/hashnode-api/commit/f233c4983db4d752ee11777acf7d417659a61306">Follow this commit</a></p>\n<h3 id="fetching-data">Fetching Data</h3>\n<p>I will be using third parties to fetch data from the hashnode API using graphQL.</p>\n<p>NextJS provides built-in data fetching methods, I will be using <code>getStaticProps</code>"</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStaticProps</span>(<span class="hljs-params">context</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {}, <span class="hljs-comment">// will be passed to the page component as props</span>\n  }\n}\n</code></pre>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://nextjs.org/docs/basic-features/data-fetching">https://nextjs.org/docs/basic-features/data-fetching</a></div>\n<p>In the current file, add the getStaticProps() at the bottom of the file:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Hashnode Articles<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStaticProps</span>(<span class="hljs-params">context</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {}, <span class="hljs-comment">// will be passed to the page component as props</span>\n  }\n}\n</code></pre>\n<p>Inside the getStaticProps function, we’re going to be ultimately returning our props to the page, in this case, we will be returning posts, so our props will be <code>posts</code></p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStaticProps</span>(<span class="hljs-params">context</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">posts</span>: []\n    }, \n  }\n}\n</code></pre>\n<p>We will pass in <code>posts</code> as a prop to our page:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params">{ posts }</span>) </span>{\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Hashnode Articles<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>We can test our results by logging the prop in the console:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'POSTS\'</span>, posts)\n</code></pre>\n<p>Our File now:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params">{ posts }</span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'POSTS\'</span>, posts)\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Hashnode Articles<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStaticProps</span>(<span class="hljs-params">context</span>) </span>{\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">posts</span>: [],\n    },\n  }\n}\n</code></pre>\n<p>If you open your web console, you should see this:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623751466788/RuVDsFWdc.png" alt="Using Props" /></p>\n<p><a target="_blank" href="https://github.com/ChrisAchinga/hashnode-api/commit/444bfbbac09bbd5643442c933c1f7c5b76c990aa">Follow along with commit</a></p>\n<h3 id="fetching-and-querying-with-graphql">Fetching and Querying with GraphQL</h3>\n<p>Now that everything is set up, we can comfortably get data from the hashnode API.</p>\n<p>First, we import the apollo client:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">import</span> { ApolloClient, InMemoryCache, gql } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@apollo/client\'</span>;\n</code></pre>\n<p>We are importing Apollo client and InMemoryCache that optimizes apollo reading from cache and gql that will be used to create the GraphQL query.</p>\n<p>Inside the top of the getStaticProps() function, let\'s create an instance of apollo with the Hashnode API endpoint:</p>\n<pre><code class="lang-JavaScript">  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> ApolloClient({\n    <span class="hljs-attr">uri</span>: <span class="hljs-string">\'https://api.hashnode.com/\'</span>,\n    <span class="hljs-attr">cache</span>: <span class="hljs-keyword">new</span> InMemoryCache(),\n  })\n</code></pre>\n<p>Our getStaticProps() function should now be like:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStaticProps</span>(<span class="hljs-params">context</span>) </span>{\n  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> ApolloClient({\n    <span class="hljs-attr">uri</span>: <span class="hljs-string">\'https://api.hashnode.com/\'</span>,\n    <span class="hljs-attr">cache</span>: <span class="hljs-keyword">new</span> InMemoryCache(),\n  })\n\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">posts</span>: [],\n    },\n  }\n}\n</code></pre>\n<p>Now let\'s make the query, the query syntax looks more like:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> { data } = <span class="hljs-keyword">await</span> client.query({\n  <span class="hljs-attr">query</span>: gql<span class="hljs-string">`\n    query GetPosts {\n      // write query here\n    }\n  `</span>,\n})\n</code></pre>\n<p>From the API playground, lets get the query:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> { data } = <span class="hljs-keyword">await</span> client.query({\n    <span class="hljs-attr">query</span>: gql<span class="hljs-string">`\n      query GetPosts {\n        user(username: "chrisdevcode") {\n          publication {\n            posts(page: 0) {\n              _id\n              coverImage\n              slug\n              title\n              brief\n            }\n          }\n        }\n      }\n    `</span>,\n  })\n</code></pre>\n<p>We then add data to the prop in the getStaticProp();</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">posts</span>: data.user.publication.posts,\n    },\n  }\n</code></pre>\n<blockquote>\n<p>You can just pass in <code>data</code>, but I have the long tree in the array, so I just used <code>data.user.publication.posts</code>, either way, you\'ll get the same results.</p>\n</blockquote>\n<p>With the server still running, let\'s have a quick look into the web console:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623757634247/Un8PZj6yV.png" alt="console data" /></p>\n<p>Hey! check out your terminal too:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623757843788/t35mreSly.png" alt="terminalData.png" /></p>\n<p>Updated full file:</p>\n<pre><code class="lang-javaScript"><span class="hljs-keyword">import</span> { ApolloClient, InMemoryCache, gql } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@apollo/client\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params">{ posts }</span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'POSTS\'</span>, posts)\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Hashnode Articles<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStaticProps</span>(<span class="hljs-params">context</span>) </span>{\n  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> ApolloClient({\n    <span class="hljs-attr">uri</span>: <span class="hljs-string">\'https://api.hashnode.com/\'</span>,\n    <span class="hljs-attr">cache</span>: <span class="hljs-keyword">new</span> InMemoryCache(),\n  })\n\n  <span class="hljs-keyword">const</span> { data } = <span class="hljs-keyword">await</span> client.query({\n    <span class="hljs-attr">query</span>: gql<span class="hljs-string">`\n      query GetPosts {\n        user(username: "chrisdevcode") {\n          publication {\n            posts(page: 0) {\n              _id\n              coverImage\n              slug\n              title\n              brief\n            }\n          }\n        }\n      }\n    `</span>,\n  })\n\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">posts</span>: data.user.publication.posts,\n    },\n  }\n}\n</code></pre>\n<p><a target="_blank" href="https://github.com/ChrisAchinga/hashnode-api/commit/ca90a152a296f2e31871fec5c6a6a05e202cdb6c">Follow along with commit</a></p>\n<h3 id="adding-data-to-a-webpage">Adding data to a webpage:</h3>\n<p>The final part:</p>\n<p>To display the posts from the API, we simply map through the data and display each post.</p>\n<pre><code class="lang-javaScript">{posts.map(<span class="hljs-function">(<span class="hljs-params">post</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="hljs-comment">// output here</span>\n  )\n})}\n</code></pre>\n<p>We will loop through the data and for every post we display the title and the link to the full post:</p>\n<pre><code class="lang-JavaScript">{posts.map(<span class="hljs-function">(<span class="hljs-params">post</span>) =&gt;</span> {\n        <span class="hljs-keyword">return</span> (\n          <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{post._id}</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{post.title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">{</span>`<span class="hljs-attr">https:</span>//<span class="hljs-attr">chrisdevcode.hashnode.dev</span>/${<span class="hljs-attr">post.slug</span>}`}&gt;</span>Read<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n        )\n})}\n</code></pre>\n<p>So the whole file:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">import</span> { ApolloClient, InMemoryCache, gql } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@apollo/client\'</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params">{ posts }</span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'POSTS\'</span>, posts)\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Hashnode Articles<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n\n      {posts.map((post) =&gt; {\n        return (\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{post._id}</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{post.title}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">{</span>`<span class="hljs-attr">https:</span>//<span class="hljs-attr">chrisdevcode.hashnode.dev</span>/${<span class="hljs-attr">post.slug</span>}`}&gt;</span>Read<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        )\n      })}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStaticProps</span>(<span class="hljs-params">context</span>) </span>{\n  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> ApolloClient({\n    <span class="hljs-attr">uri</span>: <span class="hljs-string">\'https://api.hashnode.com/\'</span>,\n    <span class="hljs-attr">cache</span>: <span class="hljs-keyword">new</span> InMemoryCache(),\n  })\n\n  <span class="hljs-keyword">const</span> { data } = <span class="hljs-keyword">await</span> client.query({\n    <span class="hljs-attr">query</span>: gql<span class="hljs-string">`\n      query GetPosts {\n        user(username: "chrisdevcode") {\n          publication {\n            posts(page: 0) {\n              _id\n              coverImage\n              slug\n              title\n              brief\n            }\n          }\n        }\n      }\n    `</span>,\n  })\n\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">posts</span>: data.user.publication.posts,\n    },\n  }\n}\n</code></pre>\n<p>Posts should now display on the webpage:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623771064478/ndX7koaq-.png" alt="final.png" /></p>\n<h2 id="all-in-one-shot">All in ONE-SHOT!</h2>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623834155451/f3v26cpKc0.png" alt="fetch in one-shot" /></p>\n<h2 id="conclusion">Conclusion</h2>\n<p>It is as simple at is, view demo and source code from the links below:</p>\n<p>https://github.com/ChrisAchinga/hashnode-api</p>\n<p>https://hashnode-api-self.vercel.app/</p>\n<blockquote>\n<p>Thanks to <a class="user-mention" href="https://hashnode.com/@colbyfayock">Colby Fayock</a> who wrote an article on <a target="_blank" href="https://www.freecodecamp.org/news/how-to-fetch-graphql-data-in-next-js-with-apollo-graphql/#what-is-apollo-graphql">using graphQL on NextJS</a>, and <a class="user-mention" href="https://hashnode.com/@Catalinpit">Catalin Pit</a> on <a target="_blank" href="https://catalins.tech/hashnode-api-how-to-display-your-blog-articles-on-your-portfolio-page">How on use hashnode API</a></p>\n</blockquote>\n',
      contentMarkdown:
        '@[Hashnode](@hashnode) is one of the first places to go to for tutorials, developer articles, and news. It is without a doubt that using its API is the coolest thing one can ever do.\n\n>If you haven\'t created an account with @[Hashnode](@hashnode), [don\'t hesitate to do so](https://hashnode.com/@chrisdevcode/joinme)\n\n# Demo and Source Code\n\nhttps://github.com/achingachris/hashnode-api\n\nhttps://hashnode-api-self.vercel.app/\n\n# Let\'s Code\n\nIn this article, I will take you through Displaying blog articles from [hashnode](https://hashnode.com/@chrisdevcode/joinme) on a Next JS website.\n\nTo do that, you will need to have the following checked:\n\n- Hashnode Account\n- NodeJS\n- Text Editor (visual studio code)\n\nI will be using [Apollo graphQL](https://www.apollographql.com/) to help querying data in NextJS\n\n## Hashnode API\n\nHashnode API used graphQL. It\'s pretty and fast in getting data. \n\n[Hashnode API Playground](https://api.hashnode.com/)\n\n![Hashnode API Playground Image](https://cdn.hashnode.com/res/hashnode/image/upload/v1623745369823/-0-Glxxo9.png)\n\nTo learn more about queries for fetching data can be found in the docs drawer on the right side of the browser:\n\n![Hashnode API docs](https://cdn.hashnode.com/res/hashnode/image/upload/v1623746032430/rCVXMI_K8.png)\n\nLet\'s test out some queries for getting your blog post publications:\n\n```query\n{\n  user(username: "chrisdevcode") {\n    publication {\n      posts(page: 0) {\n        _id\n        coverImage\n        slug\n        title\n        brief\n        dateAdded\n        dateUpdated\n      }\n    }\n  }\n}\n```\n\nChange the `chrisdevcode` to your hashnode username:\n\n```query\nuser(username: "hashnode_user_name")\n```\n\nNote that in the publication query object, we have to specify the page number, 0 is the page that loads first when someone visits your blog home, i.e it is where the most recent articles appear.\n\n```query\n publication {\n      posts(page: 0) {\n       //\n      }\n    }\n```\n\nBack to the playground, paste in the query and run it:\n\n```query\n{\n  user(username: "chrisdevcode") {\n    publication {\n      posts(page: 0) {\n        _id\n        coverImage\n        slug\n        title\n        brief\n        dateAdded\n        dateUpdated\n      }\n    }\n  }\n}\n```\n\n![apiView.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1623747006393/e11g7ir0G.png)\n\nThe data fetched :\n\n```JSON\n{\n  "data": {\n    "user": {\n      "publication": {\n        "posts": [\n          {\n            "_id": "60c313ef1e145957d5af691a",\n            "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1623247532659/tqLf2R120.png",\n            "slug": "using-markdown-in-hashnode-beginners-guide",\n            "title": "Using Markdown In Hashnode: Beginners Guide",\n            "brief": "Hashnode is by far my best Developer blogging platform. One of the things making me love it is the use of markdown in writing and editing articles. \\nIf you just created a Hashnode blog or thinking of creating one, then this is the best article for yo...",\n            "dateAdded": "2021-06-11T07:42:39.715Z",\n            "dateUpdated": null\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nAnd that\'s it, now let\'s do this on a Next website/app.\n\n## Next APP\n\n### Creating a next app:\n\nOpen your terminal/CMD and create a next app:\n\n```shell\nnpx create-next-app hashnode-api\n```\n\n**Installing Apollo and GraphQL**\n\n```shell\nnpm install @apollo/client graphql\n```\n\nTest the application:\n\n```shell\nnpm run dev\n```\n\nOpen your browser and go to http://localhost:3000/\n\n![Next Home Page](https://cdn.hashnode.com/res/hashnode/image/upload/v1623748670544/dNU8rf_Oh.png)\n\n>We will only edit one file for the purpose of demonstration i.e `index.js`\n\nOpen the index file i.e `pages/index.js` and clean the code into:\n\n```JavaScript\nexport default function Home() {\n  return (\n    <div>\n      <h1>My Hashnode Articles</h1>\n    </div>\n  )\n}\n```\n\n[Follow this commit](https://github.com/ChrisAchinga/hashnode-api/commit/f233c4983db4d752ee11777acf7d417659a61306)\n\n### Fetching Data\n\nI will be using third parties to fetch data from the hashnode API using graphQL.\n\nNextJS provides built-in data fetching methods, I will be using `getStaticProps`"\n\n```JavaScript\nexport async function getStaticProps(context) {\n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\n```\n\n%[https://nextjs.org/docs/basic-features/data-fetching]\n\nIn the current file, add the getStaticProps() at the bottom of the file:\n\n```JavaScript\nexport default function Home() {\n  return (\n    <div>\n      <h1>My Hashnode Articles</h1>\n    </div>\n  )\n}\n\nexport async function getStaticProps(context) {\n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\n```\nInside the getStaticProps function, we’re going to be ultimately returning our props to the page, in this case, we will be returning posts, so our props will be `posts`\n\n```JavaScript\nexport async function getStaticProps(context) {\n  return {\n    props: {\n      posts: []\n    }, \n  }\n}\n```\n\nWe will pass in `posts` as a prop to our page:\n\n```JavaScript\nexport default function Home({ posts }) {\n  return (\n    <div>\n      <h1>My Hashnode Articles</h1>\n    </div>\n  )\n}\n```\n\nWe can test our results by logging the prop in the console:\n\n```JavaScript\nconsole.log(\'POSTS\', posts)\n```\n\nOur File now:\n\n```JavaScript\nexport default function Home({ posts }) {\n  console.log(\'POSTS\', posts)\n  return (\n    <div>\n      <h1>My Hashnode Articles</h1>\n    </div>\n  )\n}\n\nexport async function getStaticProps(context) {\n  return {\n    props: {\n      posts: [],\n    },\n  }\n}\n\n```\n\nIf you open your web console, you should see this:\n\n![Using Props](https://cdn.hashnode.com/res/hashnode/image/upload/v1623751466788/RuVDsFWdc.png)\n\n[Follow along with commit](https://github.com/ChrisAchinga/hashnode-api/commit/444bfbbac09bbd5643442c933c1f7c5b76c990aa)\n\n### Fetching and Querying with GraphQL\n\nNow that everything is set up, we can comfortably get data from the hashnode API.\n\nFirst, we import the apollo client:\n\n```JavaScript\nimport { ApolloClient, InMemoryCache, gql } from \'@apollo/client\';\n```\n\nWe are importing Apollo client and InMemoryCache that optimizes apollo reading from cache and gql that will be used to create the GraphQL query.\n\nInside the top of the getStaticProps() function, let\'s create an instance of apollo with the Hashnode API endpoint:\n\n```JavaScript\n  const client = new ApolloClient({\n    uri: \'https://api.hashnode.com/\',\n    cache: new InMemoryCache(),\n  })\n```\n\nOur getStaticProps() function should now be like:\n\n```JavaScript\nexport async function getStaticProps(context) {\n  const client = new ApolloClient({\n    uri: \'https://api.hashnode.com/\',\n    cache: new InMemoryCache(),\n  })\n\n  return {\n    props: {\n      posts: [],\n    },\n  }\n}\n```\n\nNow let\'s make the query, the query syntax looks more like:\n\n```JavaScript\nconst { data } = await client.query({\n  query: gql`\n    query GetPosts {\n      // write query here\n    }\n  `,\n})\n```\n\nFrom the API playground, lets get the query:\n\n```JavaScript\nconst { data } = await client.query({\n    query: gql`\n      query GetPosts {\n        user(username: "chrisdevcode") {\n          publication {\n            posts(page: 0) {\n              _id\n              coverImage\n              slug\n              title\n              brief\n            }\n          }\n        }\n      }\n    `,\n  })\n```\n\nWe then add data to the prop in the getStaticProp();\n\n```JavaScript\nreturn {\n    props: {\n      posts: data.user.publication.posts,\n    },\n  }\n```\n\n>You can just pass in `data`, but I have the long tree in the array, so I just used `data.user.publication.posts`, either way, you\'ll get the same results.\n\nWith the server still running, let\'s have a quick look into the web console:\n\n![console data](https://cdn.hashnode.com/res/hashnode/image/upload/v1623757634247/Un8PZj6yV.png)\n\nHey! check out your terminal too:\n\n![terminalData.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1623757843788/t35mreSly.png)\n\nUpdated full file:\n\n```javaScript\nimport { ApolloClient, InMemoryCache, gql } from \'@apollo/client\';\n\nexport default function Home({ posts }) {\n  console.log(\'POSTS\', posts)\n  return (\n    <div>\n      <h1>My Hashnode Articles</h1>\n    </div>\n  )\n}\n\nexport async function getStaticProps(context) {\n  const client = new ApolloClient({\n    uri: \'https://api.hashnode.com/\',\n    cache: new InMemoryCache(),\n  })\n\n  const { data } = await client.query({\n    query: gql`\n      query GetPosts {\n        user(username: "chrisdevcode") {\n          publication {\n            posts(page: 0) {\n              _id\n              coverImage\n              slug\n              title\n              brief\n            }\n          }\n        }\n      }\n    `,\n  })\n\n  return {\n    props: {\n      posts: data.user.publication.posts,\n    },\n  }\n}\n```\n\n[Follow along with commit](https://github.com/ChrisAchinga/hashnode-api/commit/ca90a152a296f2e31871fec5c6a6a05e202cdb6c)\n\n### Adding data to a webpage:\n\nThe final part:\n\nTo display the posts from the API, we simply map through the data and display each post.\n\n```javaScript\n{posts.map((post) => {\n  return (\n    // output here\n  )\n})}\n```\n\nWe will loop through the data and for every post we display the title and the link to the full post:\n\n```JavaScript\n{posts.map((post) => {\n        return (\n          <div key={post._id}>\n            <h1>{post.title}</h1>\n            <a href={`https://chrisdevcode.hashnode.dev/${post.slug}`}>Read</a>\n          </div>\n        )\n})}\n```\n\nSo the whole file:\n\n```JavaScript\nimport { ApolloClient, InMemoryCache, gql } from \'@apollo/client\'\n\nexport default function Home({ posts }) {\n  console.log(\'POSTS\', posts)\n  return (\n    <div>\n      <h1>My Hashnode Articles</h1>\n\n      {posts.map((post) => {\n        return (\n          <div key={post._id}>\n            <h2>{post.title}</h2>\n            <a href={`https://chrisdevcode.hashnode.dev/${post.slug}`}>Read</a>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport async function getStaticProps(context) {\n  const client = new ApolloClient({\n    uri: \'https://api.hashnode.com/\',\n    cache: new InMemoryCache(),\n  })\n\n  const { data } = await client.query({\n    query: gql`\n      query GetPosts {\n        user(username: "chrisdevcode") {\n          publication {\n            posts(page: 0) {\n              _id\n              coverImage\n              slug\n              title\n              brief\n            }\n          }\n        }\n      }\n    `,\n  })\n\n  return {\n    props: {\n      posts: data.user.publication.posts,\n    },\n  }\n}\n```\n\nPosts should now display on the webpage:\n\n![final.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1623771064478/ndX7koaq-.png)\n\n## All in ONE-SHOT!\n\n![fetch in one-shot](https://cdn.hashnode.com/res/hashnode/image/upload/v1623834155451/f3v26cpKc0.png)\n\n## Conclusion\n\nIt is as simple at is, view demo and source code from the links below:\n\nhttps://github.com/ChrisAchinga/hashnode-api\n\nhttps://hashnode-api-self.vercel.app/\n\n>Thanks to @[Colby Fayock](@colbyfayock) who wrote an article on [using graphQL on NextJS](https://www.freecodecamp.org/news/how-to-fetch-graphql-data-in-next-js-with-apollo-graphql/#what-is-apollo-graphql), and @[Catalin Pit](@Catalinpit) on [How on use hashnode API](https://catalins.tech/hashnode-api-how-to-display-your-blog-articles-on-your-portfolio-page)\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f058ab0c9763d47e2d2eedc',
        '567ae5a72b926c3063c3061a',
        '56744723958ef13879b95245',
        '584879f0c0aaf085e2012086',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4775.7738,
      responses: [
        {
          popularity: 4789.5288,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60d4835d12f77505a833befb',
          content:
            '<p>Great I can see this being really useful for people good article <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a></p>\n',
          contentMarkdown:
            'Great I can see this being really useful for people good article @[Chris Achinga](@chrisdevcode)',
          author: '5f46a01aa639932bd830f982',
          stamp: 'ckqax64ah02u148s17m211h5c',
          post: '60c9be56e3f3df185f8c6218',
          replies: [],
          dateAdded: '2021-06-24T13:06:37.242Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4774.2404,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60ca03f2212fea1a6a2a6e7e',
          content:
            "<p>😍😍😍😍🔥....thanks for sharing <a target='_blank' rel='noopener noreferrer'  href=\"https://hashnode.com/@chrisdevcode\">Chris</a>. I will definitely need this in my portfolio</p>\n",
          contentMarkdown:
            '😍😍😍😍🔥....thanks for sharing [Chris](https://hashnode.com/@chrisdevcode). I will definitely need this in my portfolio',
          author: '601c66cf1054fa16dadd6a61',
          stamp: 'ckpzjkcap02sy7us15xc78z0f',
          post: '60c9be56e3f3df185f8c6218',
          replies: [],
          dateAdded: '2021-06-16T14:00:18.243Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4774.1132,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60c9ed94212fea1a6a2a6abb',
          content:
            '<p>Well explained article <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a>. Thanks for writing</p>\n',
          contentMarkdown:
            'Well explained article @[Chris Achinga](@chrisdevcode). Thanks for writing',
          author: '5f9571a140346172a86c2504',
          stamp: 'ckpzg5m7d01ji7us10zo4giak',
          post: '60c9be56e3f3df185f8c6218',
          replies: [],
          dateAdded: '2021-06-16T12:24:52.394Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4774.089,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60c9e956212fea1a6a2a6a15',
          content:
            '<p>Nice one, <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a>! This will be handy for people building their portfolios! 🔥</p>\n<p>Also, thank you for the mention! 🥳</p>\n',
          contentMarkdown:
            'Nice one, @[Chris Achinga](@chrisdevcode)! This will be handy for people building their portfolios! 🔥\n\nAlso, thank you for the mention! 🥳',
          author: '5f25a0c390ac4260edf355e4',
          stamp: 'ckpzficjm01bf7us120ji6d0m',
          post: '60c9be56e3f3df185f8c6218',
          replies: [],
          dateAdded: '2021-06-16T12:06:46.787Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 4,
      replyCount: 2,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
      ],
      totalReactions: 85,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: true,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60c9be56e3f3df185f8c6218',
      title: 'Using Hashnode API in a NextJS App',
      subtitle: 'How To Display your Hashnode Posts on a NextJS website',
      type: 'story',
      ogImage: '',
      metaTitle: 'Using Hashnode API in a NextJS App',
      metaDescription:
        'How To Display your Hashnode Posts on a NextJS website, and using graphQL in fetching data',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'using-hashnode-api-in-a-nextjs-app',
      importedFromMedium: false,
      dateAdded: '2021-06-16T09:03:18.680Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '60d4835d12f77505a833befc',
          user: '5f46a01aa639932bd830f982',
          stamp: 'ckqax64ah02u148s17m211h5c',
        },
        {
          _id: '60ca03f2212fea1a6a2a6e7f',
          user: '601c66cf1054fa16dadd6a61',
          stamp: 'ckpzjkcap02sy7us15xc78z0f',
        },
        {
          _id: '60c9ed94212fea1a6a2a6abc',
          user: '5f9571a140346172a86c2504',
          stamp: 'ckpzg5m7d01ji7us10zo4giak',
        },
        {
          _id: '60c9e956212fea1a6a2a6a16',
          user: '5f25a0c390ac4260edf355e4',
          stamp: 'ckpzficjm01bf7us120ji6d0m',
        },
      ],
      cuid: 'ckpz8yerg00estbs1apit218q',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 2,
      draft: '60c717ea1679ed6f51a28f5d',
      hasPinnedTag: false,
      readTime: 6,
      __v: 4,
      series: null,
      dateUpdated: '2021-07-13T15:48:17.055Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 15,
        reaction_5c090d96c2a9c2a674d3548b: 9,
        reaction_5d9dd859f31791c942dc5b52: 7,
        reaction_5c090d96c2a9c2a674d3548a: 6,
        reaction_5c090d96c2a9c2a674d35488: 7,
        reaction_567453d0b73d6a82ac8c5ab9: 8,
        reaction_567453d0b73d6a82ac8c5abc: 6,
        reaction_5c090d96c2a9c2a674d35486: 7,
        reaction_5c090d96c2a9c2a674d35485: 11,
        reaction_567453d0b73d6a82ac8c5abd: 9,
      },
      lastActivity: '2021-06-24T13:06:37.272Z',
      viewsUpdatedOn: 1671586261985,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 15,
        reaction_5c090d96c2a9c2a674d3548b: 9,
        reaction_5d9dd859f31791c942dc5b52: 7,
        reaction_5c090d96c2a9c2a674d3548a: 6,
        reaction_5c090d96c2a9c2a674d35488: 7,
        reaction_567453d0b73d6a82ac8c5ab9: 8,
        reaction_567453d0b73d6a82ac8c5abc: 6,
        reaction_5c090d96c2a9c2a674d35486: 7,
        reaction_5c090d96c2a9c2a674d35485: 11,
        reaction_567453d0b73d6a82ac8c5abd: 9,
      },
      id: '60c9be56e3f3df185f8c6218',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckps0vflt06z9cls17h758qrw',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckps0vflt06z9cls17h758qrw-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 1124,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1623247532659/tqLf2R120.png',
      autoGeneratedCover: '',
      brief:
        'Hashnode is by far my best Developer blogging platform. One of the things making me love it is the use of markdown in writing and editing articles. \nIf you just created a Hashnode blog or thinking of creating one, then this is the best article for yo...',
      content:
        '<p><a class="user-mention" href="https://hashnode.com/@hashnode">Hashnode</a> is by far my best Developer blogging platform. One of the things making me love it is the use of markdown in writing and editing articles. </p>\n<p>If you just created a <a class="user-mention" href="https://hashnode.com/@hashnode">Hashnode</a> blog or thinking of creating one, then this is the best article for you.</p>\n<p>In few words, I will demonstrate how you can use <strong>markdown</strong> to create your articles.</p>\n<p><a target="_blank" href="https://hashnode.com/@chrisdevcode/joinme">Join Hashnode</a></p>\n<hr />\n\n<h2 id="markdown-what-is-it">Markdown, what is it?  👀</h2>\n<p>Markdown is a very simple mark-up language using plain text. (very simple 😁😁)</p>\n<h2 id="cheat-sheet">Cheat Sheet?</h2>\n<h3 id="headings">Headings:</h3>\n<p>A heading usually starts with the "#" symbol</p>\n<p>MARKRDOWN:</p>\n<pre><code class="lang-markdown"><span class="hljs-section"># This is Heading 1  (largest text) </span>\n<span class="hljs-section">## This is Heading 2  </span>\n<span class="hljs-section">### This is Heading 3</span>\n<span class="hljs-section">#### This is Heading 4</span>\n<span class="hljs-section">##### This is Heading 5</span>\n<span class="hljs-section">###### This is Heading 6 (smallest text)</span>\n</code></pre>\n<p>PREVIEW:</p>\n<h1 id="this-is-heading-1-largest-text">This is Heading 1  (largest text)</h1>\n<h2 id="this-is-heading-2">This is Heading 2</h2>\n<h3 id="this-is-heading-3">This is Heading 3</h3>\n<h4 id="this-is-heading-4">This is Heading 4</h4>\n<h5 id="this-is-heading-5">This is Heading 5</h5>\n<h6 id="this-is-heading-6-smallest-text">This is Heading 6 (smallest text)</h6>\n<hr />\n\n<h3 id="paragraphs">Paragraphs:</h3>\n<p>To create a paragraph, use one or more lines of consecutive text followed by one or more blank lines. </p>\n<blockquote>\n<p>Note: If you don\'t leave a blank line between blocks of text, they will be collapsed into a single paragraph.</p>\n</blockquote>\n<p>MARKDOWN:</p>\n<pre><code class="lang-markdown">This is the paragraph about me\n\nAnother paragraph, just keep writing\n</code></pre>\n<p>PREVIEW:</p>\n<p>This is the paragraph about me</p>\n<p>Another paragraph, just keep writing</p>\n<blockquote>\n<p>Unless the paragraph is in a list, don’t indent paragraphs with spaces or tabs.</p>\n</blockquote>\n<hr />\n\n<h3 id="links">Links</h3>\n<p>To create a link, add the link text in brackets, i.e <code>[link text]</code> and the URL in parentheses <code>()</code></p>\n<p>MARKDOWN:</p>\n<pre><code class="lang-markdown">[<span class="hljs-string">Link Text</span>](<span class="hljs-link">https://enter-url.here/</span>)\n</code></pre>\n<p>PREVIEW:</p>\n<p><a target="_blank" href="https://enter-url.here/">Link Text</a></p>\n<blockquote>\n<p>No space in between <code>[]</code> and <code>()</code> : <code>[]()</code></p>\n</blockquote>\n<hr />\n\n<h3 id="images">Images</h3>\n<p>To add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title after the URL in the parentheses.</p>\n<p><strong>NOTE</strong>\nIn Hashnode the image URL is automatically added after image upload. (Using the camera icon on the edit page menu, top right) </p>\n<p>MARKDOWN:</p>\n<pre><code class="lang-markdown">![<span class="hljs-string">Code Snippet</span>](<span class="hljs-link">https://source.unsplash.com/random/800x600</span>)\n</code></pre>\n<p>PREVIEW:</p>\n<p><img src="https://source.unsplash.com/random/800x600" alt="Code Snippet" /></p>\n<hr />\n\n<h3 id="embedded-links">Embedded Links</h3>\n<p>An embedded link has its content appear as part of a post and supplies a visual element that encourages increased click-through and engagement.</p>\n<p>For example: (The CodePen below is embedded)</p>\n<pre><code class="lang-markdown">%[https://codepen.io/chrisachinga/pen/rNjMxKX]\n</code></pre>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://codepen.io/chrisachinga/pen/rNjMxKX">https://codepen.io/chrisachinga/pen/rNjMxKX</a></div>\n<p>The tweet is also an embedded link:</p>\n<pre><code class="lang-markdown">%[https://twitter.com/achinga<span class="hljs-emphasis">_chris/status/1400773052212944897]</span>\n</code></pre>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://twitter.com/achinga_chris/status/1400773052212944897">https://twitter.com/achinga_chris/status/1400773052212944897</a></div>\n<p>MARKDOWN:</p>\n<pre><code class="lang-markdown">%[link to embed]\n</code></pre>\n<p><a class="user-mention" href="https://hashnode.com/@hashnode">Hashnode</a> has enabled various links from a number of sites to be embedded.</p>\n<h3 id="formatting-your-text">Formatting Your Text</h3>\n<p>You can always format your text to bold, italics, or more using markdown. Hashnode has a ready-to-use toolbar for text formats on the edit page.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623391914540/EGrSMCqhZ.png" alt="Hashnode Tool bar" /></p>\n<p>For a <strong>bold</strong> text; Wrap the text with double asterisks ** to make it bold. </p>\n<pre><code class="lang-markdown"><span class="hljs-strong">**bold**</span>\n</code></pre>\n<p>For <em>italics</em> ; Wrap the text with a single asterisks character * to make it italics. </p>\n<pre><code class="lang-markdown"><span class="hljs-emphasis">*italics*</span>\n</code></pre>\n<h3 id="code-blocks">Code Blocks:</h3>\n<p>Showing/Displaying demo code is a really important part of a technical/tutorial article. Markdown allows you to do that for any language, all you have to do is wrap the code blocks with Tripple Grave accent keys <em>```</em></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623395613702/8gNQz5FX4.png" alt="Markdown Code Blocks" /></p>\n<pre><code>print(<span class="hljs-string">"Hello World"</span>)\n</code></pre><pre><code>console.log("Hello World")\n</code></pre><h4 id="syntax-highlitings">Syntax Highlitings:</h4>\n<p>To enable syntax highlighting in code blocks, all you have to do is add the language name after the first/top triple grave accent keys:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623396353398/ZF_Ap4Vep2.png" alt="Markdown code syntax" /></p>\n<pre><code class="lang-python">print(<span class="hljs-string">"Hello World"</span>)\n</code></pre>\n<pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Hello World"</span>)\n</code></pre>\n<h2 id="resources">Resources</h2>\n<h3 id="1-online-markdown-editor">1. Online Markdown Editor</h3>\n<ul>\n<li><p>StackEdit\n  Online editor for markdown that enables you to sync files with GitHub and Google Drive</p>\n<p>  https://stackedit.io/</p>\n</li>\n<li><p>Markdownsyntax\n One-stop site for all syntax in markdown and pretty great examples.</p>\n<p> https://www.markdownguide.org/</p>\n</li>\n</ul>\n<h2 id="conclusion">Conclusion</h2>\n<p>I haven\'t covered all there is to know in markdown, but this is pretty much it to get you started up in writing an awesome article.</p>\n<p><a target="_blank" href="https://hashnode.com/@chrisdevcode/joinme">Join Hashnode now and start sharing your knowledge!</a></p>\n',
      contentMarkdown:
        '@[Hashnode](@hashnode) is by far my best Developer blogging platform. One of the things making me love it is the use of markdown in writing and editing articles. \n\nIf you just created a @[Hashnode](@hashnode) blog or thinking of creating one, then this is the best article for you.\n\nIn few words, I will demonstrate how you can use **markdown** to create your articles.\n\n[Join Hashnode](https://hashnode.com/@chrisdevcode/joinme)\n\n<hr>\n\n## Markdown, what is it?  👀\n\nMarkdown is a very simple mark-up language using plain text. (very simple 😁😁)\n\n\n## Cheat Sheet? \n\n### Headings:\n\nA heading usually starts with the "#" symbol\n\nMARKRDOWN:\n\n```markdown\n# This is Heading 1  (largest text) \n## This is Heading 2  \n### This is Heading 3\n#### This is Heading 4\n##### This is Heading 5\n###### This is Heading 6 (smallest text)\n```\n\nPREVIEW:\n\n# This is Heading 1  (largest text) \n## This is Heading 2  \n### This is Heading 3\n#### This is Heading 4\n##### This is Heading 5\n###### This is Heading 6 (smallest text)\n\n<hr>\n\n### Paragraphs:\n\nTo create a paragraph, use one or more lines of consecutive text followed by one or more blank lines. \n\n>Note: If you don\'t leave a blank line between blocks of text, they will be collapsed into a single paragraph.\n\nMARKDOWN:\n\n```markdown\nThis is the paragraph about me\n\nAnother paragraph, just keep writing\n```\n\nPREVIEW:\n\nThis is the paragraph about me\n\nAnother paragraph, just keep writing\n\n>Unless the paragraph is in a list, don’t indent paragraphs with spaces or tabs.\n\n<hr>\n\n### Links\n\nTo create a link, add the link text in brackets, i.e `[link text]` and the URL in parentheses `()`\n\nMARKDOWN:\n\n```markdown\n[Link Text](https://enter-url.here/)\n```\n\nPREVIEW:\n\n[Link Text](https://enter-url.here/)\n\n>No space in between `[]` and `()` : `[]()`\n\n<hr>\n\n### Images\n\nTo add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title after the URL in the parentheses.\n\n**NOTE**\nIn Hashnode the image URL is automatically added after image upload. (Using the camera icon on the edit page menu, top right) \n\nMARKDOWN:\n\n```markdown\n![Code Snippet](https://source.unsplash.com/random/800x600)\n```\n\nPREVIEW:\n\n![Code Snippet](https://source.unsplash.com/random/800x600)\n\n<hr>\n\n### Embedded Links\n\nAn embedded link has its content appear as part of a post and supplies a visual element that encourages increased click-through and engagement.\n\nFor example: (The CodePen below is embedded)\n\n```markdown\n%[https://codepen.io/chrisachinga/pen/rNjMxKX]\n```\n\n%[https://codepen.io/chrisachinga/pen/rNjMxKX]\n\nThe tweet is also an embedded link:\n\n```markdown\n%[https://twitter.com/achinga_chris/status/1400773052212944897]\n```\n\n%[https://twitter.com/achinga_chris/status/1400773052212944897]\n\nMARKDOWN:\n\n```markdown\n%[link to embed]\n```\n\n@[Hashnode](@hashnode) has enabled various links from a number of sites to be embedded.\n\n### Formatting Your Text\n\nYou can always format your text to bold, italics, or more using markdown. Hashnode has a ready-to-use toolbar for text formats on the edit page.\n\n![Hashnode Tool bar](https://cdn.hashnode.com/res/hashnode/image/upload/v1623391914540/EGrSMCqhZ.png)\n\nFor a **bold** text; Wrap the text with double asterisks ** to make it bold. \n\n```markdown\n**bold**\n```\n\nFor *italics* ; Wrap the text with a single asterisks character * to make it italics. \n\n```markdown\n*italics*\n```\n\n### Code Blocks:\n\nShowing/Displaying demo code is a really important part of a technical/tutorial article. Markdown allows you to do that for any language, all you have to do is wrap the code blocks with Tripple Grave accent keys *```*\n\n![Markdown Code Blocks](https://cdn.hashnode.com/res/hashnode/image/upload/v1623395613702/8gNQz5FX4.png)\n\n```\nprint("Hello World")\n```\n\n```\nconsole.log("Hello World")\n```\n\n#### Syntax Highlitings:\n\nTo enable syntax highlighting in code blocks, all you have to do is add the language name after the first/top triple grave accent keys:\n\n![Markdown code syntax](https://cdn.hashnode.com/res/hashnode/image/upload/v1623396353398/ZF_Ap4Vep2.png)\n\n```python\nprint("Hello World")\n```\n\n```javascript\nconsole.log("Hello World")\n```\n\n## Resources\n\n### 1. Online Markdown Editor\n\n- StackEdit\n    Online editor for markdown that enables you to sync files with GitHub and Google Drive\n\n    https://stackedit.io/\n\n- Markdownsyntax\n   One-stop site for all syntax in markdown and pretty great examples.\n\n   https://www.markdownguide.org/\n\n## Conclusion \n\nI haven\'t covered all there is to know in markdown, but this is pretty much it to get you started up in writing an awesome article.\n\n[Join Hashnode now and start sharing your knowledge!](https://hashnode.com/@chrisdevcode/joinme)\n\n\n\n\n\n\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f058ab0c9763d47e2d2eedc',
        '56744722958ef13879b950b2',
        '567ae5a72b926c3063c3061a',
        '56fe3b2e7a82968f9f7d51c1',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4765.6809,
      responses: [
        {
          popularity: 5808.7822,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '639060ff68aae0e23a91e325',
          content: '<p>efsffwefwewefwfwefww</p>\n',
          contentMarkdown: 'efsffwefwewefwfwefww',
          author: '6378ed3fd93bb495e1ee2626',
          stamp: 'clbdguap2006w12nv6zm35n6t',
          post: '60c313ef1e145957d5af691a',
          replies: [],
          dateAdded: '2022-12-07T09:46:39.399Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 5292.6907,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '622e01c9df08b9b823419116',
          content:
            '<p>How to wrap the code, so that it comes automatically in a new line and a person does not have to scroll right to see it.</p>\n',
          contentMarkdown:
            'How to wrap the code, so that it comes automatically in a new line and a person does not have to scroll right to see it.',
          author: '61dbb2a3b0c3ca3df9b47633',
          stamp: 'cl0pdsuxw061b2onvfgosdotp',
          post: '60c313ef1e145957d5af691a',
          replies: [],
          dateAdded: '2022-03-13T14:38:01.893Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 5144.3935,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '61c82ded1de80a7fb227ed37',
          content:
            '<p>Nice article ! I have one question, How to resize images and make it to centre (Change the alignment)</p>\n',
          contentMarkdown:
            'Nice article ! I have one question, How to resize images and make it to centre (Change the alignment)',
          author: '61c19933c4195d32e16a6950',
          stamp: 'ckxn0nbpx053c82s13u4i3n5l',
          post: '60c313ef1e145957d5af691a',
          replies: [],
          dateAdded: '2021-12-26T08:55:09.334Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 5110.8153,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '61b11f7f6a81cf6b31dfb313',
          content:
            '<p>Helpful article for us newbies. \nThe student in me is quite used to paragraph indentation, oh well...\nThanks.</p>\n',
          contentMarkdown:
            'Helpful article for us newbies. \nThe student in me is quite used to paragraph indentation, oh well...\nThanks.',
          author: '61819113a4505a32bcf1d702',
          stamp: 'ckwy10w6p00jp69s14kwe8pvs',
          post: '60c313ef1e145957d5af691a',
          replies: [],
          dateAdded: '2021-12-08T21:11:27.987Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 5098.5181,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '61a8ade21e28ee7efba8c687',
          content:
            '<p>I think it is amazing and it has been really really helpful. 🥳</p>\n',
          contentMarkdown:
            'I think it is amazing and it has been really really helpful. 🥳',
          author: '61924945fd4e554b5f3e8328',
          stamp: 'ckwovk63705nt2zs17mv5anc5',
          post: '60c313ef1e145957d5af691a',
          replies: [],
          dateAdded: '2021-12-02T11:28:34.004Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4766.616,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60c4c7b61679ed6f51a26e5f',
          content:
            '<p>This guide is incredible. I&#39;ve been using hashnode for over a month now and I didn&#39;t know some of these</p>\n<p>Thanks for sharing</p>\n',
          contentMarkdown:
            "This guide is incredible. I've been using hashnode for over a month now and I didn't know some of these\n\nThanks for sharing",
          author: '60823b34fea38e52a9c5948e',
          stamp: 'ckptvaio8009mzls11rpd9f3n',
          post: '60c313ef1e145957d5af691a',
          replies: [],
          dateAdded: '2021-06-12T14:41:58.282Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4764.4207,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60c345d51e145957d5af6e4a',
          content:
            '<p>Thanks for writing this insightful piece about Hashnode, <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a>. It will definitely be useful to anyone new to Hashnode. 😃</p>\n',
          contentMarkdown:
            'Thanks for writing this insightful piece about Hashnode, @[Chris Achinga](@chrisdevcode). It will definitely be useful to anyone new to Hashnode. 😃',
          author: '5e5e9c1f8c89a92316ce8b66',
          stamp: 'ckps8h85308nmcls113sgdi8o',
          post: '60c313ef1e145957d5af691a',
          replies: [],
          dateAdded: '2021-06-11T11:15:33.880Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 7,
      replyCount: 2,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 35,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60c313ef1e145957d5af691a',
      title: 'Using Markdown In Hashnode: Beginners Guide',
      subtitle:
        'Create amazing Hashnode blog articles using this awesome Markdown syntax',
      type: 'story',
      ogImage: '',
      metaTitle: 'Using Markdown in hashnode',
      metaDescription:
        'Create amazing Hashnode blog articles using this awesome Markdown syntax',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'using-markdown-in-hashnode-beginners-guide',
      importedFromMedium: false,
      dateAdded: '2021-06-11T07:42:39.715Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '639060ff68aae0e23a91e326',
          user: '6378ed3fd93bb495e1ee2626',
          stamp: 'clbdguap2006w12nv6zm35n6t',
        },
        {
          _id: '622e01c9df08b9b823419117',
          user: '61dbb2a3b0c3ca3df9b47633',
          stamp: 'cl0pdsuxw061b2onvfgosdotp',
        },
        {
          _id: '61c82ded1de80a7fb227ed38',
          user: '61c19933c4195d32e16a6950',
          stamp: 'ckxn0nbpx053c82s13u4i3n5l',
        },
        {
          _id: '61b11f806a81cf6b31dfb314',
          user: '61819113a4505a32bcf1d702',
          stamp: 'ckwy10w6p00jp69s14kwe8pvs',
        },
        {
          _id: '61a8ade21e28ee7efba8c688',
          user: '61924945fd4e554b5f3e8328',
          stamp: 'ckwovk63705nt2zs17mv5anc5',
        },
        {
          _id: '60c4c7b61679ed6f51a26e60',
          user: '60823b34fea38e52a9c5948e',
          stamp: 'ckptvaio8009mzls11rpd9f3n',
        },
        {
          _id: '60c345d51e145957d5af6e4b',
          user: '5e5e9c1f8c89a92316ce8b66',
          stamp: 'ckps8h85308nmcls113sgdi8o',
        },
      ],
      cuid: 'ckps0vflt06z9cls17h758qrw',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60c0c785d2660e41762e3f70',
      hasPinnedTag: false,
      readTime: 3,
      __v: 7,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 4,
        reaction_5c090d96c2a9c2a674d35485: 7,
        reaction_5c090d96c2a9c2a674d35486: 3,
        reaction_567453d0b73d6a82ac8c5abd: 3,
        reaction_5c090d96c2a9c2a674d3548a: 3,
        reaction_5d9dd859f31791c942dc5b52: 3,
        reaction_5c090d96c2a9c2a674d35488: 3,
        reaction_567453d0b73d6a82ac8c5ab9: 3,
        reaction_5c090d96c2a9c2a674d3548b: 3,
        reaction_567453d0b73d6a82ac8c5abc: 3,
      },
      lastActivity: '2022-12-07T09:46:39.407Z',
      viewsUpdatedOn: 1671876060298,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 4,
        reaction_5c090d96c2a9c2a674d35485: 7,
        reaction_5c090d96c2a9c2a674d35486: 3,
        reaction_567453d0b73d6a82ac8c5abd: 3,
        reaction_5c090d96c2a9c2a674d3548a: 3,
        reaction_5d9dd859f31791c942dc5b52: 3,
        reaction_5c090d96c2a9c2a674d35488: 3,
        reaction_567453d0b73d6a82ac8c5ab9: 3,
        reaction_5c090d96c2a9c2a674d3548b: 3,
        reaction_567453d0b73d6a82ac8c5abc: 3,
      },
      id: '60c313ef1e145957d5af691a',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckpl0cv6y0hjew9s1g6jyfbbt',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckpl0cv6y0hjew9s1g6jyfbbt-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 299,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1622973013297/1Tp2yQtTp.png',
      autoGeneratedCover: '',
      brief:
        "Learning never ends, especially for developers. That is why we have a lot of people who have sacrificed a lot to create great content for the developers' ecosystem.\nIn as much as most content can be gotten for free, we should be aware of vague conten...",
      content:
        '<p>Learning never ends, especially for developers. That is why we have a lot of people who have sacrificed a lot to create great content for the developers\' ecosystem.</p>\n<p>In as much as most content can be gotten for free, we should be aware of vague content and/or resources that will make you think twice about your career.</p>\n<p>I have made a list of 10 developer channels that I highly recommend if you\'d love to learn and keep yourself updated. </p>\n<blockquote>\n<p>Not that this list does not favor any channel or sponsored to appear here by any chance. These are purely educational and motivational content and not the "Daily Life of a Software engineer" kinda gigs.</p>\n</blockquote>\n<h1 id="youtube-channels">YouTube Channels</h1>\n<h2 id="1-traversy-media">1. Traversy Media</h2>\n<p>The Channel is managed by <a target="_blank" href="https://twitter.com/traversymedia">Traversy Media</a>. Any content on web development is available and with demo source codes. I would recommend this channel to anyone, especially beginners.</p>\n<p>Additional motivational content is published in the channel too, so don\'t worry about mental exhaustion.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA">https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA</a></div>\n<h2 id="2-freecodecamporg">2. freeCodeCamp.org</h2>\n<p>You can find literally anything on programming on this channel, and it is great content created by developers of all niches.  <a target="_blank" href="https://www.freecodecamp.org/">freecodecamp</a></p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ">https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ</a></div>\n<h2 id="3-dennis-ivy">3. Dennis Ivy</h2>\n<p>The channel by <a target="_blank" href="https://twitter.com/dennisivy11">Dennis Ivy</a> who creates web development content. He shares Django and JavaScript content regularly and recently started coding on live stream, which is really awesome and fun!</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/channel/UCTZRcDjjkVajGL6wd76UnGg">https://www.youtube.com/channel/UCTZRcDjjkVajGL6wd76UnGg</a></div>\n<h2 id="4-dthompsondev">4. DThompsonDev</h2>\n<p><a target="_blank" href="https://twitter.com/DThompsonDev">Danny Thompson</a> has the best motivational content fro, developers, especially when you are from a different profession and moving into software dev, he is your guy, he also has a very touching story.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/c/DThompsonDev/videos">https://www.youtube.com/c/DThompsonDev/videos</a></div>\n<h2 id="5-catalins-tech">5. Catalin\'s Tech</h2>\n<p><a class="user-mention" href="https://hashnode.com/@Catalinpit">Catalin Pit</a> has a great YouTube channel with as good content as his  <a target="_blank" href="https://catalins.tech/">blog articles</a>. He has great tutorials in web development that\'d recommend anyone to follow along.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/channel/UCl1IRCSmm74qhcFNPTHcbMg">https://www.youtube.com/channel/UCl1IRCSmm74qhcFNPTHcbMg</a></div>\n<h2 id="6-web-dev-simplified">6. Web Dev Simplified</h2>\n<blockquote>\n<p>These videos will teach you HTML, CSS, and JavaScript through a beginner-friendly band website project</p>\n</blockquote>\n<p>For unlimited web dev tutorials, this is the channel.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw">https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw</a></div>\n<h2 id="7-ayushi-rawat">7. Ayushi Rawat</h2>\n<p>A channel by <a class="user-mention" href="https://hashnode.com/@AyushRawat">Ayush Rawat</a> who also writes very amazing articles on <a class="user-mention" href="https://hashnode.com/@hasdnode">hashnode</a>.</p>\n<p>She creates very useful content in Python and developer tools, with weekly video updates.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/channel/UCvmONGrUQxL3B3PmSv1JQqQ">https://www.youtube.com/channel/UCvmONGrUQxL3B3PmSv1JQqQ</a></div>\n<h2 id="8-codingentrepreneurs">8. CodingEntrepreneurs</h2>\n<p>The channel has a lot f Python Django tutorials and web development techniques.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/user/CodingEntrepreneurs">https://www.youtube.com/user/CodingEntrepreneurs</a></div>\n<h2 id="9-francesco-ciulla">9. Francesco Ciulla</h2>\n<p>This is where you get cool coding live sessions and tutorials on using developer tools and languages/frameworks</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/channel/UCBRxDSTfr2aJVODDh4WG_7g">https://www.youtube.com/channel/UCBRxDSTfr2aJVODDh4WG_7g</a></div>\n<h2 id="10-codemycom">10. Codemy.com</h2>\n<p>I found this channel when I was learning Django, and I was never disappointed at all. It has great project playlists from scratch to deployment.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/channel/UCFB0dxMudkws1q8w5NJEAmw">https://www.youtube.com/channel/UCFB0dxMudkws1q8w5NJEAmw</a></div>\n<h2 id="conclussion">Conclussion</h2>\n<p>Feel free to search for resources for your tech stack, don\'t let anything limit you, but try as much as possible to avoid biased content.</p>\n<p>https://linktr.ee/chrisdev</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622973039228/NJ71e4A1S.png" alt="chrisdev - logo (2).png" /></p>\n',
      contentMarkdown:
        "Learning never ends, especially for developers. That is why we have a lot of people who have sacrificed a lot to create great content for the developers' ecosystem.\n\nIn as much as most content can be gotten for free, we should be aware of vague content and/or resources that will make you think twice about your career.\n\nI have made a list of 10 developer channels that I highly recommend if you'd love to learn and keep yourself updated. \n\n>Not that this list does not favor any channel or sponsored to appear here by any chance. These are purely educational and motivational content and not the \"Daily Life of a Software engineer\" kinda gigs.\n\n# YouTube Channels\n\n## 1. Traversy Media\n\nThe Channel is managed by [Traversy Media](https://twitter.com/traversymedia). Any content on web development is available and with demo source codes. I would recommend this channel to anyone, especially beginners.\n\nAdditional motivational content is published in the channel too, so don't worry about mental exhaustion.\n\n%[https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA]\n\n\n## 2. freeCodeCamp.org\n\nYou can find literally anything on programming on this channel, and it is great content created by developers of all niches.  [freecodecamp](https://www.freecodecamp.org/)\n\n%[https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ]\n\n## 3. Dennis Ivy\n\nThe channel by [Dennis Ivy](https://twitter.com/dennisivy11) who creates web development content. He shares Django and JavaScript content regularly and recently started coding on live stream, which is really awesome and fun!\n\n%[https://www.youtube.com/channel/UCTZRcDjjkVajGL6wd76UnGg]\n\n## 4. DThompsonDev\n\n[Danny Thompson](https://twitter.com/DThompsonDev) has the best motivational content fro, developers, especially when you are from a different profession and moving into software dev, he is your guy, he also has a very touching story.\n\n%[https://www.youtube.com/c/DThompsonDev/videos]\n\n## 5. Catalin's Tech\n\n@[Catalin Pit](@Catalinpit) has a great YouTube channel with as good content as his  [blog articles](https://catalins.tech/). He has great tutorials in web development that'd recommend anyone to follow along.\n\n%[https://www.youtube.com/channel/UCl1IRCSmm74qhcFNPTHcbMg]\n\n##  6. Web Dev Simplified\n\n>These videos will teach you HTML, CSS, and JavaScript through a beginner-friendly band website project\n\nFor unlimited web dev tutorials, this is the channel.\n\n%[https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw]\n\n## 7. Ayushi Rawat\n\nA channel by @[Ayush Rawat](@AyushRawat) who also writes very amazing articles on @[hashnode](@hasdnode).\n\nShe creates very useful content in Python and developer tools, with weekly video updates.\n\n%[https://www.youtube.com/channel/UCvmONGrUQxL3B3PmSv1JQqQ]\n\n## 8. CodingEntrepreneurs\n\nThe channel has a lot f Python Django tutorials and web development techniques.\n\n%[https://www.youtube.com/user/CodingEntrepreneurs]\n\n## 9. Francesco Ciulla\n\nThis is where you get cool coding live sessions and tutorials on using developer tools and languages/frameworks\n\n%[https://www.youtube.com/channel/UCBRxDSTfr2aJVODDh4WG_7g]\n\n## 10. Codemy.com\n\nI found this channel when I was learning Django, and I was never disappointed at all. It has great project playlists from scratch to deployment.\n\n%[https://www.youtube.com/channel/UCFB0dxMudkws1q8w5NJEAmw]\n\n## Conclussion\n\nFeel free to search for resources for your tech stack, don't let anything limit you, but try as much as possible to avoid biased content.\n\nhttps://linktr.ee/chrisdev\n\n![chrisdev - logo (2).png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622973039228/NJ71e4A1S.png)\n\n\n\n\n\n\n\n\n\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56ced112f0ec33085f1cc5ab',
        '56744721958ef13879b94c7e',
        '56744720958ef13879b947ce',
        '56744721958ef13879b94dcc',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4756.1097,
      responses: [
        {
          popularity: 4756.335,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60bdb881e36d51141c95d6b8',
          content: '<p>Thank you Chris, Highly appreciated!</p>\n',
          contentMarkdown: 'Thank you Chris, Highly appreciated!',
          author: '5f3c07009584ef298dc16f62',
          stamp: 'ckpm7ufj60q90z0s15bkf56a1',
          post: '60bc9b2efffc4c13b9cd75f3',
          replies: [],
          dateAdded: '2021-06-07T06:11:13.316Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4756.3218,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60bdb632fffc4c13b9cd88d7',
          content:
            '<p>Thank you a lot! I appreciate it, <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a>! ❤️</p>\n',
          contentMarkdown:
            'Thank you a lot! I appreciate it, @[Chris Achinga](@chrisdevcode)! ❤️',
          author: '5f25a0c390ac4260edf355e4',
          stamp: 'ckpm7hrv50qurw9s1epwm44d2',
          post: '60bc9b2efffc4c13b9cd75f3',
          replies: [],
          dateAdded: '2021-06-07T06:01:22.770Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 2,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 25,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60bc9b2efffc4c13b9cd75f3',
      title: '10 Developer YouTube Channels You Should Visit',
      subtitle: 'Learn from top developers channels on YouTube',
      type: 'story',
      metaTitle: '10 Developer YouTube Channels You Should Visit',
      metaDescription:
        'Learn programming from top developers channels on YouTube',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: '10-developer-youtube-channels-you-should-visit',
      pollOptions: [],
      dateAdded: '2021-06-06T09:53:50.237Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '60bdb881e36d51141c95d6b9',
          user: '5f3c07009584ef298dc16f62',
          stamp: 'ckpm7ufj60q90z0s15bkf56a1',
        },
        {
          _id: '60bdb632fffc4c13b9cd88d8',
          user: '5f25a0c390ac4260edf355e4',
          stamp: 'ckpm7hrv50qurw9s1epwm44d2',
        },
      ],
      cuid: 'ckpl0cv6y0hjew9s1g6jyfbbt',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60bc84d0e36d51141c95c2c1',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 3,
      __v: 2,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d3548a: 3,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5d9dd859f31791c942dc5b52: 3,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
      },
      lastActivity: '2021-06-07T06:11:13.346Z',
      viewsUpdatedOn: 1671759062179,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d3548a: 3,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5d9dd859f31791c942dc5b52: 3,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
      },
      id: '60bc9b2efffc4c13b9cd75f3',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckpi7wyx5010u61s12p0028ji',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckpi7wyx5010u61s12p0028ji-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 373,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1622799499694/cFYmyGmkk.png',
      autoGeneratedCover: '',
      brief:
        "Postman is an API testing platform. You can use postman web platform:\n\n or the desktop application for testing your APIs.\n\nPostman can be used to test all API requests: get/put/create/delete\nIf you are new to postman, I'd suggest you go through their...",
      content:
        '<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622463589180/QaqgkCfga.png" alt="Postman logo" /></p>\n<p><a target="_blank" href="https://www.postman.com/">Postman</a> is an API testing platform. You can use postman <a target="_blank" href="https://web.postman.co/build">web platform</a>:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622463645610/oxFQl2rDU.png" alt="postman web" /></p>\n<p> or the <a target="_blank" href="https://www.postman.com/downloads/">desktop application</a> for testing your APIs.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622463676467/hszDpAI4f.png" alt="desktopostman.png" /></p>\n<p>Postman can be used to test all API requests: <code>get/put/create/delete</code></p>\n<p>If you are new to postman, I\'d suggest you go through their Bootcamp: <a target="_blank" href="https://web.postman.co/bootcamp">https://web.postman.co/bootcamp</a></p>\n<blockquote>\n<p>I will be using the desktop application for the demos, they\'re no big differences from using the web version of postman.</p>\n</blockquote>\n<h1 id="what-this-article-covers">What this article covers:</h1>\n<ol>\n<li>Creating collections</li>\n<li>Adding requests</li>\n<li>Creating environments and Variables</li>\n</ol>\n<h2 id="creating-collections">Creating Collections:</h2>\n<p>In Postman, collections are folders where you put all APIs with similar descriptions or projects together. It is a pretty neat way to organize your APIs for testing.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.postman.com/collection/">https://www.postman.com/collection/</a></div>\n<p>Follow the few steps to create an API collection:</p>\n<ol>\n<li>Ensure that you are on the <code>collections</code> tab by clicking on the <code>Collections</code> with a folder icon on the top left side menu.</li>\n</ol>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622464771808/_Efr8gzTk.png" alt="Postman Collections" /></p>\n<p>On the right of the <code>Collections</code> notice the "+" icon and on hovering it, a pop up with the message:\n"Create new Collection" appears.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622464906540/ZxN90RsCe.png" alt="Create new collection - postman" /></p>\n<ol>\n<li>Click the "+" icon to create a new collection. Notice a new folder is created <code>New Collection</code> and a new tab opened simultaneously.</li>\n</ol>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622465231380/AwDf6ycFG.png" alt="created collection" /></p>\n<p>Right-click on the folder and select <code>rename</code> to give the collection a name of your choosing or double click on the <code>new collection</code> name on the tab to rename.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622465384147/nMOojo_40N.png" alt="double-click.png" /></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622465402038/8fL-PSCHc.png" alt="right-click.png" /></p>\n<p>PSST! I will rename mine to <code>Demo</code></p>\n<h2 id="adding-requests-to-a-collection">Adding requests to a Collection:</h2>\n<p>On hovering over the collection name on the left panel. notice the 3-horizontal-dots, click on it to open a quick menu.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622466300790/DJHEL20g0.png" alt="Add a new request" /></p>\n<p>Select <code>Add request</code> and notice a new tab opens:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622466869349/-5-l30skZ.png" alt="new-request.png" /></p>\n<p>Let\'s add an API endpoint and make a request:</p>\n<pre><code><span class="hljs-attribute">https</span>:<span class="hljs-comment">//jsonplaceholder.typicode.com/users</span>\n</code></pre><p>Paste the URL in the input label with a placeholder text "Enter request URL", ensure the method on the left is set to "GET" and hit \'Send\' to make a request.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622800108793/lGCAHqKBM.png" alt="Making  a request" /></p>\n<p>The response:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622801475491/j2iuBHqZG.png" alt="response.png" /></p>\n<h2 id="creating-environments-and-variables">Creating environments and Variables</h2>\n<p>An environment in postman is just a collection of variables to be used in a request or a collection</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://learning.postman.com/docs/sending-requests/managing-environments/">https://learning.postman.com/docs/sending-requests/managing-environments/</a></div>\n<p>The selected environment status is at the top-right of Postman, the default is "<em>No environment</em>".</p>\n<p>Here is how we create a new environment and add our variables:</p>\n<p>On the left side of the postman web/app, click on the <code>Environment</code>.</p>\n<p>Click on the "+" icon to create a new environment, then give it a name.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622802190419/iPKwrFEvI.png" alt="new-env.png" /></p>\n<p>To create  a variable, manually fill the details on the environment tab:</p>\n<p>I will create a variable for the base URL of the API endpoint:  <code>https://jsonplaceholder.typicode.com/</code></p>\n<pre><code class="lang-txt">VARIABLE: url\nINITIAL VALUE: https://jsonplaceholder.typicode.com/\nCURRENT VALUE: https://jsonplaceholder.typicode.com/\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622802642399/QTmA7D6M1.png" alt="variable" /></p>\n<p>To use the variable, go to the request tab and replace the <code>https://jsonplaceholder.typicode.com/</code> with   <code>{{url}}</code></p>\n<p>Then on the top-right, select an environment (select the one you just created from the Dropdown).</p>\n<p>After that, make the request to see if everything went well:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622803896299/NKEFT5StG.png" alt="env-var.png" /></p>\n<p>That is it, to view the demo use:</p>\n<p><a target="_blank" href="https://app.getpostman.com/run-collection/9711024-0af1bf1e-8e28-43f1-9e96-d7aa7c17d895?action=collection%2Ffork&amp;collection-url=entityId%3D9711024-0af1bf1e-8e28-43f1-9e96-d7aa7c17d895%26entityType%3Dcollection%26workspaceId%3D26c4f6b7-8da3-4522-98d6-b7066cd76325#?env%5BDemo%5D=W3sia2V5IjoidXJsIiwidmFsdWUiOiJodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vIiwiZW5hYmxlZCI6dHJ1ZX1d"><img src="https://run.pstmn.io/button.svg" alt="Run in Postman" /></a></p>\n<h2 id="note">NOTE</h2>\n<p>There are many ways to create a variable, environment or collections in Postman, I just highlighted the common ones. Feel free to hover on the postman docs to learn and practice more: </p>\n<p>https://learning.postman.com/docs/getting-started/introduction/</p>\n<p><a target="_blank" href="https://linktr.ee/chrisdev">MY BIO</a></p>\n',
      contentMarkdown:
        '![Postman logo](https://cdn.hashnode.com/res/hashnode/image/upload/v1622463589180/QaqgkCfga.png)\n\n[Postman](https://www.postman.com/) is an API testing platform. You can use postman [web platform](https://web.postman.co/build):\n\n![postman web](https://cdn.hashnode.com/res/hashnode/image/upload/v1622463645610/oxFQl2rDU.png)\n\n or the [desktop application](https://www.postman.com/downloads/) for testing your APIs.\n\n![desktopostman.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622463676467/hszDpAI4f.png)\n\nPostman can be used to test all API requests: `get/put/create/delete`\n\nIf you are new to postman, I\'d suggest you go through their Bootcamp: [https://web.postman.co/bootcamp](https://web.postman.co/bootcamp)\n\n>I will be using the desktop application for the demos, they\'re no big differences from using the web version of postman.\n\n# What this article covers:\n\n1. Creating collections\n2. Adding requests\n3. Creating environments and Variables\n\n## Creating Collections:\n\nIn Postman, collections are folders where you put all APIs with similar descriptions or projects together. It is a pretty neat way to organize your APIs for testing.\n\n%[https://www.postman.com/collection/]\n\nFollow the few steps to create an API collection:\n\n1. Ensure that you are on the `collections` tab by clicking on the `Collections` with a folder icon on the top left side menu.\n\n![Postman Collections](https://cdn.hashnode.com/res/hashnode/image/upload/v1622464771808/_Efr8gzTk.png)\n\nOn the right of the `Collections` notice the "+" icon and on hovering it, a pop up with the message:\n"Create new Collection" appears.\n\n![Create new collection - postman](https://cdn.hashnode.com/res/hashnode/image/upload/v1622464906540/ZxN90RsCe.png)\n\n2. Click the "+" icon to create a new collection. Notice a new folder is created `New Collection` and a new tab opened simultaneously.\n\n![created collection](https://cdn.hashnode.com/res/hashnode/image/upload/v1622465231380/AwDf6ycFG.png)\n\nRight-click on the folder and select `rename` to give the collection a name of your choosing or double click on the `new collection` name on the tab to rename.\n\n![double-click.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622465384147/nMOojo_40N.png)\n\n![right-click.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622465402038/8fL-PSCHc.png)\n\nPSST! I will rename mine to `Demo`\n\n## Adding requests to a Collection:\n\nOn hovering over the collection name on the left panel. notice the 3-horizontal-dots, click on it to open a quick menu.\n\n![Add a new request](https://cdn.hashnode.com/res/hashnode/image/upload/v1622466300790/DJHEL20g0.png)\n\nSelect `Add request` and notice a new tab opens:\n\n![new-request.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622466869349/-5-l30skZ.png)\n\nLet\'s add an API endpoint and make a request:\n\n```\nhttps://jsonplaceholder.typicode.com/users\n```\n\nPaste the URL in the input label with a placeholder text "Enter request URL", ensure the method on the left is set to "GET" and hit \'Send\' to make a request.\n\n![Making  a request](https://cdn.hashnode.com/res/hashnode/image/upload/v1622800108793/lGCAHqKBM.png)\n\nThe response:\n\n![response.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622801475491/j2iuBHqZG.png)\n\n## Creating environments and Variables\n\nAn environment in postman is just a collection of variables to be used in a request or a collection\n\n%[https://learning.postman.com/docs/sending-requests/managing-environments/]\n\nThe selected environment status is at the top-right of Postman, the default is "*No environment*".\n\nHere is how we create a new environment and add our variables:\n\nOn the left side of the postman web/app, click on the `Environment`.\n\nClick on the "+" icon to create a new environment, then give it a name.\n\n![new-env.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622802190419/iPKwrFEvI.png)\n\nTo create  a variable, manually fill the details on the environment tab:\n\nI will create a variable for the base URL of the API endpoint:  `https://jsonplaceholder.typicode.com/`\n\n```txt\nVARIABLE: url\nINITIAL VALUE: https://jsonplaceholder.typicode.com/\nCURRENT VALUE: https://jsonplaceholder.typicode.com/\n```\n\n![variable](https://cdn.hashnode.com/res/hashnode/image/upload/v1622802642399/QTmA7D6M1.png)\n\nTo use the variable, go to the request tab and replace the `https://jsonplaceholder.typicode.com/` with   `{{url}}`\n\nThen on the top-right, select an environment (select the one you just created from the Dropdown).\n\nAfter that, make the request to see if everything went well:\n\n![env-var.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622803896299/NKEFT5StG.png)\n\nThat is it, to view the demo use:\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/9711024-0af1bf1e-8e28-43f1-9e96-d7aa7c17d895?action=collection%2Ffork&collection-url=entityId%3D9711024-0af1bf1e-8e28-43f1-9e96-d7aa7c17d895%26entityType%3Dcollection%26workspaceId%3D26c4f6b7-8da3-4522-98d6-b7066cd76325#?env%5BDemo%5D=W3sia2V5IjoidXJsIiwidmFsdWUiOiJodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vIiwiZW5hYmxlZCI6dHJ1ZX1d)\n\n## NOTE\n\nThere are many ways to create a variable, environment or collections in Postman, I just highlighted the common ones. Feel free to hover on the postman docs to learn and practice more: \n\nhttps://learning.postman.com/docs/getting-started/introduction/\n\n[MY BIO](https://linktr.ee/chrisdev)\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f058ab0c9763d47e2d2eedc',
        '56744723958ef13879b95245',
        '56744723958ef13879b9549b',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4750.9628,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 10,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60ba082ea24c670af94c2159',
      title: 'Using Postman Like a Pro!',
      subtitle: '',
      type: 'story',
      ogImage: '',
      metaTitle: 'How to customize your API tests in POSTMAN',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'using-postman-like-a-pro',
      importedFromMedium: false,
      dateAdded: '2021-06-04T11:02:06.962Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckpi7wyx5010u61s12p0028ji',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60b4d30322ce215158055270',
      hasPinnedTag: false,
      readTime: 3,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      viewsUpdatedOn: 1671760862343,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      id: '60ba082ea24c670af94c2159',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckp8copu002uc04s13o8w9cap',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckp8copu002uc04s13o8w9cap-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 3831,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1622207766329/imoF6DzN-.png',
      autoGeneratedCover: '',
      brief:
        "This is a hands-on code tutorial on how to fetch data using plain JavaScript and Displaying data on a simple HTML web page.\nWhen creating websites, there is a possibility that you'll be getting data from an API. The data is in JSON, in most cases.\n\nH...",
      content:
        '<p>This is a hands-on code tutorial on how to fetch data using plain JavaScript and Displaying data on a simple HTML web page.</p>\n<p>When creating websites, there is a possibility that you\'ll be getting data from an API. The data is in JSON, in most cases.</p>\n<blockquote>\n<p>How do I display the JSON is my HTML page using vanilla JS?</p>\n</blockquote>\n<p>Let\'s do that in a few steps.</p>\n<p>JS has a built-in function called <code>.fetch()</code> that is used to \'fetch\' data from external files or resources.</p>\n<p>Let\'s work on a simple project:</p>\n<p>We\'ll fetch country names and their abbreviations from a JSON file and list them on an HTML page.</p>\n<p><a target="_blank" href="https://chrisachinga.github.io/fetch-api-demo/">LIVE DEMO</a></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622202333384/9BBjBCSHw.png" alt="country_complete.png" /></p>\n<p>Start by creating a simple HTML file: <code>index.html</code></p>\n<pre><code class="lang-HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON-JS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>countries: a long list<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"country"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<p>I added the empty div <code>&lt;div id=\'country&gt;&lt;/div&gt;</code> because we will use it to pass the list of countries from the JSON file. <a target="_blank" href="https://github.com/ChrisAchinga/fetch-api-demo/blob/dev/countries.json">countries.json</a></p>\n<p>On line 29, i used <code>&lt;script src="script.js"&gt;&lt;/script&gt;</code> to import the javascript file that we will use to get the data.</p>\n<p>On the same folder/directory where you created the <code>index.html</code> file, create a new file <code>script.js</code></p>\n<p>on the js file, create an empty function and then call it at the end of the file:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{\n\n}\n\nfetchData()\n</code></pre>\n<p>in the fetchData() function, we will add the code that fetches data from the JSON file and then create a list on the HTML.</p>\n<p>fetch has a simple syntax:</p>\n<pre><code class="lang-JavaScript">fetch().then().then().catch()\n</code></pre>\n<p>in simple terms:</p>\n<p>The first part: <code>fetch()</code>, takes in the URL or path to the resource\nthe following <code>.then()</code> blocks, are promises that return the response in the desired format and the other one to display the result or do anything with the result.\n<code>.catch()</code> takes in the code that runs when something is wrong.</p>\n<p><strong>Download the <a target="_blank" href="https://github.com/ChrisAchinga/fetch-api-demo/blob/dev/countries.json">countries JSON file</a> and add it in the same folder as the index and script files.</strong></p>\n<p>Lets, add the path to our data file:</p>\n<pre><code class="lang-JavaScript">fetch(<span class="hljs-string">\'countries.json\'</span>)\n</code></pre>\n<p>Your current js file should now contain:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{\n    fetch(<span class="hljs-string">\'countries.json\'</span>)\n}\n\nfetchData()\n</code></pre>\n<p>Now let\'s get our response and make it be in json format:</p>\n<pre><code class="lang-JavaScript">.then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.json())\n</code></pre>\n<p>fetch() returns a promise with a response: "res", which we then convert into JSON format</p>\n<p>Your current js file should now contain:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{\n    fetch(<span class="hljs-string">\'countries.json\'</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.json())\n}\n\nfetchData()\n</code></pre>\n<p>We now display our data.\nwe can test for success using the console,</p>\n<pre><code class="lang-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{\n    fetch(<span class="hljs-string">\'countries.json\'</span>)\n    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.json())\n    .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(data)\n    })\n}\n\nfetchData()\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622204387769/ZKOF4a99U.png" alt="Console Shots" /></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622204415009/yCgUHcY6n.png" alt="console" /></p>\n<p>As you can see on the screenshots, data is shown in an array of data.</p>\n<p>Finally, let\'s add an error handler in the <code>.catch()</code></p>\n<pre><code class="lang-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{\n    fetch(<span class="hljs-string">\'countries.json\'</span>)\n    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.json())\n    .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(data)\n    })\n    .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Error Fetching data : <span class="hljs-subst">${error}</span>`</span>)\n      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'country\'</span>).innerHTML = <span class="hljs-string">\'Error Loading Data\'</span>\n    })\n}\n\nfetchData()\n</code></pre>\n<h2 id="displaying-data-on-the-html-page">Displaying data on the HTML page</h2>\n<p>We do this from js using the DOM, we access the part of the website: <code>&lt;div id="country"&gt;&lt;/div&gt;</code> .</p>\n<p>First update your script file to:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{\n    fetch(<span class="hljs-string">\'countries.json\'</span>)\n    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.json())\n    .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(data)\n        <span class="hljs-keyword">let</span> output = <span class="hljs-string">\'&lt;h2 class="mb-4"&gt;Countries&lt;/h2&gt;\'</span>\n        data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{\n        output += <span class="hljs-string">`\n        &lt;ul class="list-group mb-3"&gt;\n          &lt;li class="list-group-item"&gt;Country: <span class="hljs-subst">${item.Country}</span>&lt;/li&gt;\n          &lt;li class="list-group-item"&gt;CODE: <span class="hljs-subst">${item.ISO2}</span>&lt;/li&gt;\n        &lt;/ul&gt;\n      `</span>\n    })\n    .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Error Fetching data : <span class="hljs-subst">${error}</span>`</span>)\n      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'country\'</span>).innerHTML = <span class="hljs-string">\'Error Loading Data\'</span>\n    })\n}\n\nfetchData()\n</code></pre>\n<p>Explanation:</p>\n<p>We added</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">let</span> output = <span class="hljs-string">\'&lt;h2"&gt;Countries&lt;/h2&gt;\'</span>\n  data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{\n  output += <span class="hljs-string">`\n  &lt;ul class="list-group mb-3"&gt;\n    &lt;li class="list-group-item"&gt;Country: <span class="hljs-subst">${item.Country}</span>&lt;/li&gt;\n    &lt;li class="list-group-item"&gt;CODE: <span class="hljs-subst">${item.ISO2}</span>&lt;/li&gt;\n  &lt;/ul&gt;\n  `</span>}\n</code></pre>\n<p>First I created the heading and assigned it to the variable \'output\'</p>\n<pre><code class="lang-JavaScript"><span class="hljs-keyword">let</span> output = <span class="hljs-string">\'&lt;h2"&gt;Countries&lt;/h2&gt;\'</span>\n</code></pre>\n<p>Since the data we get is in an array, we use <code>forEach()</code> to loop through the data and display each item.</p>\n<p><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach() docs</a></p>\n<pre><code class="lang-JavaScript">data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{\n  <span class="hljs-comment">// display data here</span>\n  }\n</code></pre>\n<p>The above code will go through the whole array of data returned.</p>\n<pre><code class="lang-JavaScript">output += <span class="hljs-string">`\n  &lt;ul class="list-group mb-3"&gt;\n    &lt;li class="list-group-item"&gt;Country: <span class="hljs-subst">${item.Country}</span>&lt;/li&gt;\n    &lt;li class="list-group-item"&gt;CODE: <span class="hljs-subst">${item.ISO2}</span>&lt;/li&gt;\n  &lt;/ul&gt;\n  `</span>\n</code></pre>\n<p>In the above code, the code takes each item from the array and puts it into a list.</p>\n<p>I use the template literals (<code>string_here</code>) because it allows the use of variables and also we can add HTML tags to it. we access <code>${item.Country}</code> and <code>${item.ISO2}</code> which are returned by the data we fetched.</p>\n<p><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">template literals documentatin</a></p>\n<p>Finally we display the data:</p>\n<pre><code class="lang-JavaScript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'country\'</span>).innerHTML = output\n</code></pre>\n<p>The above line of code grabs the div with the id of \'country\' and using the <code>.innerHTML</code> we parse in the variable <code>output</code> where we created the list from data fetched.</p>\n<pre><code class="lang-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{\n    fetch(<span class="hljs-string">\'countries.json\'</span>)\n    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.json())\n    .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(data)\n      <span class="hljs-keyword">let</span> output = <span class="hljs-string">\'&lt;h2"&gt;Countries&lt;/h2&gt;\'</span>\n      data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{\n        output += <span class="hljs-string">`\n        &lt;ul&gt;\n          &lt;li&gt;Country: <span class="hljs-subst">${item.Country}</span>&lt;/li&gt;\n          &lt;li&gt;CODE: <span class="hljs-subst">${item.ISO2}</span>&lt;/li&gt;\n        &lt;/ul&gt;\n      `</span>\n      })\n      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'country\'</span>).innerHTML = output\n    })\n    .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Error Fetching data : <span class="hljs-subst">${error}</span>`</span>)\n      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'country\'</span>).innerHTML = <span class="hljs-string">\'Error Loading Data\'</span>\n    })\n}\n\nfetchData()\n</code></pre>\n<p>Now you can view the page with the list of countries:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1622204685031/6fxbNPhGx.png" alt="country_complete.png" /></p>\n<h3 id="complete-html">Complete HTML</h3>\n<pre><code class="lang-HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON-JS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>countries: a long list<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"country"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<h3 id="complete-javascript">Complete JavaScript</h3>\n<pre><code class="lang-JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchData</span>(<span class="hljs-params"></span>) </span>{\n  fetch(<span class="hljs-string">\'countries.json\'</span>)\n    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.json())\n    .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(data)\n      <span class="hljs-keyword">let</span> output = <span class="hljs-string">\'&lt;h2"&gt;Countries&lt;/h2&gt;\'</span>\n      data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{\n        output += <span class="hljs-string">`\n        &lt;ul&gt;\n          &lt;li&gt;Country: <span class="hljs-subst">${item.Country}</span>&lt;/li&gt;\n          &lt;li&gt;CODE: <span class="hljs-subst">${item.ISO2}</span>&lt;/li&gt;\n        &lt;/ul&gt;\n      `</span>\n      })\n      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'country\'</span>).innerHTML = output\n    })\n    .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Error Fetching data : <span class="hljs-subst">${error}</span>`</span>)\n      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'country\'</span>).innerHTML = <span class="hljs-string">\'Error Loading Data\'</span>\n    })\n}\n\nfetchData()\n</code></pre>\n<p>Source code for the demo:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://github.com/ChrisAchinga/fetch-api-demo">https://github.com/ChrisAchinga/fetch-api-demo</a></div>\n<p><a target="_blank" href="https://chrisachinga.github.io/fetch-api-demo/">LIVE DEMO</a></p>\n<h2 id="resources">Resources:</h2>\n<h3 id="intro-to-the-dom">Intro to the DOM</h3>\n<p>https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction</p>\n<hr />\n\n<h3 id="accessing-the-dom">Accessing the dom</h3>\n<p>https://www.digitalocean.com/community/tutorials/how-to-access-elements-in-the-dom</p>\n<hr />\n\n<h3 id="intro-to-fetch-youtube">Intro to fetch (youtube)</h3>\n<p>https://www.youtube.com/watch?v=Oive66jrwBs&amp;t=1229s</p>\n<hr />\n\n<h3 id="fetch-api">Fetch API</h3>\n<p>https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</p>\n<h2 id="intro-to-fetch">Intro to fetch</h2>\n<p>https://developers.google.com/web/updates/2015/03/introduction-to-fetch</p>\n<p>https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</p>\n',
      contentMarkdown:
        "\nThis is a hands-on code tutorial on how to fetch data using plain JavaScript and Displaying data on a simple HTML web page.\n\nWhen creating websites, there is a possibility that you'll be getting data from an API. The data is in JSON, in most cases.\n\n> How do I display the JSON is my HTML page using vanilla JS?\n\nLet's do that in a few steps.\n\nJS has a built-in function called `.fetch()` that is used to 'fetch' data from external files or resources.\n\nLet's work on a simple project:\n\nWe'll fetch country names and their abbreviations from a JSON file and list them on an HTML page.\n\n[LIVE DEMO](https://chrisachinga.github.io/fetch-api-demo/)\n\n![country_complete.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622202333384/9BBjBCSHw.png)\n\nStart by creating a simple HTML file: `index.html`\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>JSON-JS</title>\n  </head>\n  <body>\n    <h1>countries: a long list</h1>\n    <div id=\"country\"></div>\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\nI added the empty div `<div id='country></div>` because we will use it to pass the list of countries from the JSON file. [countries.json](https://github.com/ChrisAchinga/fetch-api-demo/blob/dev/countries.json)\n\nOn line 29, i used `<script src=\"script.js\"></script>` to import the javascript file that we will use to get the data.\n\nOn the same folder/directory where you created the `index.html` file, create a new file `script.js`\n\non the js file, create an empty function and then call it at the end of the file:\n\n```JavaScript\nfunction fetchData() {\n\n}\n\nfetchData()\n```\n\nin the fetchData() function, we will add the code that fetches data from the JSON file and then create a list on the HTML.\n\nfetch has a simple syntax:\n\n```JavaScript\nfetch().then().then().catch()\n```\n\nin simple terms:\n\nThe first part: `fetch()`, takes in the URL or path to the resource\nthe following `.then()` blocks, are promises that return the response in the desired format and the other one to display the result or do anything with the result.\n`.catch()` takes in the code that runs when something is wrong.\n\n**Download the [countries JSON file](https://github.com/ChrisAchinga/fetch-api-demo/blob/dev/countries.json) and add it in the same folder as the index and script files.**\n\nLets, add the path to our data file:\n\n```JavaScript\nfetch('countries.json')\n```\n\nYour current js file should now contain:\n\n```JavaScript\nfunction fetchData() {\n    fetch('countries.json')\n}\n\nfetchData()\n```\n\nNow let's get our response and make it be in json format:\n\n```JavaScript\n.then((res) => res.json())\n```\n\nfetch() returns a promise with a response: \"res\", which we then convert into JSON format\n\nYour current js file should now contain:\n\n```JavaScript\nfunction fetchData() {\n    fetch('countries.json').then((res) => res.json())\n}\n\nfetchData()\n```\n\nWe now display our data.\nwe can test for success using the console,\n\n```JavaScript\nfunction fetchData() {\n    fetch('countries.json')\n    .then((res) => res.json())\n    .then((data) => {\n        console.log(data)\n    })\n}\n\nfetchData()\n```\n\n![Console Shots](https://cdn.hashnode.com/res/hashnode/image/upload/v1622204387769/ZKOF4a99U.png)\n\n![console](https://cdn.hashnode.com/res/hashnode/image/upload/v1622204415009/yCgUHcY6n.png)\n\n\nAs you can see on the screenshots, data is shown in an array of data.\n\nFinally, let's add an error handler in the `.catch()`\n\n```JavaScript\nfunction fetchData() {\n    fetch('countries.json')\n    .then((res) => res.json())\n    .then((data) => {\n        console.log(data)\n    })\n    .catch((error) => {\n      console.log(`Error Fetching data : ${error}`)\n      document.getElementById('country').innerHTML = 'Error Loading Data'\n    })\n}\n\nfetchData()\n```\n\n## Displaying data on the HTML page\n\nWe do this from js using the DOM, we access the part of the website: `<div id=\"country\"></div>` .\n\nFirst update your script file to:\n\n```JavaScript\nfunction fetchData() {\n    fetch('countries.json')\n    .then((res) => res.json())\n    .then((data) => {\n        console.log(data)\n        let output = '<h2 class=\"mb-4\">Countries</h2>'\n        data.forEach(function (item) {\n        output += `\n        <ul class=\"list-group mb-3\">\n          <li class=\"list-group-item\">Country: ${item.Country}</li>\n          <li class=\"list-group-item\">CODE: ${item.ISO2}</li>\n        </ul>\n      `\n    })\n    .catch((error) => {\n      console.log(`Error Fetching data : ${error}`)\n      document.getElementById('country').innerHTML = 'Error Loading Data'\n    })\n}\n\nfetchData()\n```\n\nExplanation:\n\nWe added\n\n```JavaScript\nlet output = '<h2\">Countries</h2>'\n  data.forEach(function (item) {\n  output += `\n  <ul class=\"list-group mb-3\">\n    <li class=\"list-group-item\">Country: ${item.Country}</li>\n    <li class=\"list-group-item\">CODE: ${item.ISO2}</li>\n  </ul>\n  `}\n```\n\nFirst I created the heading and assigned it to the variable 'output'\n\n```JavaScript\nlet output = '<h2\">Countries</h2>'\n```\n\nSince the data we get is in an array, we use `forEach()` to loop through the data and display each item.\n\n[forEach() docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\n```JavaScript\ndata.forEach(function (item) {\n  // display data here\n  }\n```\n\nThe above code will go through the whole array of data returned.\n\n```JavaScript\noutput += `\n  <ul class=\"list-group mb-3\">\n    <li class=\"list-group-item\">Country: ${item.Country}</li>\n    <li class=\"list-group-item\">CODE: ${item.ISO2}</li>\n  </ul>\n  `\n```\n\nIn the above code, the code takes each item from the array and puts it into a list.\n\nI use the template literals (`string_here`) because it allows the use of variables and also we can add HTML tags to it. we access `${item.Country}` and `${item.ISO2}` which are returned by the data we fetched.\n\n[template literals documentatin](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nFinally we display the data:\n\n```JavaScript\ndocument.getElementById('country').innerHTML = output\n```\n\nThe above line of code grabs the div with the id of 'country' and using the `.innerHTML` we parse in the variable `output` where we created the list from data fetched.\n\n```JavaScript\nfunction fetchData() {\n    fetch('countries.json')\n    .then((res) => res.json())\n    .then((data) => {\n      console.log(data)\n      let output = '<h2\">Countries</h2>'\n      data.forEach(function (item) {\n        output += `\n        <ul>\n          <li>Country: ${item.Country}</li>\n          <li>CODE: ${item.ISO2}</li>\n        </ul>\n      `\n      })\n      document.getElementById('country').innerHTML = output\n    })\n    .catch((error) => {\n      console.log(`Error Fetching data : ${error}`)\n      document.getElementById('country').innerHTML = 'Error Loading Data'\n    })\n}\n\nfetchData()\n```\n\nNow you can view the page with the list of countries:\n\n\n![country_complete.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622204685031/6fxbNPhGx.png)\n\n\n### Complete HTML\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>JSON-JS</title>\n  </head>\n  <body>\n    <h1>countries: a long list</h1>\n    <div id=\"country\"></div>\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\n### Complete JavaScript\n\n```JavaScript\nfunction fetchData() {\n  fetch('countries.json')\n    .then((res) => res.json())\n    .then((data) => {\n      console.log(data)\n      let output = '<h2\">Countries</h2>'\n      data.forEach(function (item) {\n        output += `\n        <ul>\n          <li>Country: ${item.Country}</li>\n          <li>CODE: ${item.ISO2}</li>\n        </ul>\n      `\n      })\n      document.getElementById('country').innerHTML = output\n    })\n    .catch((error) => {\n      console.log(`Error Fetching data : ${error}`)\n      document.getElementById('country').innerHTML = 'Error Loading Data'\n    })\n}\n\nfetchData()\n```\n\nSource code for the demo:\n\n%[https://github.com/ChrisAchinga/fetch-api-demo]\n\n[LIVE DEMO](https://chrisachinga.github.io/fetch-api-demo/)\n\n## Resources:\n\n### Intro to the DOM\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\n\n<hr />\n\n### Accessing the dom\n\nhttps://www.digitalocean.com/community/tutorials/how-to-access-elements-in-the-dom\n\n<hr />\n\n### Intro to fetch (youtube)\n\nhttps://www.youtube.com/watch?v=Oive66jrwBs&t=1229s\n<hr />\n\n### Fetch API\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n\n## Intro to fetch\n\nhttps://developers.google.com/web/updates/2015/03/introduction-to-fetch\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94cad',
        '56744723958ef13879b95245',
        '5758618112a8cb07bb8426d2',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4738.704,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 10,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: true,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60b0ed86fb51fd32a4dbe8b7',
      title:
        'How To Display JSON data on an HTML page using Vanilla JavaScript',
      subtitle: 'Using JavaScript to display data on an HTML page',
      type: 'story',
      ogImage: '',
      metaTitle: 'Display Data using Vanila JS',
      metaDescription:
        'How To Display JSON data on an HTML page using plain JavaScript',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-to-display-json-data-on-an-html-page-using-vanilla-javascript',
      importedFromMedium: false,
      dateAdded: '2021-05-28T13:17:58.229Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckp8copu002uc04s13o8w9cap',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60a2368923723215ec2fee7c',
      hasPinnedTag: false,
      readTime: 5,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 3,
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
      },
      viewsUpdatedOn: 1671850859785,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 3,
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
      },
      id: '60b0ed86fb51fd32a4dbe8b7',
    },
    {
      audioUrls: {
        male: 'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cki1u90je01jukus12bpraivl-male',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cki1u90je01jukus12bpraivl-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 2342,
      slugOverridden: true,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1621953722862/AM7JSCoIY.png',
      autoGeneratedCover: '',
      brief:
        'GitHub offers more than just a host for your code. In this short tutorial, I will walk you through deploying a static react app/project on  GitHub Pages.\nI will be using one of my React projects from GitHub:\nhttps://github.com/achingachris/myRepos\n\nA...',
      content:
        '<p>GitHub offers more than just a host for your code. In this short tutorial, I will walk you through deploying a static react app/project on  <a target="_blank" href="https://pages.github.com/">GitHub Pages</a>.</p>\n<p>I will be using one of my React projects from GitHub:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://github.com/achingachris/myRepos">https://github.com/achingachris/myRepos</a></div>\n<blockquote>\n<p>A programmer\'s learning tool is by practicing     --I said that...</p>\n</blockquote>\n<p>Let\'s Get Started:</p>\n<p><strong>This tutorial assumes you already have your react project setup and ready to deploy</strong></p>\n<h2 id="heading-step-1-install-the-dependencies-gh-pages">Step 1: Install the Dependencies (gh-pages):</h2>\n<p>I use npm for my projects, so while in your project root directory, open the project on your terminal or cmd (windows).</p>\n<h3 id="heading-install-the-gh-pages-package-as-a-dev-dependency-of-the-app">Install the <em>gh-pages</em> package as a dev-dependency of the app</h3>\n<pre><code class="lang-shell">npm install gh-pages --save-dev\n</code></pre>\n<h2 id="heading-step-2-define-homepage-in-packagejson">Step 2: Define Homepage in package.json</h2>\n<p>In the <code>package.json</code> file in your react app and add homepage property using the given syntax:</p>\n<pre><code class="lang-shell">http://{username}.github.io/{repo-name}\n</code></pre>\n<p>Where {username} is your GitHub username, and {repo-name} is the name of the GitHub repository. Below is an example for my project:</p>\n<pre><code class="lang-JSON"><span class="hljs-string">"homepage"</span>: <span class="hljs-string">"http://achingachris.github.io/myRepos"</span>,\n</code></pre>\n<pre><code class="lang-JSON">{\n  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"myrepos"</span>,\n  <span class="hljs-attr">"homepage"</span>: <span class="hljs-string">"http://achingachris.github.io/myRepos"</span>,\n  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"0.1.0"</span>,\n  <span class="hljs-attr">"private"</span>: <span class="hljs-literal">true</span>,\n}\n</code></pre>\n<h2 id="heading-step-3-deploy-script-in-packagejson-file">Step 3: Deploy script in <code>package.json</code> file</h2>\n<p>Now we can add the deploy script in the package.json file. In the existing scripts property, add a predeploy property and a deploy property, each having the values shown below:</p>\n<pre><code class="lang-JSON"><span class="hljs-string">"scripts"</span>: {\n  <span class="hljs-comment">// some code before</span>\n  <span class="hljs-attr">"predeploy"</span>: <span class="hljs-string">"npm run build"</span>,\n  <span class="hljs-attr">"deploy"</span>: <span class="hljs-string">"gh-pages -d build"</span>\n}\n</code></pre>\n<p>So your "scripts" should look like this:</p>\n<pre><code class="lang-JSON">{\n  <span class="hljs-attr">"scripts"</span>: {\n    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"react-scripts start"</span>,\n    <span class="hljs-attr">"predeploy"</span>: <span class="hljs-string">"npm run build"</span>,\n    <span class="hljs-attr">"deploy"</span>: <span class="hljs-string">"gh-pages -d build"</span>,\n    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"react-scripts build"</span>,\n    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"react-scripts test"</span>,\n    <span class="hljs-attr">"eject"</span>: <span class="hljs-string">"react-scripts eject"</span>\n  },\n}\n</code></pre>\n<h2 id="heading-step-4-deploy-your-app">Step 4: Deploy Your App</h2>\n<p>Update your GitHub repository using git commands:</p>\n<pre><code class="lang-shell">npm run deploy\n</code></pre>\n<h2 id="heading-step-5-commit-and-push-to-github">Step 5: Commit and Push to GitHub</h2>\n<p>On your project terminal, run the deploy script</p>\n<pre><code class="lang-shell">git add .\ngit commit -m "gh-pages deploy"\ngit push\n</code></pre>\n<p>Kudos your React app is ready for view... on  the URL: </p>\n<pre><code class="lang-txt">https://{github-user-name}.github.io/{repo-name}/\n</code></pre>\n<p>https://achingachris.github.io/myRepos/</p>\n<p><a target="_blank" href="https://achingachris.github.io/myRepos/">Deployment Preview</a></p>\n<h3 id="heading-resources-for-github-pages">Resources For GitHub Pages</h3>\n<ul>\n<li>https://pages.github.com/</li>\n</ul>\n',
      contentMarkdown:
        'GitHub offers more than just a host for your code. In this short tutorial, I will walk you through deploying a static react app/project on  [GitHub Pages](https://pages.github.com/).\n\nI will be using one of my React projects from GitHub:\n\n%[https://github.com/achingachris/myRepos]\n\n>A programmer\'s learning tool is by practicing     --I said that...\n\nLet\'s Get Started:\n\n**This tutorial assumes you already have your react project setup and ready to deploy**\n\n## Step 1: Install the Dependencies (gh-pages):\n\nI use npm for my projects, so while in your project root directory, open the project on your terminal or cmd (windows).\n\n### Install the *gh-pages* package as a dev-dependency of the app\n\n```shell\nnpm install gh-pages --save-dev\n```\n\n## Step 2: Define Homepage in package.json\n\nIn the `package.json` file in your react app and add homepage property using the given syntax:\n\n```shell\nhttp://{username}.github.io/{repo-name}\n```\n\nWhere {username} is your GitHub username, and {repo-name} is the name of the GitHub repository. Below is an example for my project:\n\n```JSON\n"homepage": "http://achingachris.github.io/myRepos",\n```\n\n```JSON\n{\n  "name": "myrepos",\n  "homepage": "http://achingachris.github.io/myRepos",\n  "version": "0.1.0",\n  "private": true,\n}\n```\n\n## Step 3: Deploy script in `package.json` file\n\nNow we can add the deploy script in the package.json file. In the existing scripts property, add a predeploy property and a deploy property, each having the values shown below:\n\n```JSON\n"scripts": {\n  // some code before\n  "predeploy": "npm run build",\n  "deploy": "gh-pages -d build"\n}\n```\n\nSo your "scripts" should look like this:\n\n```JSON\n{\n  "scripts": {\n    "start": "react-scripts start",\n    "predeploy": "npm run build",\n    "deploy": "gh-pages -d build",\n    "build": "react-scripts build",\n    "test": "react-scripts test",\n    "eject": "react-scripts eject"\n  },\n}\n```\n\n## Step 4: Deploy Your App\nUpdate your GitHub repository using git commands:\n\n```shell\nnpm run deploy\n```\n\n## Step 5: Commit and Push to GitHub\n\nOn your project terminal, run the deploy script\n\n```shell\ngit add .\ngit commit -m "gh-pages deploy"\ngit push\n```\n\nKudos your React app is ready for view... on  the URL: \n\n```txt\nhttps://{github-user-name}.github.io/{repo-name}/\n```\n\nhttps://achingachris.github.io/myRepos/\n\n[Deployment Preview](https://achingachris.github.io/myRepos/)\n\n### Resources For GitHub Pages\n\n- https://pages.github.com/\n\n\n\n\n\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95434',
        '56744721958ef13879b94c63',
        '56744721958ef13879b94dad',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4733.9933,
      responses: [
        {
          popularity: 4391.4672,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '5fc32f992d08fb6949961999',
          content:
            '<p>Wow. Very useful tutorial for getting started with React app in github pages.</p>\n',
          contentMarkdown:
            'Wow. Very useful tutorial for getting started with React app in github pages.',
          author: '5fbfa5321a95c63e9c0f46b4',
          stamp: 'cki2od90401fisps19gj15a0k',
          post: '5fc269fe55b779631e1acfed',
          replies: [],
          dateAdded: '2020-11-29T05:20:25.301Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d35486',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 85,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fc269fe55b779631e1acfed',
      title: 'Deploying A React app on GitHub Pages',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'github-pages-with-react',
      pollOptions: [],
      dateAdded: '2021-05-25T14:47:54.097Z',
      badges: [
        {
          _id: '5fc5e9f0bc24037614dfa2b2',
          badgeId: '5f7d8d22ed281ae56b6e5ae2',
          name: 'postFeaturedDD',
        },
      ],
      questionReplies: [],
      contributors: [
        {
          _id: '5fc32f992d08fb694996199a',
          user: '5fbfa5321a95c63e9c0f46b4',
          stamp: 'cki2od90401fisps19gj15a0k',
        },
      ],
      cuid: 'cki1u90je01jukus12bpraivl',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 3,
      draft: '5fc25dab55b779631e1acf68',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 2,
      __v: 3,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 13,
        reaction_5c090d96c2a9c2a674d35485: 10,
        reaction_567453d0b73d6a82ac8c5abd: 8,
        reaction_5c090d96c2a9c2a674d3548a: 7,
        reaction_5c090d96c2a9c2a674d35488: 8,
        reaction_5c090d96c2a9c2a674d35486: 7,
        reaction_5d9dd859f31791c942dc5b52: 8,
        reaction_5c090d96c2a9c2a674d3548b: 8,
        reaction_567453d0b73d6a82ac8c5ab9: 8,
        reaction_567453d0b73d6a82ac8c5abc: 8,
      },
      lastActivity: '2020-11-29T05:20:25.305Z',
      dateUpdated: '2022-06-07T10:57:04.100Z',
      pendingPublicationApproval: false,
      subtitle: 'How To deploy a react app using GitHub Pages in Simple Steps',
      metaDescription:
        'Using GitHub Pages to deploy a static react app for free, straight from your GitHub repo',
      metaTitle: 'Deploy a react app using GitHub pages',
      hasCustomDate: true,
      series: '5fb973291b7ab0041800d9ce',
      viewsUpdatedOn: 1671840060493,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d35486',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 13,
        reaction_5c090d96c2a9c2a674d35485: 10,
        reaction_567453d0b73d6a82ac8c5abd: 8,
        reaction_5c090d96c2a9c2a674d3548a: 7,
        reaction_5c090d96c2a9c2a674d35488: 8,
        reaction_5c090d96c2a9c2a674d35486: 7,
        reaction_5d9dd859f31791c942dc5b52: 8,
        reaction_5c090d96c2a9c2a674d3548b: 8,
        reaction_567453d0b73d6a82ac8c5ab9: 8,
        reaction_567453d0b73d6a82ac8c5abc: 8,
      },
      id: '5fc269fe55b779631e1acfed',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckor3kkde0601bws1f2n43pka',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckor3kkde0601bws1f2n43pka-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 198,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1621164520948/PGpAPYnGs.png',
      autoGeneratedCover: '',
      brief:
        'As Spotify says, "Listening is everything". That\'s it, after watching tutorials and reading articles, it\'s a perfect chill zone to be on your headphones and listen to some developers talk on various topics. \nThis is my playlist on my podcast library,...',
      content:
        '<p>As Spotify says, "Listening is everything". That\'s it, after watching tutorials and reading articles, it\'s a perfect chill zone to be on your headphones and listen to some developers talk on various topics. </p>\n<p>This is my playlist on my podcast library, it may help you keep up with all the daily updates on the dev zone...</p>\n<h1 id="the-stackoverflow-podcast">The StackOverflow Podcast</h1>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1621160045515/3Qmi-aNih.jpeg" alt="stackoverflowpodcast\\.jpeg" /></p>\n<blockquote>\n<p>It\'s one of the most trusted podcasts trusted by developers worldwide.</p>\n</blockquote>\n<p>The Stack Overflow podcast is a weekly conversation about working in software development, learning to code, and the art and culture of computer programming, including interviews from techies who discuss current trends in the development world.</p>\n<p><a target="_blank" href="https://stackoverflow.blog/podcast/">Visit their website</a></p>\n<p><a target="_blank" href="https://open.spotify.com/show/0e5eoM6w7eW9Wu7wMA04Tr">Listen on Spotify</a></p>\n<p><a target="_blank" href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5zaW1wbGVjYXN0LmNvbS9YQV84NTFrMw?sa=X&amp;ved=2ahUKEwjwj5i0-83wAhUHRhoKHT2QDx0Q9sEGegQIARAJ">Listen on Google Podcast</a></p>\n<p><a target="_blank" href="https://podcasts.apple.com/us/podcast/the-stack-overflow-podcast/id1033688462">Listen on Apple Podcast</a></p>\n<hr />\n\n<h1 id="syntax">Syntax</h1>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1621160521861/Cvpil49_7.jpeg" alt="syntax.jpeg" /></p>\n<p>A podcast for web devs by web devs. It is hosted by Full Stack Developers Wes Bos and Scott Tolinski.</p>\n<p>It is a dive deep into web development topics, explaining how they work and talking about their own experiences. They cover from JavaScript frameworks like React, to the latest advancements in CSS to simplifying web tooling.</p>\n<p><a target="_blank" href="https://syntax.fm/">Visit their website</a></p>\n<p><a target="_blank" href="https://open.spotify.com/show/4kYCRYJ3yK5DQbP5tbfZby">Listen on Spotify</a></p>\n<p><a target="_blank" href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkLnN5bnRheC5mbS9yc3M/episode/YWRkMmZlNWQtZjhlMS00YTQxLWI1YjktODE4ZTIyNGE3YzNl?sa=X&amp;ved=0CBYQz4EHahcKEwiw95-8-83wAhUAAAAAHQAAAAAQCA">Listen on Google Podcast</a></p>\n<p><a target="_blank" href="https://podcasts.apple.com/us/podcast/syntax-tasty-web-development-treats/id1253186678">Listen on Apple Podcast</a></p>\n<hr />\n\n<h1 id="inside-facebook-mobile">Inside FaceBook mobile</h1>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1621161117288/fJvzdqovX.png" alt="fb.png" /></p>\n<p>A podcast by FaceBook. \nThe podcast allows us to highlight the technical work of our engineers who will discuss everything from low-level frameworks to end-user features. Throughout the podcast, two Facebook engineers, Mihaela Ogrezeanu and Pascal Hartig will interview mobile developers in the company(Facebook).</p>\n<p><a target="_blank" href="https://www.facebook.com/careers/life/inside-facebook-mobile">Visit their website</a></p>\n<p><a target="_blank" href="https://open.spotify.com/show/1NlTm7OkZmcrOPfvlqlBMz">Listen on Spotify</a></p>\n<p><a target="_blank" href="https://podcasts.google.com/feed/aHR0cHM6Ly9pbnNpZGVmYWNlYm9va21vYmlsZS5saWJzeW4uY29tL3Jzcw">Listen on Google Podcast</a></p>\n<p><a target="_blank" href="https://podcasts.apple.com/us/podcast/inside-facebook-mobile/id1370910331">Listen on Apple Podcast</a></p>\n<hr />\n\n<h1 id="waveform-the-mkbhd-podcast">Waveform: The MKBHD Podcast</h1>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1621161471011/9v6-OTRLT.jpeg" alt="wavefrm.jpeg" /></p>\n<p>This a bit different, it\'s more of a podcast for the tech enthusiasts, if you want to know what\'s new in the smartphone world, phones, notebooks/MacBooks, new tech specs, and all that, I highly recommend this podcast.</p>\n<blockquote>\n<p>A tech podcast for the gadget lovers and tech heads among us from the mind of Marques Brownlee, better known as MKBHD. MKBHD has made a name for himself on YouTube reviewing everything from the newest smartphones to cameras to electric cars. Pulling from over 10 years of experience covering the tech industry, MKBHD, and co-host Andrew Manganelli will keep you informed and entertained as they take a deep dive into the latest and greatest in tech and what deserves your hard-earned cash. New episodes every other week</p>\n</blockquote>\n<p><a target="_blank" href="https://open.spotify.com/show/6o81QuW22s5m2nfcXWjucc">Listen on Spotify</a></p>\n<p><a target="_blank" href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcHJveHkuZ29vZ2xlLmNvbS9XYXZlZm9ybVdpdGhNa2JoZA?sa=X&amp;ved=0CBIQ9sEGahcKEwiw95-8-83wAhUAAAAAHQAAAAAQGA">Listen on Google Podcast</a></p>\n<p><a target="_blank" href="https://podcasts.apple.com/us/podcast/waveform-the-mkbhd-podcast/id1474429475">Listen on Apple Podcast</a></p>\n<hr />\n\n<h1 id="devnews">DevNews</h1>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1621162282114/i2KKkkAjQW.png" alt="devnews.png" /></p>\n<p>DevNews is the news show for developers by developers, hosted by Saron Yitbarek, founder of CodeNewbie and Disco, and Josh Puetz, principal engineer at Forem. Each season these experienced devs cover the latest in the world of tech and speak with diverse guests from a variety of backgrounds to dig deep into meaty topics such as security, the pros and cons of outsourcing your authentication, and the latest bugs and hacks.</p>\n<p><a target="_blank" href="https://dev.to/pod">Visit their website</a></p>\n<p><a target="_blank" href="https://open.spotify.com/show/1tTuUApDgH6w1LZY25jmzG">Listen on Spotify</a></p>\n<p><a target="_blank" href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw">Listen on Google Podcast</a></p>\n<p><a target="_blank" href="https://podcasts.apple.com/us/podcast/devnews/id1525581923">Listen on Apple Podcast</a></p>\n<hr />\n\n<h1 id="hashnode-video-podcasts-with-catalin-pitcatalinpit">Hashnode (Video) Podcasts with <a class="user-mention" href="https://hashnode.com/@Catalinpit">Catalin Pit</a></h1>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1621163334999/O9VhmoeEq.jpeg" alt="hashnode.jpeg" /></p>\n<p>Hashnode has never failed me, recently they started a podcast hosted by <a class="user-mention" href="https://hashnode.com/@Catalinpit">Catalin Pit</a>. They talk about matters affecting developers and also on how to grow as developers.</p>\n<p>So far they have 2 episodes on-air and can\'t help waiting for more ...</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/watch?v=hwdhS50wavU&amp;list=PL_rXJbw5ZEr3wJF2u1SyQFqLfnGmrHuoV&amp;index=1">https://www.youtube.com/watch?v=hwdhS50wavU&amp;list=PL_rXJbw5ZEr3wJF2u1SyQFqLfnGmrHuoV&amp;index=1</a></div>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/watch?v=VGMhVZHKhWE&amp;list=PL_rXJbw5ZEr3wJF2u1SyQFqLfnGmrHuoV&amp;index=2&amp;t=6s">https://www.youtube.com/watch?v=VGMhVZHKhWE&amp;list=PL_rXJbw5ZEr3wJF2u1SyQFqLfnGmrHuoV&amp;index=2&amp;t=6s</a></div>\n<p></p><hr /><p></p>\n<p></p><hr /><p></p>\n<hr />\n\n<h2 id="other-resources-to-get-developer-podcasts">Other resources to get developer podcasts:</h2>\n<h3 id="the-best-tech-podcasts-for-software-developers-in-2021">The Best Tech Podcasts for Software Developers in 2021</h3>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.freecodecamp.org/news/best-tech-podcasts-for-software-developers/">https://www.freecodecamp.org/news/best-tech-podcasts-for-software-developers/</a></div>\n<h3 id="best-podcasts-for-python-by-ayushi-rawatayushi7rawat">Best Podcasts for Python by <a class="user-mention" href="https://hashnode.com/@ayushi7rawat">Ayushi Rawat</a></h3>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://ayushirawat.com/best-podcasts-for-python">https://ayushirawat.com/best-podcasts-for-python</a></div>\n<h3 id="devto-podcast-list">Dev.to Podcast List</h3>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://dev.to/pod">https://dev.to/pod</a></div>\n',
      contentMarkdown:
        "As Spotify says, \"Listening is everything\". That's it, after watching tutorials and reading articles, it's a perfect chill zone to be on your headphones and listen to some developers talk on various topics. \n\nThis is my playlist on my podcast library, it may help you keep up with all the daily updates on the dev zone...\n\n# The StackOverflow Podcast\n\n![stackoverflowpodcast\\.jpeg](https://cdn.hashnode.com/res/hashnode/image/upload/v1621160045515/3Qmi-aNih.jpeg)\n\n> It's one of the most trusted podcasts trusted by developers worldwide.\n\nThe Stack Overflow podcast is a weekly conversation about working in software development, learning to code, and the art and culture of computer programming, including interviews from techies who discuss current trends in the development world.\n\n[Visit their website](https://stackoverflow.blog/podcast/)\n\n[Listen on Spotify](https://open.spotify.com/show/0e5eoM6w7eW9Wu7wMA04Tr)\n\n[Listen on Google Podcast](https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5zaW1wbGVjYXN0LmNvbS9YQV84NTFrMw?sa=X&ved=2ahUKEwjwj5i0-83wAhUHRhoKHT2QDx0Q9sEGegQIARAJ)\n\n[Listen on Apple Podcast](https://podcasts.apple.com/us/podcast/the-stack-overflow-podcast/id1033688462)\n\n<hr />\n\n# Syntax\n\n![syntax.jpeg](https://cdn.hashnode.com/res/hashnode/image/upload/v1621160521861/Cvpil49_7.jpeg)\n\nA podcast for web devs by web devs. It is hosted by Full Stack Developers Wes Bos and Scott Tolinski.\n\nIt is a dive deep into web development topics, explaining how they work and talking about their own experiences. They cover from JavaScript frameworks like React, to the latest advancements in CSS to simplifying web tooling.\n\n[Visit their website](https://syntax.fm/)\n\n[Listen on Spotify](https://open.spotify.com/show/4kYCRYJ3yK5DQbP5tbfZby)\n\n[Listen on Google Podcast](https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkLnN5bnRheC5mbS9yc3M/episode/YWRkMmZlNWQtZjhlMS00YTQxLWI1YjktODE4ZTIyNGE3YzNl?sa=X&ved=0CBYQz4EHahcKEwiw95-8-83wAhUAAAAAHQAAAAAQCA)\n\n[Listen on Apple Podcast](https://podcasts.apple.com/us/podcast/syntax-tasty-web-development-treats/id1253186678)\n\n<hr />\n\n# Inside FaceBook mobile\n\n![fb.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1621161117288/fJvzdqovX.png)\n\nA podcast by FaceBook. \nThe podcast allows us to highlight the technical work of our engineers who will discuss everything from low-level frameworks to end-user features. Throughout the podcast, two Facebook engineers, Mihaela Ogrezeanu and Pascal Hartig will interview mobile developers in the company(Facebook).\n\n[Visit their website](https://www.facebook.com/careers/life/inside-facebook-mobile)\n\n[Listen on Spotify](https://open.spotify.com/show/1NlTm7OkZmcrOPfvlqlBMz)\n\n[Listen on Google Podcast](https://podcasts.google.com/feed/aHR0cHM6Ly9pbnNpZGVmYWNlYm9va21vYmlsZS5saWJzeW4uY29tL3Jzcw)\n\n[Listen on Apple Podcast](https://podcasts.apple.com/us/podcast/inside-facebook-mobile/id1370910331)\n\n<hr />\n\n# Waveform: The MKBHD Podcast\n\n![wavefrm.jpeg](https://cdn.hashnode.com/res/hashnode/image/upload/v1621161471011/9v6-OTRLT.jpeg)\n\nThis a bit different, it's more of a podcast for the tech enthusiasts, if you want to know what's new in the smartphone world, phones, notebooks/MacBooks, new tech specs, and all that, I highly recommend this podcast.\n\n>A tech podcast for the gadget lovers and tech heads among us from the mind of Marques Brownlee, better known as MKBHD. MKBHD has made a name for himself on YouTube reviewing everything from the newest smartphones to cameras to electric cars. Pulling from over 10 years of experience covering the tech industry, MKBHD, and co-host Andrew Manganelli will keep you informed and entertained as they take a deep dive into the latest and greatest in tech and what deserves your hard-earned cash. New episodes every other week\n\n[Listen on Spotify](https://open.spotify.com/show/6o81QuW22s5m2nfcXWjucc)\n\n[Listen on Google Podcast](https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcHJveHkuZ29vZ2xlLmNvbS9XYXZlZm9ybVdpdGhNa2JoZA?sa=X&ved=0CBIQ9sEGahcKEwiw95-8-83wAhUAAAAAHQAAAAAQGA)\n\n[Listen on Apple Podcast](https://podcasts.apple.com/us/podcast/waveform-the-mkbhd-podcast/id1474429475)\n\n<hr />\n\n# DevNews\n\n![devnews.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1621162282114/i2KKkkAjQW.png)\n\nDevNews is the news show for developers by developers, hosted by Saron Yitbarek, founder of CodeNewbie and Disco, and Josh Puetz, principal engineer at Forem. Each season these experienced devs cover the latest in the world of tech and speak with diverse guests from a variety of backgrounds to dig deep into meaty topics such as security, the pros and cons of outsourcing your authentication, and the latest bugs and hacks.\n\n[Visit their website](https://dev.to/pod)\n\n[Listen on Spotify](https://open.spotify.com/show/1tTuUApDgH6w1LZY25jmzG)\n\n[Listen on Google Podcast](https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw)\n\n[Listen on Apple Podcast](https://podcasts.apple.com/us/podcast/devnews/id1525581923)\n\n<hr />\n\n# Hashnode (Video) Podcasts with @[Catalin Pit](@Catalinpit)\n\n![hashnode.jpeg](https://cdn.hashnode.com/res/hashnode/image/upload/v1621163334999/O9VhmoeEq.jpeg)\n\nHashnode has never failed me, recently they started a podcast hosted by @[Catalin Pit](@Catalinpit). They talk about matters affecting developers and also on how to grow as developers.\n\nSo far they have 2 episodes on-air and can't help waiting for more ...\n\n%[https://www.youtube.com/watch?v=hwdhS50wavU&list=PL_rXJbw5ZEr3wJF2u1SyQFqLfnGmrHuoV&index=1]\n\n\n%[https://www.youtube.com/watch?v=VGMhVZHKhWE&list=PL_rXJbw5ZEr3wJF2u1SyQFqLfnGmrHuoV&index=2&t=6s]\n\n\n<hr />\n<hr />\n<hr />\n\n## Other resources to get developer podcasts:\n\n### The Best Tech Podcasts for Software Developers in 2021\n\n%[https://www.freecodecamp.org/news/best-tech-podcasts-for-software-developers/]\n\n### Best Podcasts for Python by @[Ayushi Rawat](@ayushi7rawat)\n\n%[https://ayushirawat.com/best-podcasts-for-python]\n\n### Dev.to Podcast List\n\n%[https://dev.to/pod]\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744722958ef13879b950d3',
        '5f058ab0c9763d47e2d2eedc',
        '56744721958ef13879b94c7e',
        '567ae5a72b926c3063c3061a',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4714.822,
      responses: [
        {
          popularity: 4715.0177,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60a159b323723215ec2fdb68',
          content:
            '<p>Awesome article <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a></p>\n<p>Thank you, for the mention!</p>\n',
          contentMarkdown:
            'Awesome article @[Chris Achinga](@chrisdevcode)\n\nThank you, for the mention!',
          author: '5f53e768fee30a7c48c0a901',
          stamp: 'ckorgvnwq093rbws101kk8tdr',
          post: '60a1026323723215ec2fd0fc',
          replies: [],
          dateAdded: '2021-05-16T17:43:15.916Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35484'],
      totalReactions: 2,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60a1026323723215ec2fd0fc',
      title: 'Great Podcasts for Developers',
      subtitle: 'Learn by Listening | Listening is Power | Developer Podcasts',
      type: 'story',
      ogImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1621164568791/BOmIoNFwu.png',
      metaTitle: 'Great Podcasts for Developers',
      metaDescription:
        'Great Podcasts for Developers and Software Engineers around the world',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'great-podcasts-for-developers',
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      dateAdded: '2021-05-16T11:30:43.032Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '60a159b323723215ec2fdb69',
          user: '5f53e768fee30a7c48c0a901',
          stamp: 'ckorgvnwq093rbws101kk8tdr',
        },
      ],
      cuid: 'ckor3kkde0601bws1f2n43pka',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60a0ed3ab66a0b15ebfc91a8',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 3,
      __v: 1,
      lastActivity: '2021-05-16T17:43:15.947Z',
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
      },
      viewsUpdatedOn: 1664829008546,
      uniqueReactions: ['5c090d96c2a9c2a674d35484'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
      },
      id: '60a1026323723215ec2fd0fc',
    },
    {
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 4,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1620832318295/bT9ZcmLG6.png',
      autoGeneratedCover: '',
      brief:
        "Too Long Don't Read ...\nWe use 'className' in our React code instead of 'class' simply because 'class' is a reserved keyword in JavaScript, you know, for creating classes.",
      content:
        "<p>Too Long Don't Read ...</p>\n<p>We use 'className' in our React code instead of 'class' simply because 'class' is a reserved keyword in JavaScript, you know, for creating classes.</p>\n",
      contentMarkdown:
        "Too Long Don't Read ...\n\nWe use 'className' in our React code instead of 'class' simply because 'class' is a reserved keyword in JavaScript, you know, for creating classes.\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744723958ef13879b95434'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4707.1389,
      responses: [
        {
          popularity: 4707.1533,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '609bf34c00bbde79d86a6caf',
          content:
            '<p>Terrible , this is not a blog nor is the comment text correct. ClassName in React has nothing to do with JavaScript class. It’s an JSX feature and due to how react deals with DOM diffing on re render.</p>\n',
          contentMarkdown:
            'Terrible , this is not a blog nor is the comment text correct. ClassName in React has nothing to do with JavaScript class. It’s an JSX feature and due to how react deals with DOM diffing on re render.',
          author: '6070b4121494367be6d29248',
          stamp: 'ckolm6gfh09x32gs14oyp6o5s',
          post: '609bf0c2c798bd79ff8edfa5',
          replies: [],
          dateAdded: '2021-05-12T15:25:00.462Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: false,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '609bf0c2c798bd79ff8edfa5',
      title: 'Why we Use className instead of class in React?',
      subtitle: 'Why we Use className instead of class in React ...',
      type: 'story',
      metaTitle: 'Why we Use className instead of class in React?',
      metaDescription: 'Why we Use className instead of class in React?',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'why-we-use-classname-instead-of-class-in-react',
      series: '5fe072ea1485f22e24b3776c',
      pollOptions: [],
      dateAdded: '2021-05-12T15:14:10.034Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '609bf34c00bbde79d86a6cb0',
          user: '6070b4121494367be6d29248',
          stamp: 'ckolm6gfh09x32gs14oyp6o5s',
        },
      ],
      cuid: 'ckollsim209po3js14lxi93h9',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '609bf004c798bd79ff8edf9f',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 1,
      __v: 1,
      lastActivity: '2021-05-12T15:25:00.495Z',
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '609bf0c2c798bd79ff8edfa5',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cki8us9y9003dgos14zhp8xdr-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 970,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1620759009258/7NZXO3nHW.png',
      autoGeneratedCover: '',
      brief:
        'Installing git\nInstall git from here Choose a selection based on your operating system. For Linux and Ubuntu OS, you may use this alternative: Open your terminal and paste the command below:\nsudo apt-get install git\n\nEnsure you have a GitHub account....',
      content:
        '<h2 id="heading-installing-git">Installing git</h2>\n<p><a target="_blank" href="https://git-scm.com/downloads">Install git from here</a> Choose a selection based on your operating system. For Linux and Ubuntu OS, you may use this alternative: Open your terminal and paste the command below:</p>\n<pre><code class="lang-bash">sudo apt-get install git\n</code></pre>\n<p>Ensure you have a GitHub account. If not, create one here <a target="_blank" href="https://github.com/join">Join GitHub</a>.</p>\n<p>First of all, we’ll configure your details to git. “Assuming your GitHub username is DevAcc, and the email used on GitHub is devacc@mail.com” On your terminal, use the following commands:</p>\n<pre><code class="lang-bash">$ git config --global user.name <span class="hljs-string">"devAcc"</span>\n$ git config --global user.email “devacc@mail.com”\n</code></pre>\n<p>To confirm the details, use <code>git config --list</code> With that set, you should be ready to start working efficiently with your local repository.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671370441892/zue5ZtE_6.png" alt class="image--center mx-auto" /></p>\n<h2 id="heading-generating-a-git-ssh-key">Generating a git ssh key</h2>\n<p>This prevents git from requesting your username and password every time you push into GitHub. <em>(it’s annoying)</em> So this is how we do it:</p>\n<p>Open your terminal and use the commands below:</p>\n<pre><code class="lang-bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">"devacc@mail.com"</span>\n</code></pre>\n<p>This will prompt you to enter a location to save the key and create a password to access that.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671370609773/O-Os-J24u.png" alt class="image--center mx-auto" /></p>\n<h2 id="heading-connecting-to-your-github-account">Connecting to Your GitHub Account</h2>\n<p>After this, you’ll need to copy the key to the clipboard. Use the command below to view the ssh key in a human-readable format:</p>\n<pre><code class="lang-bash">cat &lt; ~/.ssh/id_rsa.pub\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620758991329/Q3VOjCzPb.png" alt="key.png" /></p>\n<p>Copy the key displayed to your clipboard:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1671370695216/gav79cUGz.png" alt class="image--center mx-auto" /></p>\n<p>Go to your GitHub profile and navigate to settings, or better still use the link <a target="_blank" href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a>. On the left side, panel, click on SSH and GPG keys, then click on the top green button “New SSH” and paste the key there. Voila! You are good to go</p>\n',
      contentMarkdown:
        '## Installing git\n\n[Install git from here](https://git-scm.com/downloads) Choose a selection based on your operating system. For Linux and Ubuntu OS, you may use this alternative: Open your terminal and paste the command below:\n\n```bash\nsudo apt-get install git\n```\n\nEnsure you have a GitHub account. If not, create one here [Join GitHub](https://github.com/join).\n\nFirst of all, we’ll configure your details to git. “Assuming your GitHub username is DevAcc, and the email used on GitHub is devacc@mail.com” On your terminal, use the following commands:\n\n```bash\n$ git config --global user.name "devAcc"\n$ git config --global user.email “devacc@mail.com”\n```\n\nTo confirm the details, use `git config --list` With that set, you should be ready to start working efficiently with your local repository.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1671370441892/zue5ZtE_6.png align="center")\n\n## Generating a git ssh key\n\nThis prevents git from requesting your username and password every time you push into GitHub. *(it’s annoying)* So this is how we do it:\n\nOpen your terminal and use the commands below:\n\n```bash\nssh-keygen -t rsa -b 4096 -C "devacc@mail.com"\n```\n\nThis will prompt you to enter a location to save the key and create a password to access that.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1671370609773/O-Os-J24u.png align="center")\n\n## Connecting to Your GitHub Account\n\nAfter this, you’ll need to copy the key to the clipboard. Use the command below to view the ssh key in a human-readable format:\n\n```bash\ncat < ~/.ssh/id_rsa.pub\n```\n\n![key.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620758991329/Q3VOjCzPb.png align="left")\n\nCopy the key displayed to your clipboard:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1671370695216/gav79cUGz.png align="center")\n\nGo to your GitHub profile and navigate to settings, or better still use the link [https://github.com/settings/ssh/new](https://github.com/settings/ssh/new). On the left side, panel, click on SSH and GPG keys, then click on the top green button “New SSH” and paste the key there. Voila! You are good to go',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94c63',
        '56744723958ef13879b9526c',
        '5677ff6aec7aa67e51f1e096',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4706.9604,
      responses: [
        {
          popularity: 4705.7299,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '609af91500bbde79d86a526f',
          content: '<p>nice piece</p>\n',
          contentMarkdown: 'nice piece',
          author: '608935f81bb72c581861f8ab',
          stamp: 'ckokk1jc1028i2gs10zdp1nir',
          post: '5fc8e2e04d45506288f18a41',
          replies: [],
          dateAdded: '2021-05-11T21:37:25.538Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4399.8114,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '5fc8ea5aaa5def637a584456',
          content:
            '<p>I&#39;m also a git &amp; github fan, if I was to configure git and GitHub again to my machine, I&#39;ll surely refer from this. 😊</p>\n',
          contentMarkdown:
            "I'm also a git & github fan, if I was to configure git and GitHub again to my machine, I'll surely refer from this. 😊",
          author: '5f3e9cd34751c54430fe6c6d',
          stamp: 'cki8vxakd00fjnes13dbfg1hn',
          post: '5fc8e2e04d45506288f18a41',
          replies: [],
          dateAdded: '2020-12-03T13:38:34.814Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4399.8096,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '5fc8ea0820237d635556c7b8',
          content: '<p>Keep it going bro</p>\n',
          contentMarkdown: 'Keep it going bro',
          author: '5fc8e9a520237d635556c7a6',
          stamp: 'cki8vviyc00c2mds10q3z57hk',
          post: '5fc8e2e04d45506288f18a41',
          replies: [],
          dateAdded: '2020-12-03T13:37:12.374Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 3,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      totalReactions: 28,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fc8e2e04d45506288f18a41',
      title: 'Git and GitHub SSH Configuration',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'git-and-github-ssh-configuration',
      series: '5fb973291b7ab0041800d9ce',
      pollOptions: [],
      dateAdded: '2021-05-11T18:54:58.780Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '609af91500bbde79d86a5270',
          user: '608935f81bb72c581861f8ab',
          stamp: 'ckokk1jc1028i2gs10zdp1nir',
        },
        {
          _id: '5fc8ea5aaa5def637a584457',
          user: '5f3e9cd34751c54430fe6c6d',
          stamp: 'cki8vxakd00fjnes13dbfg1hn',
        },
        {
          _id: '5fc8ea0820237d635556c7b9',
          user: '5fc8e9a520237d635556c7a6',
          stamp: 'cki8vviyc00c2mds10q3z57hk',
        },
      ],
      cuid: 'cki8us9y9003dgos14zhp8xdr',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 3,
      draft: '5fc8de3cf1f1cf5f96fc8dc6',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 2,
      __v: 5,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_567453d0b73d6a82ac8c5abc: 3,
        reaction_567453d0b73d6a82ac8c5ab9: 3,
        reaction_5c090d96c2a9c2a674d35485: 4,
        reaction_5c090d96c2a9c2a674d35486: 3,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
      },
      lastActivity: '2021-05-11T21:37:25.569Z',
      dateUpdated: '2022-12-18T13:42:21.703Z',
      hasCustomDate: true,
      metaDescription:
        'Configure SSH to your GitHub using git for better experiences with GitHub and git',
      metaTitle: 'Git and GitHub SSH Configuration',
      pendingPublicationApproval: false,
      subtitle:
        'Configure SSH to your GitHub using git for better experiences with GitHub and GitHub',
      viewsUpdatedOn: 1671372061237,
      coverImageAttribution: '',
      coverImagePhotographer: '',
      isCoverAttributionHidden: false,
      ogImage: '',
      originalArticleURL: '',
      stickCoverToBottom: false,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_567453d0b73d6a82ac8c5abc: 3,
        reaction_567453d0b73d6a82ac8c5ab9: 3,
        reaction_5c090d96c2a9c2a674d35485: 4,
        reaction_5c090d96c2a9c2a674d35486: 3,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
      },
      id: '5fc8e2e04d45506288f18a41',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckoinu3jm0ka7qcs161r90djm',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckoinu3jm0ka7qcs161r90djm-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 256,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1620651704956/TcjpE_264.png',
      autoGeneratedCover: '',
      brief:
        'Using Strapi\nhttps://strapi.io/\nWhat is Strapi\nStrapi is a headless CMS \nA headless content management system, or headless CMS, is a back-end-only content management system that acts primarily as a content repository. A headless CMS makes content acc...',
      content:
        '<h2 id="using-strapi">Using Strapi</h2>\n<p>https://strapi.io/</p>\n<h3 id="what-is-strapi">What is Strapi</h3>\n<p>Strapi is a headless CMS </p>\n<p>A headless content management system, or headless CMS, is a back-end-only content management system that acts primarily as a content repository. A headless CMS makes content accessible via an API for display on any device, without a built-in front-end or presentation layer</p>\n<p>A list of headless cms - https://jamstack.org/headless-cms/</p>\n<h2 id="creating-a-simple-blog-cms-with-strapi">Creating a simple blog CMS with strapi</h2>\n<h3 id="setup-strapi-project">Setup strapi project:</h3>\n<h4 id="requirements">Requirements</h4>\n<p>Need to have nodejs(Version 10 and above) and npm. </p>\n<p>To start open your terminal/cmd and run:</p>\n<pre><code>npx <span class="hljs-keyword">create</span>-strapi-app blog-cms\n</code></pre><p>You will be prompted to select an installation type, select <code>Quickstart</code></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620652140835/rhBCViJYm.png" alt="selet-instalation-type.png" /></p>\n<p>Installation proceeds</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620652278552/Kp5KiI0t1.png" alt="installing.png" /></p>\n<p>Completed Installation:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620652356507/V3N5poMaA.png" alt="completed.png" /></p>\n<p>This command will set up the necessary files and folders for your projects. \nYou don\'t have to understand everything at once, we\'ll go through the basics.</p>\n<p>Once the project is set up, it will open a browser tab for the admin panel, where you will be required to create an admin account - http://localhost:1337/admin/auth/register-admin</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620652589346/lwfEqSCez.png" alt="admincreate.png" /></p>\n<p>I will use a dummy user to create one for demo purpose:\nyou will need first and last name, email, and a password.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620652661252/GV3xpZ8fO.png" alt="admin.png" /></p>\n<p>Once you have created the account, you will be redirected to an admin panel. \nStrapi admin has a simple to understand layout.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620652727796/aC5jxA_Gq.png" alt="dash.png" /></p>\n<h3 id="creating-content">Creating Content:</h3>\n<p>Say you are creating a blogging site, you will need something like an entry table on the database, tag/category table too, so in strapi, we create that from the content-type feature on strapi.\nWe do that by creating a Content-Type in strapi.</p>\n<p>Right on the admin dashboard, there is a button to \'create your first content-type</p>\n<p>The first step is to create the name, a name could be of anything you think of, let\'s say a blog entry.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620652970494/amcGGmU1o.png" alt="contentcreate.png" /></p>\n<p>While giving it a name, strapi will automatically create a uid from the name.\nonce you are done, click on continue to go on.</p>\n<p>A modal box will appear after the click for you to create the fields for your blog entry.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620653075152/-3f0kZ8Ak.png" alt="fieldtypes-box.png" /></p>\n<p>There are a lot of options based on the data type you want an entry to be of:</p>\n<ol>\n<li>Text</li>\n<li>Rich Text</li>\n<li>number </li>\n<li>date </li>\n<li>boolean</li>\n<li>relation </li>\n<li>email</li>\n<li>password</li>\n<li>enumeration (list of choices)</li>\n<li>media</li>\n<li>JSON</li>\n<li>uid</li>\n</ol>\n<p>We will create a simple title and body: </p>\n<p>So select the \'text\' options.</p>\n<p>Give it a name: \'title\'</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620653257343/Oc72QVKfX.png" alt="title.png" /></p>\n<p>Click <code>+add another</code> field</p>\n<p>Then select Rich Text for the article body:</p>\n<p>Give it a name: \'entry\'</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620653339222/gSFzCWNTl.png" alt="entry.png" /></p>\n<p>Click finish, that\'s it.</p>\n<p>Click on save after that. the server will reload while saving the current content-type.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620653693936/-6VTADlBA.png" alt="loadaing.png" /></p>\n<p>That\'s it, you are done.</p>\n<p>On the left of the dashboard, under the content-types, you\'ll see Blog Entries/the name of the content type you created.</p>\n<p>Go ahead and add a few entries, one or two (to test of course)</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620653496746/LnPJ-9rWr.png" alt="entry1.png" /></p>\n<p>After you have added an entry, and saved it, you have to publish it.</p>\n<p><strong>Remember: it\'s save then publish!</strong></p>\n<h3 id="access-your-api">Access Your API</h3>\n<p>You may have a client side site that you\'d want to show the blog or the content from your cms, Strapi has a built in api that lets you do that, after all that\'s the main point, aint it...</p>\n<p>By default, strapi runs on port 1337 on your localhost. to acces the api, you use the url: http://localhost:1337/ </p>\n<p>In my demo: http://localhost:1337/blog-entries</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620653599638/vU6KIAtq1.png" alt="api403.png" /></p>\n<p>By default the api will be forbiden for public urls, to disable that we go settings:</p>\n<p>(http://localhost:1337/admin/settings/application-infos)</p>\n<p>in settings go to \'USERS &amp; PERMISSIONS PLUGIN  \' and select roles</p>\n<p>There are 2 roles, authenticated and public</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620653664909/CzUa3eHp-.png" alt="roles.png" /></p>\n<p>Let\'s start with the authenticated, scroll down to permissions and select all and save. do the same for the public.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620654010685/fc2HqD8oZ.png" alt="permisoms.png" /></p>\n<p>After that let\'s go back to the API URL and refresh the page:</p>\n<p>there we go:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1620654056429/2l5uSE5kB.png" alt="api.png" /></p>\n<p>As simple as that, now you can use strapi to manage dynamic content on your site.</p>\n<h2 id="notes">NOTES:</h2>\n<h3 id="to-run-the-development-server">To run the development server:</h3>\n<pre><code><span class="hljs-built_in">npm</span> run develop\n</code></pre><h3 id="source-code">Source Code</h3>\n<p>Github: https://github.com/ChrisAchinga/strapi-demo</p>\n<h3 id="strapi-docs-and-tutorials">Strapi Docs and Tutorials</h3>\n<p><a target="_blank" href="https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html#_1-install-strapi-and-create-a-new-project">Strapi Docs</a></p>\n<p><a target="_blank" href="https://www.udemy.com/course/nextjs-dev-to-deployment/">udemy: strapi and next</a></p>\n',
      contentMarkdown:
        "## Using Strapi \n\nhttps://strapi.io/\n\n### What is Strapi \n\nStrapi is a headless CMS \n\nA headless content management system, or headless CMS, is a back-end-only content management system that acts primarily as a content repository. A headless CMS makes content accessible via an API for display on any device, without a built-in front-end or presentation layer\n\nA list of headless cms - https://jamstack.org/headless-cms/\n\n## Creating a simple blog CMS with strapi\n\n### Setup strapi project:\n\n#### Requirements\n\nNeed to have nodejs(Version 10 and above) and npm. \n\nTo start open your terminal/cmd and run:\n\n```\nnpx create-strapi-app blog-cms\n```\n\nYou will be prompted to select an installation type, select `Quickstart`\n\n![selet-instalation-type.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620652140835/rhBCViJYm.png)\n\nInstallation proceeds\n\n![installing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620652278552/Kp5KiI0t1.png)\n\nCompleted Installation:\n\n![completed.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620652356507/V3N5poMaA.png)\n\nThis command will set up the necessary files and folders for your projects. \nYou don't have to understand everything at once, we'll go through the basics.\n\nOnce the project is set up, it will open a browser tab for the admin panel, where you will be required to create an admin account - http://localhost:1337/admin/auth/register-admin\n\n\n![admincreate.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620652589346/lwfEqSCez.png)\n\nI will use a dummy user to create one for demo purpose:\nyou will need first and last name, email, and a password.\n\n![admin.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620652661252/GV3xpZ8fO.png)\n\nOnce you have created the account, you will be redirected to an admin panel. \nStrapi admin has a simple to understand layout.\n\n![dash.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620652727796/aC5jxA_Gq.png)\n\n### Creating Content:\n\nSay you are creating a blogging site, you will need something like an entry table on the database, tag/category table too, so in strapi, we create that from the content-type feature on strapi.\nWe do that by creating a Content-Type in strapi.\n\nRight on the admin dashboard, there is a button to 'create your first content-type\n\nThe first step is to create the name, a name could be of anything you think of, let's say a blog entry.\n\n![contentcreate.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620652970494/amcGGmU1o.png)\n\nWhile giving it a name, strapi will automatically create a uid from the name.\nonce you are done, click on continue to go on.\n\nA modal box will appear after the click for you to create the fields for your blog entry.\n\n![fieldtypes-box.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620653075152/-3f0kZ8Ak.png)\n\nThere are a lot of options based on the data type you want an entry to be of:\n\n\n1. Text\n2. Rich Text\n3. number \n4. date \n5. boolean\n6. relation \n7. email\n8. password\n9. enumeration (list of choices)\n10. media\n11. JSON\n12. uid\n\nWe will create a simple title and body: \n\nSo select the 'text' options.\n\nGive it a name: 'title'\n\n![title.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620653257343/Oc72QVKfX.png)\n\nClick `+add another` field\n\nThen select Rich Text for the article body:\n\nGive it a name: 'entry'\n\n![entry.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620653339222/gSFzCWNTl.png)\n\nClick finish, that's it.\n\nClick on save after that. the server will reload while saving the current content-type.\n\n\n![loadaing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620653693936/-6VTADlBA.png)\n\nThat's it, you are done.\n\nOn the left of the dashboard, under the content-types, you'll see Blog Entries/the name of the content type you created.\n\nGo ahead and add a few entries, one or two (to test of course)\n\n![entry1.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620653496746/LnPJ-9rWr.png)\n\nAfter you have added an entry, and saved it, you have to publish it.\n\n**Remember: it's save then publish!**\n\n### Access Your API\n\nYou may have a client side site that you'd want to show the blog or the content from your cms, Strapi has a built in api that lets you do that, after all that's the main point, aint it...\n\nBy default, strapi runs on port 1337 on your localhost. to acces the api, you use the url: http://localhost:1337/<content-Type-Name> \n\nIn my demo: http://localhost:1337/blog-entries\n\n![api403.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620653599638/vU6KIAtq1.png)\n\nBy default the api will be forbiden for public urls, to disable that we go settings:\n\n(http://localhost:1337/admin/settings/application-infos)\n\nin settings go to 'USERS & PERMISSIONS PLUGIN  ' and select roles\n\nThere are 2 roles, authenticated and public\n\n![roles.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620653664909/CzUa3eHp-.png)\n\nLet's start with the authenticated, scroll down to permissions and select all and save. do the same for the public.\n\n![permisoms.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620654010685/fc2HqD8oZ.png)\n\nAfter that let's go back to the API URL and refresh the page:\n\nthere we go:\n\n![api.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1620654056429/2l5uSE5kB.png)\n\nAs simple as that, now you can use strapi to manage dynamic content on your site.\n\n## NOTES:\n\n### To run the development server:\n\n```\nnpm run develop\n```\n\n### Source Code\nGithub: https://github.com/ChrisAchinga/strapi-demo\n\n### Strapi Docs and Tutorials\n\n[Strapi Docs](https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html#_1-install-strapi-and-create-a-new-project)\n\n[udemy: strapi and next](https://www.udemy.com/course/nextjs-dev-to-deployment/)\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94cad',
        '5914be36db93b4aae8008897',
        '56744723958ef13879b953ff',
        '56744723958ef13879b95245',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4704.9084,
      responses: [
        {
          popularity: 4704.5544,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '609a2a7221068818a5c653b4',
          content:
            "<p>Strapi is just amazing. I&#39;m using it in my current <a target='_blank' rel='noopener noreferrer'  href=\"https://master-redux.yogeshchavan.dev/\">Mastering Redux</a> course for creating a food ordering App.</p>\n",
          contentMarkdown:
            "Strapi is just amazing. I'm using it in my current [Mastering Redux](https://master-redux.yogeshchavan.dev/) course for creating a food ordering App.",
          author: '5f9571a140346172a86c2504',
          stamp: 'ckojojqk40tjwv9s1111w1up4',
          post: '609939941ea29f2c341e30ba',
          replies: [],
          dateAdded: '2021-05-11T06:55:46.998Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4704.4609,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '609a1a031ea29f2c341e4039',
          content:
            '<p>Strapi looks really awesome. I might give it a try!</p>\n',
          contentMarkdown:
            'Strapi looks really awesome. I might give it a try!',
          author: '5f25a0c390ac4260edf355e4',
          stamp: 'ckojm1k080pxmqcs1658s2nj4',
          post: '609939941ea29f2c341e30ba',
          replies: [],
          dateAdded: '2021-05-11T05:45:39.466Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4703.1885,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '60993a5c21068818a5c6429d',
          content:
            '<p>Wow this is great <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a></p>\n',
          contentMarkdown: 'Wow this is great @[Chris Achinga](@chrisdevcode)',
          author: '608935f81bb72c581861f8ab',
          stamp: 'ckoinydmx0n95v9s1fsk02ldu',
          post: '609939941ea29f2c341e30ba',
          replies: [],
          dateAdded: '2021-05-10T13:51:24.300Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 3,
      replyCount: 3,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 53,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '609939941ea29f2c341e30ba',
      title: 'Getting Started With strapi',
      subtitle:
        'Using a headless CMS to save time on creating Dynamic Websites/Applications',
      type: 'story',
      ogImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1620654430398/7hLjrx9L7.png',
      metaTitle: 'Strapi Tutorial',
      metaDescription: 'Getting started with strapi headless cms',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'getting-started-with-strapi',
      importedFromMedium: false,
      dateAdded: '2021-05-10T13:48:04.519Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '609a2a7321068818a5c653b5',
          user: '5f9571a140346172a86c2504',
          stamp: 'ckojojqk40tjwv9s1111w1up4',
        },
        {
          _id: '609a1a031ea29f2c341e403a',
          user: '5f25a0c390ac4260edf355e4',
          stamp: 'ckojm1k080pxmqcs1658s2nj4',
        },
        {
          _id: '60993a5c21068818a5c6429e',
          user: '608935f81bb72c581861f8ab',
          stamp: 'ckoinydmx0n95v9s1fsk02ldu',
        },
      ],
      cuid: 'ckoinu3jm0ka7qcs161r90djm',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60992eaf1ea29f2c341e2f66',
      hasPinnedTag: false,
      readTime: 4,
      __v: 3,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 6,
        reaction_5c090d96c2a9c2a674d35484: 8,
        reaction_5c090d96c2a9c2a674d35486: 5,
        reaction_567453d0b73d6a82ac8c5abd: 6,
        reaction_5c090d96c2a9c2a674d3548a: 5,
        reaction_5d9dd859f31791c942dc5b52: 5,
        reaction_5c090d96c2a9c2a674d35488: 5,
        reaction_567453d0b73d6a82ac8c5ab9: 5,
        reaction_5c090d96c2a9c2a674d3548b: 4,
        reaction_567453d0b73d6a82ac8c5abc: 4,
      },
      lastActivity: '2021-05-11T09:04:02.275Z',
      viewsUpdatedOn: 1671834660567,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 6,
        reaction_5c090d96c2a9c2a674d35484: 8,
        reaction_5c090d96c2a9c2a674d35486: 5,
        reaction_567453d0b73d6a82ac8c5abd: 6,
        reaction_5c090d96c2a9c2a674d3548a: 5,
        reaction_5d9dd859f31791c942dc5b52: 5,
        reaction_5c090d96c2a9c2a674d35488: 5,
        reaction_567453d0b73d6a82ac8c5ab9: 5,
        reaction_5c090d96c2a9c2a674d3548b: 4,
        reaction_567453d0b73d6a82ac8c5abc: 4,
      },
      id: '609939941ea29f2c341e30ba',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/cko2tpn4r01aeels1a26k9fwo',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cko2tpn4r01aeels1a26k9fwo-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 212,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1619522015595/SZqq8TSto.png',
      autoGeneratedCover: '',
      brief:
        'All web developers are probably familiar with using the web console as their debugging tool. The most common way is using the famous console.log tool that JavaScript provides.\nThe console has more than just the .log() method that could be helpful. Ch...',
      content:
        '<p>All web developers are probably familiar with using the web console as their debugging tool. The most common way is using the famous <code>console.log</code> tool that JavaScript provides.</p>\n<p>The <code>console</code> has more than just the <code>.log()</code> method that could be helpful. Check out some of the methods you could use:</p>\n<h2 id="1-consolelog">1. <code>console.log()</code></h2>\n<blockquote>\n<p>This is the most used method of all</p>\n</blockquote>\n<p>It outputs messages to the web console. The message may be of any data type.\ncan also pass in variables and functions as parameters.</p>\n<p>Examples:</p>\n<pre><code class="lang-javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'A message to the console\'</span>)\n\n<span class="hljs-built_in">console</span>.log(<span class="hljs-number">451999</span>)\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1619522610442/3AWlG_1_p.png" alt="console-log.png" /></p>\n<p>There are a lot of things you could do with the <code>.log()</code>:</p>\n<h3 id="showing-a-variable-content">Showing a variable content:</h3>\n<pre><code class="lang-javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">\'hashnode blog\'</span>\n\n<span class="hljs-comment">// displaying contents stored in name variable to the console</span>\n<span class="hljs-built_in">console</span>.log(name)\n</code></pre>\n<h3 id="calling-a-function">Calling a function</h3>\n<pre><code class="lang-javascript"><span class="hljs-keyword">const</span> Hello = <span class="hljs-function"><span class="hljs-params">str</span> =&gt;</span> {\n <span class="hljs-keyword">return</span> <span class="hljs-string">`Hello <span class="hljs-subst">${str}</span>`</span>\n}\n\n<span class="hljs-built_in">console</span>.log(Hello(<span class="hljs-string">\'World\'</span>))\n</code></pre>\n<h2 id="2-consoleerror">2.<code>console.error()</code></h2>\n<p>This is used to output error messages on the web console. </p>\n<p>Errors shown are in red text and have a light red background color.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1619527317584/Z6hCMbLqr.png" alt="error.png" /></p>\n<h2 id="3-consolewarn">3. <code>console.warn()</code></h2>\n<p>It\'s used to output warning messages on the web console.</p>\n<p>Warning texts will be in yellow over a light-yellow background on the console.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1619527561456/5l9S2iDL0.png" alt="warning.png" /></p>\n<h2 id="4-consoletable">4. <code>console.table()</code></h2>\n<p>The method is used to display groups of data in a tabular layout on the web console.\nhelps visualize complex data in form of arrays and objects in a tabular form.\ntakes in two arguments, the data and the columns to be displayed.</p>\n<h3 id="displaying-arrays">Displaying Arrays</h3>\n<pre><code class="lang-javascript"><span class="hljs-comment">// an array of strings</span>\n<span class="hljs-built_in">console</span>.table([<span class="hljs-string">"apples"</span>, <span class="hljs-string">"oranges"</span>, <span class="hljs-string">"bananas"</span>]);\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1619528089006/lxecU9L5k.png" alt="tablearray.png" /></p>\n<h3 id="objects">Objects</h3>\n<pre><code class="lang-javascript"><span class="hljs-comment">// an array of objects</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">firstName, lastName</span>) </span>{\n  <span class="hljs-built_in">this</span>.firstName = firstName;\n  <span class="hljs-built_in">this</span>.lastName = lastName;\n}\n\n<span class="hljs-keyword">var</span> john = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"John"</span>, <span class="hljs-string">"Smith"</span>);\n<span class="hljs-keyword">var</span> jane = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Jane"</span>, <span class="hljs-string">"Doe"</span>);\n<span class="hljs-keyword">var</span> emily = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Emily"</span>, <span class="hljs-string">"Jones"</span>);\n\n<span class="hljs-built_in">console</span>.table([john, jane, emily]);\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1619528575418/_MjUJpBGp.png" alt="table-array.png" /></p>\n<h2 id="5-consoleclear">5. <code>console.clear()</code></h2>\n<p>This one clears everything from your console.</p>\n<h2 id="conclusion">Conclusion</h2>\n<p>Visit  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Console">MDN DOCS</a> to learn more about the console API and its methods</p>\n',
      contentMarkdown:
        'All web developers are probably familiar with using the web console as their debugging tool. The most common way is using the famous `console.log` tool that JavaScript provides.\n\nThe `console` has more than just the `.log()` method that could be helpful. Check out some of the methods you could use:\n\n## 1. `console.log()`\n\n>This is the most used method of all\n\nIt outputs messages to the web console. The message may be of any data type.\ncan also pass in variables and functions as parameters.\n\nExamples:\n\n```javascript\nconsole.log(\'A message to the console\')\n\nconsole.log(451999)\n```\n\n![console-log.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619522610442/3AWlG_1_p.png)\n\nThere are a lot of things you could do with the `.log()`:\n\n### Showing a variable content:\n\n```javascript\nlet name = \'hashnode blog\'\n\n// displaying contents stored in name variable to the console\nconsole.log(name)\n```\n\n### Calling a function\n\n```javascript\nconst Hello = str => {\n return `Hello ${str}`\n}\n\nconsole.log(Hello(\'World\'))\n```\n\n## 2.` console.error()`\n\nThis is used to output error messages on the web console. \n\nErrors shown are in red text and have a light red background color.\n\n![error.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619527317584/Z6hCMbLqr.png)\n\n## 3. `console.warn()`\n\nIt\'s used to output warning messages on the web console.\n\nWarning texts will be in yellow over a light-yellow background on the console.\n\n![warning.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619527561456/5l9S2iDL0.png)\n\n## 4. `console.table()`\n\nThe method is used to display groups of data in a tabular layout on the web console.\nhelps visualize complex data in form of arrays and objects in a tabular form.\ntakes in two arguments, the data and the columns to be displayed.\n\n### Displaying Arrays\n\n```javascript\n// an array of strings\nconsole.table(["apples", "oranges", "bananas"]);\n```\n\n![tablearray.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619528089006/lxecU9L5k.png)\n\n### Objects\n\n```javascript\n// an array of objects\n\nfunction Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nvar john = new Person("John", "Smith");\nvar jane = new Person("Jane", "Doe");\nvar emily = new Person("Emily", "Jones");\n\nconsole.table([john, jane, emily]);\n```\n\n![table-array.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619528575418/_MjUJpBGp.png)\n\n## 5. `console.clear()`\n\nThis one clears everything from your console.\n\n## Conclusion \n\nVisit  [MDN DOCS](https://developer.mozilla.org/en-US/docs/Web/API/Console) to learn more about the console API and its methods\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f058ab0c9763d47e2d2eedc',
        '56744721958ef13879b94cad',
        '56744723958ef13879b95372',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4683.2054,
      responses: [
        {
          popularity: 4682.6261,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '608b1bdf7c6e8801e22e38c9',
          content:
            '<p>Great article <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a></p>\n',
          contentMarkdown: 'Great article @[Chris Achinga](@chrisdevcode)',
          author: '608935f81bb72c581861f8ab',
          stamp: 'cko3d1sf2056gdes11nxe3b4p',
          post: '608a9cfff80abf020dc5ff34',
          replies: [],
          dateAdded: '2021-04-29T20:49:35.007Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4682.4248,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '608af87bf80abf020dc606df',
          content:
            '<p>Great blog <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a> 👏 </p>\n<p>Here&#39;s another great blog that I&#39;d like to share - <a target=\'_blank\' rel=\'noopener noreferrer\'  href="https://deepsourcehq.hashnode.dev/javascript-best-practices-to-improve-code-quality">JavaScript best practices to improve code quality</a>.</p>\n',
          contentMarkdown:
            "Great blog @[Chris Achinga](@chrisdevcode) 👏 \n\nHere's another great blog that I'd like to share - [JavaScript best practices to improve code quality](https://deepsourcehq.hashnode.dev/javascript-best-practices-to-improve-code-quality).",
          author: '5e8ae02fc33078055274886d',
          stamp: 'cko37nmb504dyels1701fe4ln',
          post: '608a9cfff80abf020dc5ff34',
          replies: [],
          dateAdded: '2021-04-29T18:18:35.827Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 2,
      replyCount: 1,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abd',
        '5d9dd859f31791c942dc5b52',
      ],
      totalReactions: 20,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: true,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '608a9cfff80abf020dc5ff34',
      title: '5 JavaScript Console Methods you should Know',
      subtitle:
        'Debug on the web console like a Pro, using these 5 simple Methods',
      type: 'story',
      ogImage: '',
      metaTitle: 'JavaScript Console Methods',
      metaDescription: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: '5-javascript-console-methods-you-should-know',
      importedFromMedium: false,
      dateAdded: '2021-04-29T11:48:15.441Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '608b1bdf7c6e8801e22e38ca',
          user: '608935f81bb72c581861f8ab',
          stamp: 'cko3d1sf2056gdes11nxe3b4p',
        },
        {
          _id: '608af87bf80abf020dc606e0',
          user: '5e8ae02fc33078055274886d',
          stamp: 'cko37nmb504dyels1701fe4ln',
        },
      ],
      cuid: 'cko2tpn4r01aeels1a26k9fwo',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '6087f1e3aaea092e0faa6263',
      hasPinnedTag: false,
      readTime: 2,
      __v: 2,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      lastActivity: '2021-04-29T21:32:56.500Z',
      viewsUpdatedOn: 1669627859880,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abd',
        '5d9dd859f31791c942dc5b52',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      id: '608a9cfff80abf020dc5ff34',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/cknnhmogp0eqbkos1cojb2h9i',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cknnhmogp0eqbkos1cojb2h9i-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 56,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1618769578631/9a0senzCs.png',
      autoGeneratedCover: '',
      brief:
        'For the self-taught developer and (or) pretty much all developers, we use open source projects in our daily code, with or without knowing.\n\nFor real though, Open Source (OS) projects have made our work easier and surprisingly fun.\nTL;DR\nMy First Open...',
      content:
        '<blockquote>\n<p>For the self-taught developer and (or) pretty much all developers, we use open source projects in our daily code, with or without knowing.</p>\n</blockquote>\n<p>For real though, <strong>Open Source (OS)</strong> projects have made our work easier and surprisingly fun.</p>\n<h2 id="tldr">TL;DR</h2>\n<h1 id="my-first-open-source-contribution">My First Open Source Contribution</h1>\n<p>It is always hard to find what open source projects you\'d love to contribute to, especially when you are a beginner, well that\'s why we mostly end up fixing the typos and eventually, making impressive contributions with time.</p>\n<p>It\'s about time I shared my first experience. (A very short story).</p>\n<p>I had been a member of the Facebook Developer Circles Nairobi for some time when the  <strong><a target="_blank" href="https://developers.facebook.com/developercircles/open-source-immersion">Open Source Immersion</a></strong> was announced. </p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.facebook.com/groups/DevCNairobi/permalink/3374954279235348/">https://www.facebook.com/groups/DevCNairobi/permalink/3374954279235348/</a></div>\n<p>I googled on how to make contributions to the open-source, for the community. This was a simple case, what was needed was for community members to contribute to the  <a target="_blank" href="https://github.com/fbdevelopercircles/FbDevcCommunityContent">Facebook Developers Circle Content repository</a> . It was a cool one.</p>\n<p>A summary of what I did:</p>\n<ul>\n<li><p><a target="_blank" href="https://github.com/fbdevelopercircles/FbDevcCommunityContent/commit/d0ba39522a1438619ac3dd19e7d6da4da162a666">Added a dev podcast link to the podcast list</a></p>\n</li>\n<li><p><a target="_blank" href="https://github.com/fbdevelopercircles/FbDevcCommunityContent/commit/1549ebfb32530616d5a122f65cac4eca40ec5654">Fix Merge conflicts</a>  (LOL)</p>\n</li>\n<li><p><a target="_blank" href="https://github.com/fbdevelopercircles/FbDevcCommunityContent/commit/ad15a80f3b6ba6819c6542ccd55683584bf7f5ae">Added blogs to the blogs list\n</a> </p>\n</li>\n</ul>\n<h2 id="lessons-learned">Lessons learned:</h2>\n<p>The main thing I gained was how to contribute to an already existing project using git and GitHub. Fixing a merge conflict was the best one.</p>\n',
      contentMarkdown:
        ">For the self-taught developer and (or) pretty much all developers, we use open source projects in our daily code, with or without knowing.\n\nFor real though, **Open Source (OS)** projects have made our work easier and surprisingly fun.\n\n## TL;DR\n\n# My First Open Source Contribution\n\nIt is always hard to find what open source projects you'd love to contribute to, especially when you are a beginner, well that's why we mostly end up fixing the typos and eventually, making impressive contributions with time.\n\nIt's about time I shared my first experience. (A very short story).\n\nI had been a member of the Facebook Developer Circles Nairobi for some time when the  **[Open Source Immersion](https://developers.facebook.com/developercircles/open-source-immersion)** was announced. \n\n%[https://www.facebook.com/groups/DevCNairobi/permalink/3374954279235348/]\n\nI googled on how to make contributions to the open-source, for the community. This was a simple case, what was needed was for community members to contribute to the  [Facebook Developers Circle Content repository](https://github.com/fbdevelopercircles/FbDevcCommunityContent) . It was a cool one.\n\nA summary of what I did:\n\n-  [Added a dev podcast link to the podcast list](https://github.com/fbdevelopercircles/FbDevcCommunityContent/commit/d0ba39522a1438619ac3dd19e7d6da4da162a666)\n\n-  [Fix Merge conflicts](https://github.com/fbdevelopercircles/FbDevcCommunityContent/commit/1549ebfb32530616d5a122f65cac4eca40ec5654)  (LOL)\n\n-  [Added blogs to the blogs list\n](https://github.com/fbdevelopercircles/FbDevcCommunityContent/commit/ad15a80f3b6ba6819c6542ccd55683584bf7f5ae) \n\n## Lessons learned:\n\nThe main thing I gained was how to contribute to an already existing project using git and GitHub. Fixing a merge conflict was the best one.\n\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f75f322b7a1d82bf9b34c6d',
        '56744722958ef13879b94f32',
        '56744721958ef13879b94da0',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4662.0761,
      responses: [
        {
          popularity: 4679.8795,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6089391372387b583d1490b7',
          content: '<p>great article</p>\n',
          contentMarkdown: 'great article',
          author: '608935f81bb72c581861f8ab',
          stamp: 'cko1bgpan00nnfhs19hqg82on',
          post: '607c76c9c99e200d08f7d416',
          replies: [],
          dateAdded: '2021-04-28T10:29:39.217Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4662.089,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '607d01d4c99e200d08f7dac0',
          content: '<p>Nice one Chris.</p>\n',
          contentMarkdown: 'Nice one Chris.',
          author: '5f5b66d08caae04fa643db4a',
          stamp: 'ckno2tlqf0h30kos1e4762cf1',
          post: '607c76c9c99e200d08f7d416',
          replies: [],
          dateAdded: '2021-04-19T04:06:44.296Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 2,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35486',
      ],
      totalReactions: 6,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '607c76c9c99e200d08f7d416',
      title: 'My First Open Source Contribution',
      subtitle: '',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'my-first-open-source-contribution',
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      dateAdded: '2021-04-18T18:13:29.242Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '6089391372387b583d1490b8',
          user: '608935f81bb72c581861f8ab',
          stamp: 'cko1bgpan00nnfhs19hqg82on',
        },
        {
          _id: '607d01d4c99e200d08f7dac1',
          user: '5f5b66d08caae04fa643db4a',
          stamp: 'ckno2tlqf0h30kos1e4762cf1',
        },
      ],
      cuid: 'cknnhmogp0eqbkos1cojb2h9i',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '607c6fd2c99e200d08f7d2f0',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 1,
      __v: 2,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_567453d0b73d6a82ac8c5abc: 0,
        reaction_5c090d96c2a9c2a674d3548b: 0,
        reaction_5c090d96c2a9c2a674d35488: 0,
        reaction_5d9dd859f31791c942dc5b52: 0,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
      },
      lastActivity: '2021-04-28T10:29:39.249Z',
      viewsUpdatedOn: 1669717860936,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35486',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_567453d0b73d6a82ac8c5abc: 0,
        reaction_5c090d96c2a9c2a674d3548b: 0,
        reaction_5c090d96c2a9c2a674d35488: 0,
        reaction_5d9dd859f31791c942dc5b52: 0,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
      },
      id: '607c76c9c99e200d08f7d416',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckni084b006ce1js19xp0d4aw',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckni084b006ce1js19xp0d4aw-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 283,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1618436957116/G-UXldF_0.png',
      autoGeneratedCover: '',
      brief:
        "Hello world! I have been attending Hashnode Bootcamp III and I have more confidence and reasons to keep blogging.\n\n\nTL;DR\nI blog because ...\n1. Community Motivation.\n\n\nbecause I'd love to give back to the community.\n\nI had always wanted to write a bl...",
      content:
        '<blockquote>\n<p>Hello world! I have been attending <a class="user-mention" href="https://hashnode.com/@hashnode">Hashnode</a> Bootcamp III and I have more confidence and reasons to keep blogging.</p>\n</blockquote>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618437603915/9WlbdEf4r.png" alt="5 reasons" /></p>\n<h3 id="tldr">TL;DR</h3>\n<h1 id="i-blog-because">I blog because ...</h1>\n<h2 id="1-community-motivation">1. Community Motivation.</h2>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618437645906/0OaI-MxQo.png" alt="community motivation" /></p>\n<blockquote>\n<p>because I\'d love to give back to the community.</p>\n</blockquote>\n<p>I had always wanted to write a blog ever since I started writing code, but it was hard for me to start initially. But since I prefer written tutorials to video ones, I came to learn of many great writers who share great content with the community for free.</p>\n<p>What better reason to write technical blogs other than the love for the community 😍😍😍, I\'d love to thank many writers for their content and motivation and constituency in their blogs, just to mention but a few: <a class="user-mention" href="https://hashnode.com/@didicodes">Edidiong Asikpo</a>, <a class="user-mention" href="https://hashnode.com/@Catalinpit">Catalin\'s Tech</a>, <a class="user-mention" href="https://hashnode.com/@ayushi7rawat">Ayushi Rawat</a>, <a class="user-mention" href="https://hashnode.com/@denic">Marko Denic</a> and most importantly me <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a>.</p>\n<h2 id="2-documenting-my-journey">2. Documenting My Journey</h2>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618437725249/uHV5dHHLX.png" alt="documenting my journey" /></p>\n<blockquote>\n<p>because I\'d love to remember how I got to where I am</p>\n</blockquote>\n<p>A picture is worth a thousand words they say, I say a blog is worth a thousand memories and happiness. Once I hit a major stepping stone in my career, I have no better way than to write about it and share it with others, some may need that more than I do. </p>\n<p>For example, after deciding that I\'ll have React Native as one of my stacks, I wrote <a target="_blank" href="https://chrisdev.hashnode.dev/what-is-react-native-building-with-react-native">What Is React Native, Building With React Native</a>, and then <a target="_blank" href="https://chrisdev.hashnode.dev/how-i-made-my-first-website-using-an-api">How I made my first website using an API 😎</a> because I was really struggling with APIs back then.</p>\n<h2 id="3-explaining-my-projects">3. Explaining My Projects</h2>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618437765685/CXG5cbRf0.png" alt="explaining my projects" /></p>\n<blockquote>\n<p>because I love explaining to people what I actually do</p>\n</blockquote>\n<p>I am not the creativity-type of person, I kind of love improving what is in existence, so when I build anything that helps me in any way, I definitely have to document the moments 😁😁😁.</p>\n<p>For example, since I use React frequently and the setting up process is always repetitive and boring 😩😩 at some point, I made me several starter templates, and wrote about one of them here: <a target="_blank" href="https://chrisdev.hashnode.dev/creating-a-react-and-bootstrap-template">Creating a React &amp; Bootstrap Template</a>. </p>\n<p>This is me telling you I am a developer without telling you I am a developer!! (hope it makes sense 🤓🤓).</p>\n<h3 id="4-teaching-my-friends">4. Teach.ing My Friends</h3>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618437816599/jieCujB58.png" alt="teaching my friends" /></p>\n<blockquote>\n<p>because to teach is to learn twice, also good to share knowledge</p>\n</blockquote>\n<p>I enjoy sharing the little I know with my friends and peers. Because talking is cheap, how about I make some notes, write an article and publish it on <a class="user-mention" href="https://hashnode.com/@hashnode">Hashnode</a>, that way, you can always refer to it anytime and or anywhere. I call it <strong>Cloud Learning</strong> 😎😎😎😎</p>\n<p>I wrote <a target="_blank" href="https://chrisdev.hashnode.dev/git-and-github-installation-and-configuration">Git &amp; GitHub: Installation and Configuration</a> to help my best friend learn git and GitHub integration. <a class="user-mention" href="https://hashnode.com/@Wwangwe">Timothy Wangwe</a></p>\n<h3 id="5-my-blog-is-my-resume">5. My Blog is My Resume</h3>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618437872367/l1MNfCPXI.png" alt="My Blog is My Resume" /></p>\n<blockquote>\n<p>because it shows other than tell</p>\n</blockquote>\n<p>Marketing and branding oneself as a self-taught developer is one hell 😬😬 of a task here in my country where many people believe in academic papers, sad right 😭😭😭.</p>\n<p>I believe showing a person what I do makes more impact than telling, and especially for the non-technical, who may or may not have heard of GitHub and how important it is to me/us, a blog might as well work for them.</p>\n<h4 id="conclusion">Conclusion:</h4>\n<p>I seriously don\'t have the 5 reasons only, they are a lot, and writing all of them would make this article longer and bore (it\'s not even technical right ... 😂😂😂). You can get me on Twitter or LinkedIn for a friendly professional chat.</p>\n<p><a target="_blank" href="https://twitter.com/achinga_chris">Twitter</a></p>\n<p><a target="_blank" href="https://www.linkedin.com/in/chris-achinga-001/">LinkedIn</a></p>\n<p><strong>May The Forth Be With You 🖖🖖🖖🖖</strong></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618437901879/IsOi-Ycwh.png" alt="Chris Achinga" /></p>\n',
      contentMarkdown:
        ">Hello world! I have been attending @[Hashnode](@hashnode) Bootcamp III and I have more confidence and reasons to keep blogging.\n\n\n![5 reasons](https://cdn.hashnode.com/res/hashnode/image/upload/v1618437603915/9WlbdEf4r.png)\n\n### TL;DR \n\n# I blog because ...\n\n## 1. Community Motivation.\n\n\n![community motivation](https://cdn.hashnode.com/res/hashnode/image/upload/v1618437645906/0OaI-MxQo.png)\n\n>because I'd love to give back to the community.\n\nI had always wanted to write a blog ever since I started writing code, but it was hard for me to start initially. But since I prefer written tutorials to video ones, I came to learn of many great writers who share great content with the community for free.\n\nWhat better reason to write technical blogs other than the love for the community 😍😍😍, I'd love to thank many writers for their content and motivation and constituency in their blogs, just to mention but a few: @[Edidiong Asikpo](@didicodes), @[Catalin's Tech](@Catalinpit), @[Ayushi Rawat](@ayushi7rawat), @[Marko Denic](@denic) and most importantly me @[Chris Achinga](@chrisdevcode).\n\n## 2. Documenting My Journey\n\n![documenting my journey](https://cdn.hashnode.com/res/hashnode/image/upload/v1618437725249/uHV5dHHLX.png)\n\n>because I'd love to remember how I got to where I am\n\nA picture is worth a thousand words they say, I say a blog is worth a thousand memories and happiness. Once I hit a major stepping stone in my career, I have no better way than to write about it and share it with others, some may need that more than I do. \n\nFor example, after deciding that I'll have React Native as one of my stacks, I wrote [What Is React Native, Building With React Native](https://chrisdev.hashnode.dev/what-is-react-native-building-with-react-native), and then [How I made my first website using an API 😎](https://chrisdev.hashnode.dev/how-i-made-my-first-website-using-an-api) because I was really struggling with APIs back then.\n\n## 3. Explaining My Projects\n\n![explaining my projects](https://cdn.hashnode.com/res/hashnode/image/upload/v1618437765685/CXG5cbRf0.png)\n\n>because I love explaining to people what I actually do\n\nI am not the creativity-type of person, I kind of love improving what is in existence, so when I build anything that helps me in any way, I definitely have to document the moments 😁😁😁.\n\nFor example, since I use React frequently and the setting up process is always repetitive and boring 😩😩 at some point, I made me several starter templates, and wrote about one of them here: [Creating a React & Bootstrap Template](https://chrisdev.hashnode.dev/creating-a-react-and-bootstrap-template). \n\nThis is me telling you I am a developer without telling you I am a developer!! (hope it makes sense 🤓🤓).\n\n### 4. Teach.ing My Friends\n\n![teaching my friends](https://cdn.hashnode.com/res/hashnode/image/upload/v1618437816599/jieCujB58.png)\n\n>because to teach is to learn twice, also good to share knowledge\n\nI enjoy sharing the little I know with my friends and peers. Because talking is cheap, how about I make some notes, write an article and publish it on @[Hashnode](@hashnode), that way, you can always refer to it anytime and or anywhere. I call it **Cloud Learning** 😎😎😎😎\n\nI wrote [Git & GitHub: Installation and Configuration](https://chrisdev.hashnode.dev/git-and-github-installation-and-configuration) to help my best friend learn git and GitHub integration. @[Timothy Wangwe](@Wwangwe)\n\n### 5. My Blog is My Resume\n\n![My Blog is My Resume](https://cdn.hashnode.com/res/hashnode/image/upload/v1618437872367/l1MNfCPXI.png)\n\n>because it shows other than tell\n\nMarketing and branding oneself as a self-taught developer is one hell 😬😬 of a task here in my country where many people believe in academic papers, sad right 😭😭😭.\n\nI believe showing a person what I do makes more impact than telling, and especially for the non-technical, who may or may not have heard of GitHub and how important it is to me/us, a blog might as well work for them.\n\n\n#### Conclusion: \n\nI seriously don't have the 5 reasons only, they are a lot, and writing all of them would make this article longer and bore (it's not even technical right ... 😂😂😂). You can get me on Twitter or LinkedIn for a friendly professional chat.\n\n[Twitter](https://twitter.com/achinga_chris)\n\n[LinkedIn](https://www.linkedin.com/in/chris-achinga-001/)\n\n**May The Forth Be With You 🖖🖖🖖🖖**\n\n\n![Chris Achinga](https://cdn.hashnode.com/res/hashnode/image/upload/v1618437901879/IsOi-Ycwh.png)\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f75f322b7a1d82bf9b34c6d',
        '567ae5a72b926c3063c3061a',
        '5f3272264332ee07eb55c4bd',
        '56744722958ef13879b9514c',
        '56b0ba4604f0061506b35fae',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4655.805,
      responses: [
        {
          popularity: 4655.631,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '607892a24155da32fc83cd8e',
          content:
            '<p>Nice Article <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a>!</p>\n',
          contentMarkdown: 'Nice Article @[Chris Achinga](@chrisdevcode)!',
          author: '5f456a23b9870f18f59a8793',
          stamp: 'cknj9stlm0elm2ks107j726ap',
          post: '6077679da3407a32d70424b5',
          replies: [],
          dateAdded: '2021-04-15T19:23:14.268Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4654.8021,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '607800eea3407a32d7042f32',
          content: '<p>Thanks for this</p>\n',
          contentMarkdown: 'Thanks for this',
          author: '605dd1da43029d4a5fb6362f',
          stamp: 'ckninld4m09i81js1cjjuazbl',
          post: '6077679da3407a32d70424b5',
          replies: [],
          dateAdded: '2021-04-15T09:01:34.775Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4654.7952,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6077ffb74155da32fc83bee3',
          content:
            '<p>I totally agree with you <a class="user-mention" href="https://hashnode.com/@chrisdevcode">Chris Achinga</a>. I also blog because of these reasons as well.</p>\n',
          contentMarkdown:
            'I totally agree with you @[Chris Achinga](@chrisdevcode). I also blog because of these reasons as well.',
          author: '5e5e9c1f8c89a92316ce8b66',
          stamp: 'cknineovq09ii2ks1di1qdf0y',
          post: '6077679da3407a32d70424b5',
          replies: [],
          dateAdded: '2021-04-15T08:56:23.416Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4654.5488,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6077d46a4155da32fc83b9b1',
          content: '<p>Keep going, Chris.</p>\n',
          contentMarkdown: 'Keep going, Chris.',
          author: '5fcfc6f2090905292f6c2302',
          stamp: 'cknigt3it08052ks1h00o21kj',
          post: '6077679da3407a32d70424b5',
          replies: [],
          dateAdded: '2021-04-15T05:51:38.264Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4654.4433,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6077c1dd4155da32fc83b843',
          content: '<p>Thank you for the mention and keep going!</p>\n',
          contentMarkdown: 'Thank you for the mention and keep going!',
          author: '5f25a0c390ac4260edf355e4',
          stamp: 'cknidzbhg07jj2ks15t7ecptu',
          post: '6077679da3407a32d70424b5',
          replies: [],
          dateAdded: '2021-04-15T04:32:29.669Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4654.2627,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6077a21ea3407a32d70426db',
          content: '<p>Keep it up 👍\nThank you for mention 😄</p>\n',
          contentMarkdown: 'Keep it up 👍\nThank you for mention 😄',
          author: '5f53e768fee30a7c48c0a901',
          stamp: 'ckni954p1070o1js15fq02rmw',
          post: '6077679da3407a32d70424b5',
          replies: [],
          dateAdded: '2021-04-15T02:17:02.726Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 6,
      replyCount: 2,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5ab9',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 75,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '6077679da3407a32d70424b5',
      title: 'I Blog, because ...',
      subtitle: 'Main reasons that motivate me to keep writing',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'i-blog-because',
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      dateAdded: '2021-04-14T22:07:25.573Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '607892a24155da32fc83cd8f',
          user: '5f456a23b9870f18f59a8793',
          stamp: 'cknj9stlm0elm2ks107j726ap',
        },
        {
          _id: '607800eea3407a32d7042f33',
          user: '605dd1da43029d4a5fb6362f',
          stamp: 'ckninld4m09i81js1cjjuazbl',
        },
        {
          _id: '6077ffb74155da32fc83bee4',
          user: '5e5e9c1f8c89a92316ce8b66',
          stamp: 'cknineovq09ii2ks1di1qdf0y',
        },
        {
          _id: '6077d46a4155da32fc83b9b2',
          user: '5fcfc6f2090905292f6c2302',
          stamp: 'cknigt3it08052ks1h00o21kj',
        },
        {
          _id: '6077c1dd4155da32fc83b844',
          user: '5f25a0c390ac4260edf355e4',
          stamp: 'cknidzbhg07jj2ks15t7ecptu',
        },
        {
          _id: '6077a21ea3407a32d70426dc',
          user: '5f53e768fee30a7c48c0a901',
          stamp: 'ckni954p1070o1js15fq02rmw',
        },
      ],
      cuid: 'ckni084b006ce1js19xp0d4aw',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '607756b7a3407a32d7042375',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 3,
      __v: 6,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 10,
        reaction_567453d0b73d6a82ac8c5abc: 5,
        reaction_5c090d96c2a9c2a674d35484: 14,
        reaction_567453d0b73d6a82ac8c5ab9: 7,
        reaction_5d9dd859f31791c942dc5b52: 5,
        reaction_5c090d96c2a9c2a674d3548b: 6,
        reaction_5c090d96c2a9c2a674d35486: 8,
        reaction_5c090d96c2a9c2a674d35488: 8,
        reaction_567453d0b73d6a82ac8c5abd: 7,
        reaction_5c090d96c2a9c2a674d3548a: 5,
      },
      lastActivity: '2021-04-15T19:23:14.298Z',
      viewsUpdatedOn: 1671715863921,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5ab9',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 10,
        reaction_567453d0b73d6a82ac8c5abc: 5,
        reaction_5c090d96c2a9c2a674d35484: 14,
        reaction_567453d0b73d6a82ac8c5ab9: 7,
        reaction_5d9dd859f31791c942dc5b52: 5,
        reaction_5c090d96c2a9c2a674d3548b: 6,
        reaction_5c090d96c2a9c2a674d35486: 8,
        reaction_5c090d96c2a9c2a674d35488: 8,
        reaction_567453d0b73d6a82ac8c5abd: 7,
        reaction_5c090d96c2a9c2a674d3548a: 5,
      },
      id: '6077679da3407a32d70424b5',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckne7ki1q0052bvs1dz73h3w0-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 134,
      slugOverridden: true,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1618195579893/3V_5_eDJo.png',
      autoGeneratedCover: '',
      brief:
        "Your Brand is what people out here talk about you, so it's up to you to make it good or bad, or beneficial to your career.\n\nThere are a lot of outstanding Developer profiles that we admire and look up to them for guidance and most importantly, our pe...",
      content:
        '<p>Your Brand is what people out here talk about you, so it\'s up to you to make it good or bad, or beneficial to your career.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618208457773/yyiFATE4d.png" alt="chrisdev blog.png" /></p>\n<p>There are a lot of outstanding Developer profiles that we admire and look up to them for guidance and most importantly, our personal growth. There are too many articles and videos on how to market yourself as a developer, creating outstanding Resumes, and become influential on social media platforms.</p>\n<p>I have had my share of ups and downs in personal branding, and still making my way up there. TL;DR, I\'ll highlight some major changes I have made.</p>\n<h2 id="creating-a-resume">Creating a Resume.</h2>\n<p>My Resumes have grown to become very short and straight to the point. I have a habit of versioning my resume for easy differentiation and also avoid repetition. So far these are the key points I take when updating my resume:</p>\n<ul>\n<li><h3 id="make-your-resume-as-short-as-possible">Make your resume as short as possible:</h3>\n</li>\n</ul>\n<p>I learned that recruiters and hiring personnel have a number of resumes to go through for a single vacant position, and they barely have a minute to go through a single resume. So try as much as possible to make your resume short and with the most important details you\'d love to share. (It\'s Not Rocket Science).</p>\n<ul>\n<li><h3 id="making-your-resume-ats-compliant">Making your Resume ATS Compliant:</h3>\n</li>\n</ul>\n<blockquote>\n<p>An applicant tracking system — or ATS, for short — is a type of software used by recruiters and employers during the hiring process to collect, sort, scan, and rank the job applications they receive for their open positions.</p>\n</blockquote>\n<p>Big companies have the resumes submitted reviewed under an ATS before a real human goes through them. You may want to up your game to become a start out of this. Check out the following resources:</p>\n<p>https://www.topresume.com/career-advice/what-is-an-ats-resume</p>\n<p>https://novoresume.com/career-blog/ats-resume</p>\n<p>https://www.themuse.com/advice/beat-the-robots-how-to-get-your-resume-past-the-system-into-human-hands</p>\n<p>Feel free to Google for more and more resources!</p>\n<ul>\n<li><h3 id="focus-on-your-achievements-other-than-responsibilities">Focus on your achievements other than responsibilities:</h3>\n</li>\n</ul>\n<p>You may want to specify the impact of your responsibilities in the work experience part of your resume. For example, other than saying:</p>\n<pre><code class="lang-txt">Front end design\n\nSay:\n\nCreating an Interactive user interface that is \naccessible and up to WCAG standards\n</code></pre>\n<p>Also, it is advisable to quantify your impact statements with actual and realistic data.</p>\n<ul>\n<li><h3 id="your-skills">Your Skills</h3>\n</li>\n</ul>\n<p>Your skills are what sell your brand. It is important to categorize your skills, either soft skills or technical skills, various categories of technical skills i.e front end...</p>\n<p>You should try and be brief and detailed oriented when listing your skills.</p>\n<blockquote>\n<p>A quick review of my current resume:</p>\n</blockquote>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.dropbox.com/s/agj58hpd8tjn6u0/achinga-chris_0.pdf?dl=0">https://www.dropbox.com/s/agj58hpd8tjn6u0/achinga-chris_0.pdf?dl=0</a></div>\n<h2 id="your-portfolio">Your Portfolio</h2>\n<p>A portfolio showcases what you have done with your mentioned skills. It is like the documentation to your Resume.</p>\n<p>On this, I prefer having my own website (Online portfolio). There are no particular standards to making a great portfolio. Here is where you put your imagination into effect. i.e </p>\n<pre><code class="lang-js">imagination.initialize(<span class="hljs-literal">true</span>)\n</code></pre>\n<h3 id="conclusion">Conclusion</h3>\n<p>Do not be limited to my opinions or other people\'s opinions on how you should brand yourself. Be true to yourself and know what you looking for.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618208414134/b5xAZYphz.png" alt="chrisdev.png" /></p>\n',
      contentMarkdown:
        "Your Brand is what people out here talk about you, so it's up to you to make it good or bad, or beneficial to your career.\n\n\n![chrisdev blog.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1618208457773/yyiFATE4d.png)\n\nThere are a lot of outstanding Developer profiles that we admire and look up to them for guidance and most importantly, our personal growth. There are too many articles and videos on how to market yourself as a developer, creating outstanding Resumes, and become influential on social media platforms.\n\nI have had my share of ups and downs in personal branding, and still making my way up there. TL;DR, I'll highlight some major changes I have made.\n\n## Creating a Resume.\n\nMy Resumes have grown to become very short and straight to the point. I have a habit of versioning my resume for easy differentiation and also avoid repetition. So far these are the key points I take when updating my resume:\n\n- ### Make your resume as short as possible:\n\nI learned that recruiters and hiring personnel have a number of resumes to go through for a single vacant position, and they barely have a minute to go through a single resume. So try as much as possible to make your resume short and with the most important details you'd love to share. (It's Not Rocket Science).\n\n- ### Making your Resume ATS Compliant:\n\n>An applicant tracking system — or ATS, for short — is a type of software used by recruiters and employers during the hiring process to collect, sort, scan, and rank the job applications they receive for their open positions.\n\nBig companies have the resumes submitted reviewed under an ATS before a real human goes through them. You may want to up your game to become a start out of this. Check out the following resources:\n\nhttps://www.topresume.com/career-advice/what-is-an-ats-resume\n\nhttps://novoresume.com/career-blog/ats-resume\n\nhttps://www.themuse.com/advice/beat-the-robots-how-to-get-your-resume-past-the-system-into-human-hands\n\nFeel free to Google for more and more resources!\n\n- ### Focus on your achievements other than responsibilities:\n\nYou may want to specify the impact of your responsibilities in the work experience part of your resume. For example, other than saying:\n\n```txt\nFront end design\n\nSay:\n\nCreating an Interactive user interface that is \naccessible and up to WCAG standards\n```\n\nAlso, it is advisable to quantify your impact statements with actual and realistic data.\n\n- ### Your Skills\n\nYour skills are what sell your brand. It is important to categorize your skills, either soft skills or technical skills, various categories of technical skills i.e front end...\n\nYou should try and be brief and detailed oriented when listing your skills.\n\n>A quick review of my current resume:\n\n%[https://www.dropbox.com/s/agj58hpd8tjn6u0/achinga-chris_0.pdf?dl=0]\n\n## Your Portfolio\n\nA portfolio showcases what you have done with your mentioned skills. It is like the documentation to your Resume.\n\nOn this, I prefer having my own website (Online portfolio). There are no particular standards to making a great portfolio. Here is where you put your imagination into effect. i.e \n\n```js \nimagination.initialize(true)\n```\n\n### Conclusion\n\nDo not be limited to my opinions or other people's opinions on how you should brand yourself. Be true to yourself and know what you looking for.\n\n\n![chrisdev.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1618208414134/b5xAZYphz.png)\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['5f75f322b7a1d82bf9b34c6d', '5690e78091716a2d1dbadc0f'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4649.8706,
      responses: [
        {
          popularity: 4649.8365,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6074981385f3a21e3926c1f8',
          content: '<p>Nice read.</p>\n',
          contentMarkdown: 'Nice read.',
          author: '602bda870f9c5707459ca201',
          stamp: 'ckneyk0t701xbyxs1hj7dheev',
          post: '6073e703c6482015eb38328c',
          replies: [],
          dateAdded: '2021-04-12T18:57:23.228Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      totalReactions: 11,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '6073e703c6482015eb38328c',
      title: 'My Developer Profile & Branding',
      subtitle: 'My Personal Branding (Resume)',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'developer-profile-and-branding',
      importedFromMedium: false,
      dateAdded: '2021-04-12T06:21:55.845Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '6074981385f3a21e3926c1f9',
          user: '602bda870f9c5707459ca201',
          stamp: 'ckneyk0t701xbyxs1hj7dheev',
        },
      ],
      cuid: 'ckne7ki1q0052bvs1dz73h3w0',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '6073b47e1494367be6d2b73a',
      hasPinnedTag: false,
      readTime: 3,
      __v: 1,
      series: null,
      dateUpdated: '2021-04-12T06:27:22.518Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
      },
      lastActivity: '2021-04-12T18:57:23.266Z',
      viewsUpdatedOn: 1667820660025,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
      },
      id: '6073e703c6482015eb38328c',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckn99tkel0cqs7ts15pirgm86-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 100,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1617909861680/luuUaNG2M.png',
      autoGeneratedCover: '',
      brief:
        'TL;DR\nI started focusing on projects that would land me my first ever software development job this week. So I have been dealing with creating applications with functionalities that introduce me to the most commonly used features throughout the indus...',
      content:
        '<p>TL;DR</p>\n<p>I started focusing on projects that would land me my first ever software development job this week. So I have been dealing with creating applications with functionalities that introduce me to the most commonly used features throughout the industry.</p>\n<p>So I have been working on payment integrations and re-designing my portfolio.</p>\n<p>I love following the \'Build as I Learn\' technique, so I started two projects, one called \' <a target="_blank" href="https://github.com/ChrisAchinga/fundraiser">Fundraiser</a> \' and the other one \' <a target="_blank" href="https://github.com/ChrisAchinga/community-space">Community Space</a> \'.</p>\n<h2 id="fundraiserhttpsgithubcomchrisachingafundraiser"><a target="_blank" href="https://github.com/ChrisAchinga/fundraiser">Fundraiser</a> :</h2>\n<p>This is a donations application, I will be creating a campaign to help me get a MacBook (LOL). The front end is built using  <a target="_blank" href="https://nextjs.org/">NextJS</a>  and  <a target="_blank" href="https://tailwindcss.com/">Tailwind CSS</a>.</p>\n<p>For the payments, I will be using  <a target="_blank" href="https://stripe.com/">Stripe</a>, to make it easier for card payments.</p>\n<h2 id="community-spacehttpsgithubcomchrisachingacommunity-space"><a target="_blank" href="https://github.com/ChrisAchinga/community-space">Community Space</a></h2>\n<p>I spend most of my time in a  <a target="_blank" href="https://swahilipothub.co.ke/">community workspace</a>,  for the strong internet and of course the calm environment (It\'s just next to the ocean). So I am building this application that will enable community space booking, including the hall for corporate events. </p>\n<p>For the frontend, I am using  <a target="_blank" href="https://nextjs.org/">NextJS</a>  and  <a target="_blank" href="https://getbootstrap.com/">Bootstrap</a>. I will add the booking/saving a spot feature and sending a confirmation receipt via email/phone number (I have never done that before, So help me Code - LOL)</p>\n<h2 id="the-tech-stack">The Tech Stack</h2>\n<p>I am using React/Next for all the projects because I want to perfect the skills professionally and also build scalable applications that are up to  <a target="_blank" href="https://www.w3.org/TR/WCAG21/">WCAG</a> standards. </p>\n<p>I love challenging myself, so working with all projects that have to deal with payment integration will keep me up to pace with my timings and skills.</p>\n<p>I also started working the "Professional Way". Yes, I use  <a target="_blank" href="https://trello.com/">Trello</a>  to plan the project timeline and workflow. I feel like I worth more and need to use better tools for this.</p>\n<h3 id="the-end">The End/</h3>\n<p>Written by  <a target="_blank" href="https://www.linkedin.com/in/chris-achinga-001/">Chris</a> </p>\n',
      contentMarkdown:
        "TL;DR\n\nI started focusing on projects that would land me my first ever software development job this week. So I have been dealing with creating applications with functionalities that introduce me to the most commonly used features throughout the industry.\n\nSo I have been working on payment integrations and re-designing my portfolio.\n\nI love following the 'Build as I Learn' technique, so I started two projects, one called ' [Fundraiser](https://github.com/ChrisAchinga/fundraiser) ' and the other one ' [Community Space](https://github.com/ChrisAchinga/community-space) '.\n\n##  [Fundraiser](https://github.com/ChrisAchinga/fundraiser) :\n\nThis is a donations application, I will be creating a campaign to help me get a MacBook (LOL). The front end is built using  [NextJS](https://nextjs.org/)  and  [Tailwind CSS](https://tailwindcss.com/).\n\nFor the payments, I will be using  [Stripe](https://stripe.com/), to make it easier for card payments.\n\n## [Community Space](https://github.com/ChrisAchinga/community-space)\n\nI spend most of my time in a  [community workspace](https://swahilipothub.co.ke/),  for the strong internet and of course the calm environment (It's just next to the ocean). So I am building this application that will enable community space booking, including the hall for corporate events. \n\nFor the frontend, I am using  [NextJS](https://nextjs.org/)  and  [Bootstrap](https://getbootstrap.com/). I will add the booking/saving a spot feature and sending a confirmation receipt via email/phone number (I have never done that before, So help me Code - LOL)\n\n## The Tech Stack\n\nI am using React/Next for all the projects because I want to perfect the skills professionally and also build scalable applications that are up to  [WCAG](https://www.w3.org/TR/WCAG21/) standards. \n\nI love challenging myself, so working with all projects that have to deal with payment integration will keep me up to pace with my timings and skills.\n\nI also started working the \"Professional Way\". Yes, I use  [Trello](https://trello.com/)  to plan the project timeline and workflow. I feel like I worth more and need to use better tools for this.\n\n### The End/\n\nWritten by  [Chris](https://www.linkedin.com/in/chris-achinga-001/) \n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f75f322b7a1d82bf9b34c6d',
        '584879f0c0aaf085e2012086',
        '56ee65cfcb06805ba9b7c66d',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4643.3088,
      responses: [
        {
          popularity: 5223.9733,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '61fed28d8d15cb3e7ce636c2',
          content: '<p>Did you launch the fundraiser?</p>\n',
          contentMarkdown: 'Did you launch the fundraiser?',
          author: '5e77137ab302cf0e5bdad4e4',
          stamp: 'ckza8qh6w0y57ccs1504hc0xy',
          post: '606f58cfd741af6659cf965a',
          replies: [],
          dateAdded: '2022-02-05T19:39:57.705Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 1,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 13,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '606f58cfd741af6659cf965a',
      title: 'My Current Project(s)',
      subtitle: "An update to what I'm currently up to ...",
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'my-current-projects',
      pollOptions: [],
      dateAdded: '2021-04-08T19:26:07.183Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '61fed28d8d15cb3e7ce636c3',
          user: '5e77137ab302cf0e5bdad4e4',
          stamp: 'ckza8qh6w0y57ccs1504hc0xy',
        },
      ],
      cuid: 'ckn99tkel0cqs7ts15pirgm86',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '606f525cd741af6659cf95f3',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 2,
      __v: 1,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      viewsUpdatedOn: 1665401408793,
      lastActivity: '2022-02-05T23:22:19.748Z',
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      id: '606f58cfd741af6659cf965a',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckn71rvd00tsilcs1alki6p3u-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 48,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1617745168961/lnfe7wdHX.png',
      autoGeneratedCover: '',
      brief:
        'TL;DR\nReact Native - Simply an Open Source framework (React) used to create applications that run on multiple devices (Android, Web, iOS ...) using JavaScript.\nReact Native Docs\nTo get started with React Native, it is advisable to have basic knowledg...',
      content:
        '<h2 id="tldr">TL;DR</h2>\n<p>React Native - Simply an Open Source framework (React) used to create applications that run on multiple devices (Android, Web, iOS ...) using JavaScript.</p>\n<p><a target="_blank" href="https://reactnative.dev/">React Native Docs</a></p>\n<p>To get started with React Native, it is advisable to have basic knowledge of javascript (es2015) and React components and props, just the basics of all these will set you ready.</p>\n<p>Native Components: Components that can be used in iOS and Android devices.</p>\n<p>Core Components: Ready to use React Native Components - </p>\n<p><a target="_blank" href="https://reactnative.dev/docs/intro-react-native-components">native and core components</a></p>\n<p><a target="_blank" href="https://reactnative.dev/docs/components-and-apis">List of core components</a></p>\n<h2 id="react-native-developer-environment">React Native Developer Environment</h2>\n<p><a target="_blank" href="https://reactnative.dev/docs/environment-setup">Docs</a></p>\n',
      contentMarkdown:
        '## TL;DR\n\nReact Native - Simply an Open Source framework (React) used to create applications that run on multiple devices (Android, Web, iOS ...) using JavaScript.\n\n[React Native Docs](https://reactnative.dev/)\n\nTo get started with React Native, it is advisable to have basic knowledge of javascript (es2015) and React components and props, just the basics of all these will set you ready.\n\nNative Components: Components that can be used in iOS and Android devices.\n\nCore Components: Ready to use React Native Components - \n\n[native and core components](https://reactnative.dev/docs/intro-react-native-components)\n\n[List of core components](https://reactnative.dev/docs/components-and-apis)\n\n## React Native Developer Environment\n\n[Docs](https://reactnative.dev/docs/environment-setup)\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['5f75f322b7a1d82bf9b34c6d', '56744722958ef13879b94f4d'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4639.5081,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35484', '5c090d96c2a9c2a674d35485'],
      totalReactions: 2,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '606d4b9e1ed1783ab063899e',
      title: 'What Is React Native, Building With React Native',
      subtitle: 'Today I Learnt: Using React Native (in a minute)',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'what-is-react-native-building-with-react-native',
      series: '5fe072ea1485f22e24b3776c',
      pollOptions: [],
      dateAdded: '2021-04-07T06:05:18.779Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckn71rvd00tsilcs1alki6p3u',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '606cd4e71ed1783ab063846e',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 1,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
      },
      viewsUpdatedOn: 1664892008537,
      uniqueReactions: ['5c090d96c2a9c2a674d35484', '5c090d96c2a9c2a674d35485'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
      },
      id: '606d4b9e1ed1783ab063899e',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckmylqe6n003sjgs1261c9pez-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 96,
      slugOverridden: true,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1617264736609/iorSk4l03.png',
      autoGeneratedCover: '',
      brief:
        "Do you have a Facebook Page and would love to promote it over your website or any site at all? \nA Like button is all you need. No technical procedures, just click and copy!\n\n\nLet's make one in few simple steps:\nGo to Facebook developer's site\nFaceboo...",
      content:
        '<p>Do you have a Facebook Page and would love to promote it over your website or any site at all? \nA Like button is all you need. No technical procedures, just click and copy!</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1617224774650/PbxPwT2yA.png" alt="Facebook like button" /></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1617224814999/tchzzb2BE.png" alt="Facebook like button" /></p>\n<p>Let\'s make one in few simple steps:</p>\n<h2 id="go-to-facebook-developers-site">Go to Facebook developer\'s site</h2>\n<p><a target="_blank" href="https://developers.facebook.com/">Facebook developer</a>:</p>\n<p>You will find all tools and stuff you could utilize provided by Facebook open source and APIs.</p>\n<p>Go to the <code>docs</code> page: https://developers.facebook.com/docs/  and hover over the docs section on the navigation bar at the top, and select the <code>Like Button - Social plugin</code>:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1617225156329/iupgyxaLB.png" alt="Screenshot from 2021-04-01 00-10-19.png" /></p>\n<p><a target="_blank" href="https://developers.facebook.com/docs/plugins/like-button">Like Button - Social Plugin</a></p>\n<h2 id="customize-your-pages-button">Customize your Page\'s button</h2>\n<p>While still on the current page, go to the section <strong><em>Get a Customized Like Button</em></strong></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1617263491900/tYeXyPxbi.png" alt="customizebtn.png" /></p>\n<p>Paste the Facebook page URL you\'d like to create the like button in the <code>URL to like</code> input.</p>\n<p>Select the layout of the button, action type, and button size from the options listed.</p>\n<h2 id="action-type">Action Type</h2>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1617263962338/XV_GSjLRb.png" alt="btnaction.png" /></p>\n<h2 id="button-layout">Button layout</h2>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1617263975723/f8K5DPj3I.png" alt="btnlayout.png" /></p>\n<h2 id="button-size">Button Size</h2>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1617263987032/_CcfZNNpF.png" alt="btnsize.png" /></p>\n<p>Once you are done with the selections, click on <code>Get the code</code>:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1617264046891/s_z5-O_DH.png" alt="getcode_ja.png" /></p>\n<h2 id="conclusion">Conclusion:</h2>\n<p>You can copy the code snippet into your website to start promoting your Facebook page:</p>\n<p>Check out the example below:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://codepen.io/chrisachinga/pen/KKagVZr">https://codepen.io/chrisachinga/pen/KKagVZr</a></div>\n<p>Written with 💜 by Chris Achinga</p>\n',
      contentMarkdown:
        "Do you have a Facebook Page and would love to promote it over your website or any site at all? \nA Like button is all you need. No technical procedures, just click and copy!\n\n\n![Facebook like button](https://cdn.hashnode.com/res/hashnode/image/upload/v1617224774650/PbxPwT2yA.png)\n\n![Facebook like button](https://cdn.hashnode.com/res/hashnode/image/upload/v1617224814999/tchzzb2BE.png)\n\n\nLet's make one in few simple steps:\n\n## Go to Facebook developer's site\n\n[Facebook developer](https://developers.facebook.com/):\n\nYou will find all tools and stuff you could utilize provided by Facebook open source and APIs.\n\nGo to the `docs` page: https://developers.facebook.com/docs/  and hover over the docs section on the navigation bar at the top, and select the `Like Button - Social plugin`:\n\n\n![Screenshot from 2021-04-01 00-10-19.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617225156329/iupgyxaLB.png)\n\n[Like Button - Social Plugin](https://developers.facebook.com/docs/plugins/like-button)\n\n## Customize your Page's button\n\nWhile still on the current page, go to the section ***Get a Customized Like Button***\n\n\n![customizebtn.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617263491900/tYeXyPxbi.png)\n\nPaste the Facebook page URL you'd like to create the like button in the `URL to like` input.\n\nSelect the layout of the button, action type, and button size from the options listed.\n\n## Action Type\n![btnaction.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617263962338/XV_GSjLRb.png)\n\n## Button layout\n![btnlayout.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617263975723/f8K5DPj3I.png)\n\n## Button Size\n![btnsize.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617263987032/_CcfZNNpF.png)\n\nOnce you are done with the selections, click on `Get the code`:\n\n![getcode_ja.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617264046891/s_z5-O_DH.png)\n\n## Conclusion:\n\nYou can copy the code snippet into your website to start promoting your Facebook page:\n\nCheck out the example below:\n\n%[https://codepen.io/chrisachinga/pen/KKagVZr]\n\nWritten with 💜 by Chris Achinga\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744721958ef13879b94da0', '5f058ab0c9763d47e2d2eedc'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4627.8588,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '606580ce5148b7211c1d7d2a',
      title: 'Facebook Page Like Button',
      subtitle: 'Generate a like button for your FB page in seconds',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'fb-page-like-btn',
      importedFromMedium: false,
      dateAdded: '2021-04-01T08:14:06.604Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckmylqe6n003sjgs1261c9pez',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '6064e1a3574933157db93574',
      hasPinnedTag: false,
      readTime: 1,
      __v: 0,
      viewsUpdatedOn: 1670853664657,
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '606580ce5148b7211c1d7d2a',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckmngmt0706p95ps17jam5zpq-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 51,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1616591029717/OICopNVRt.png',
      autoGeneratedCover: '',
      brief:
        'What are props?\nIn simple terms, they are data passed into components.\nWhen to use props?\nWhen building a react application, the UI is divided into smaller parts called Components.\nSome of these components are re-used in various pages or parts of the...',
      content:
        '<h2 id="what-are-props">What are props?</h2>\n<p>In simple terms, they are data passed into components.</p>\n<h2 id="when-to-use-props">When to use props?</h2>\n<p>When building a react application, the UI is divided into smaller parts called Components.</p>\n<p>Some of these components are re-used in various pages or parts of the application, of course with different data/messages/content. For this to be effective, props are used.</p>\n<p>For example, a simple react website with two pages, all share a common <code>&lt;Head&gt;</code> element:</p>\n<p>Home page</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1616589188385/rsv7s6Apu.png" alt="home-page.png" /></p>\n<p>About page\n<img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1616589198668/Ezttt6uY_.png" alt="about-page.png" /></p>\n<p>The two pages share a common <code>&lt;Header /&gt;</code> component:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> Header = <span class="hljs-function">(<span class="hljs-params">{ head, description }</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'starter-template text-center mt-5\'</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{head} Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'lead text-capitalize\'</span>&gt;</span>{description}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  )\n}\n</code></pre>\n<p>(Don\'t worry, I\'ll explain the code 😄 <a class="post-section-overview" href="#destructuring">here</a>)</p>\n<h2 id="creating-a-prop">Creating a Prop</h2>\n<p>Consider a sample component below:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> Header = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'starter-template text-center mt-5\'</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Home Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'lead text-capitalize\'</span>&gt;</span>Welcome To My Home Page<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  )\n}\n</code></pre>\n<p>The component can be re-used by simply importing it to the page/file and using <code>&lt;Header /&gt;</code>. The expected results will be:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1616589379857/0VcYE3IWQ.png" alt="header0.png" /></p>\n<p>Imagine having an application with more than one page, you\'d have to write a header component for every page. That shouldn\'t be the case. Use Props! 😄😄</p>\n<p>To be able to re-use the <code>&lt;h1&gt;Home Page&lt;/h1&gt;</code> and <code>&lt;p className=\'lead text-capitalize\'&gt;Welcome To My Home Page&lt;/p&gt;</code> with different content in each page, we\'ll simply pass in props:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> Header = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'starter-template text-center mt-5\'</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{props.title} Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'lead text-capitalize\'</span>&gt;</span>{props.description}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  )\n}\n</code></pre>\n<p>We declared <code>props</code> as an argument in the function components, and replaced the contents in the <code>&lt;h1&gt;</code> and <code>&lt;p&gt;</code> elements to use the props. The values replaced, i.e <code>{props.title}</code> and <code>{props.description}</code> will be used to pass in data dynamically wherever the <code>Header</code> component will be used.</p>\n<p>On the page where you\'ll be using the component, you\'ll simply add attributes to the component:\nFor example on the home page:</p>\n<pre><code class="lang-jsx">&lt;Header title=<span class="hljs-string">\'Home\'</span> description=<span class="hljs-string">\'This is the Home page\'</span> /&gt;\n</code></pre>\n<h3 id="destructuring">destructuring</h3>\n<p>The New es6 features allows destructuring of props in the components:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> Header = <span class="hljs-function">(<span class="hljs-params">{ title, description }</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'starter-template text-center mt-5\'</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{title} Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'lead text-capitalize\'</span>&gt;</span>{description}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  )\n}\n</code></pre>\n<h2 id="defualt-prop-values">Defualt Prop values:</h2>\n<p><a target="_blank" href="https://reactjs.org/docs/react-without-es6.html#declaring-default-props">Documentation - Declaring default props</a></p>\n<p>For some reason you may forget to pass in a prop value or something fishy happens in your application. You may want to set up a default prop value to cover up for that.</p>\n<p>To do that you simply add:</p>\n<pre><code class="lang-js">Header.defaultProps = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">\'Page Title\'</span>,\n  <span class="hljs-attr">description</span>: <span class="hljs-string">\'A defualt description\'</span>,\n}\n</code></pre>\n<p>This will ensure that your components always have data passed in incase something fishy happens.</p>\n<h2 id="props-typechecking">Props Typechecking</h2>\n<blockquote>\n<p>As your app grows, you can catch a lot of bugs with type-checking.</p>\n</blockquote>\n<p><a target="_blank" href="https://reactjs.org/docs/typechecking-with-proptypes.html">Documentations - Typechecking with prototypes</a></p>\n<p>To perform this, you have to import prop-type into your components.</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">\'prop-types\'</span>;\n</code></pre>\n<pre><code class="lang-js">Header.propTypes = {\n  <span class="hljs-attr">title</span>: PropTypes.string\n};\n</code></pre>\n<p>You can set a default data-type for a prop with the available options:</p>\n<pre><code class="lang-js"><span class="hljs-comment">// You can declare that a prop is a specific JS type. By default, these</span>\n  <span class="hljs-comment">// are all optional.</span>\n  <span class="hljs-attr">optionalArray</span>: PropTypes.array,\n  <span class="hljs-attr">optionalBool</span>: PropTypes.bool,\n  <span class="hljs-attr">optionalFunc</span>: PropTypes.func,\n  <span class="hljs-attr">optionalNumber</span>: PropTypes.number,\n  <span class="hljs-attr">optionalObject</span>: PropTypes.object,\n  <span class="hljs-attr">optionalString</span>: PropTypes.string,\n  <span class="hljs-attr">optionalSymbol</span>: PropTypes.symbol,\n\n  <span class="hljs-comment">// Anything that can be rendered: numbers, strings, elements or an array</span>\n  <span class="hljs-comment">// (or fragment) containing these types.</span>\n  <span class="hljs-attr">optionalNode</span>: PropTypes.node,\n\n  <span class="hljs-comment">// A React element.</span>\n  <span class="hljs-attr">optionalElement</span>: PropTypes.element,\n\n  <span class="hljs-comment">// A React element type (ie. MyComponent).</span>\n  <span class="hljs-attr">optionalElementType</span>: PropTypes.elementType,\n\n  <span class="hljs-comment">// You can also declare that a prop is an instance of a class. This uses</span>\n  <span class="hljs-comment">// JS\'s instanceof operator.</span>\n  <span class="hljs-attr">optionalMessage</span>: PropTypes.instanceOf(Message),\n\n  <span class="hljs-comment">// You can ensure that your prop is limited to specific values by treating</span>\n  <span class="hljs-comment">// it as an enum.</span>\n  <span class="hljs-attr">optionalEnum</span>: PropTypes.oneOf([<span class="hljs-string">\'News\'</span>, <span class="hljs-string">\'Photos\'</span>]),\n\n  <span class="hljs-comment">// An object that could be one of many types</span>\n  <span class="hljs-attr">optionalUnion</span>: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  <span class="hljs-comment">// An array of a certain type</span>\n  <span class="hljs-attr">optionalArrayOf</span>: PropTypes.arrayOf(PropTypes.number),\n\n  <span class="hljs-comment">// An object with property values of a certain type</span>\n  <span class="hljs-attr">optionalObjectOf</span>: PropTypes.objectOf(PropTypes.number),\n\n  <span class="hljs-comment">// An object taking on a particular shape</span>\n  <span class="hljs-attr">optionalObjectWithShape</span>: PropTypes.shape({\n    <span class="hljs-attr">color</span>: PropTypes.string,\n    <span class="hljs-attr">fontSize</span>: PropTypes.number\n  }),\n\n  <span class="hljs-comment">// An object with warnings on extra properties</span>\n  <span class="hljs-attr">optionalObjectWithStrictShape</span>: PropTypes.exact({\n    <span class="hljs-attr">name</span>: PropTypes.string,\n    <span class="hljs-attr">quantity</span>: PropTypes.number\n  }),   \n\n  <span class="hljs-comment">// You can chain any of the above with `isRequired` to make sure a warning</span>\n  <span class="hljs-comment">// is shown if the prop isn\'t provided.</span>\n  <span class="hljs-attr">requiredFunc</span>: PropTypes.func.isRequired,\n\n  <span class="hljs-comment">// A required value of any data type</span>\n  <span class="hljs-attr">requiredAny</span>: PropTypes.any.isRequired,\n</code></pre>\n<h3 id="thats-all">That\'s all</h3>\n<p>https://reactjs.org/docs/components-and-props.html</p>\n<p>https://reactjs.org/docs/typechecking-with-proptypes.html</p>\n<p>Written with 💜 by Chris Achinga</p>\n<p>#2Articles1Week</p>\n',
      contentMarkdown:
        "## What are props?\n\nIn simple terms, they are data passed into components.\n\n## When to use props?\n\nWhen building a react application, the UI is divided into smaller parts called Components.\n\nSome of these components are re-used in various pages or parts of the application, of course with different data/messages/content. For this to be effective, props are used.\n\nFor example, a simple react website with two pages, all share a common `<Head>` element:\n\nHome page\n\n![home-page.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1616589188385/rsv7s6Apu.png)\n\nAbout page\n![about-page.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1616589198668/Ezttt6uY_.png)\n\nThe two pages share a common `<Header />` component:\n\n```js\nconst Header = ({ head, description }) => {\n  return (\n    <>\n      <div className='starter-template text-center mt-5'>\n        <h1>{head} Page</h1>\n        <p className='lead text-capitalize'>{description}</p>\n      </div>\n    </>\n  )\n}\n```\n\n(Don't worry, I'll explain the code 😄 [here](#destructuring))\n\n## Creating a Prop\n\nConsider a sample component below:\n\n```js\nconst Header = () => {\n  return (\n    <>\n      <div className='starter-template text-center mt-5'>\n        <h1>Home Page</h1>\n        <p className='lead text-capitalize'>Welcome To My Home Page</p>\n      </div>\n    </>\n  )\n}\n```\n\nThe component can be re-used by simply importing it to the page/file and using `<Header />`. The expected results will be:\n\n![header0.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1616589379857/0VcYE3IWQ.png)\n\nImagine having an application with more than one page, you'd have to write a header component for every page. That shouldn't be the case. Use Props! 😄😄\n\nTo be able to re-use the `<h1>Home Page</h1>` and `<p className='lead text-capitalize'>Welcome To My Home Page</p>` with different content in each page, we'll simply pass in props:\n\n```js\nconst Header = (props) => {\n  return (\n    <>\n      <div className='starter-template text-center mt-5'>\n        <h1>{props.title} Page</h1>\n        <p className='lead text-capitalize'>{props.description}</p>\n      </div>\n    </>\n  )\n}\n```\n\nWe declared `props` as an argument in the function components, and replaced the contents in the `<h1>` and `<p>` elements to use the props. The values replaced, i.e `{props.title}` and `{props.description}` will be used to pass in data dynamically wherever the `Header` component will be used.\n\nOn the page where you'll be using the component, you'll simply add attributes to the component:\nFor example on the home page:\n\n```jsx\n<Header title='Home' description='This is the Home page' />\n```\n\n### destructuring\n\nThe New es6 features allows destructuring of props in the components:\n\n```js\nconst Header = ({ title, description }) => {\n  return (\n    <>\n      <div className='starter-template text-center mt-5'>\n        <h1>{title} Page</h1>\n        <p className='lead text-capitalize'>{description}</p>\n      </div>\n    </>\n  )\n}\n```\n\n## Defualt Prop values:\n\n[Documentation - Declaring default props](https://reactjs.org/docs/react-without-es6.html#declaring-default-props)\n\nFor some reason you may forget to pass in a prop value or something fishy happens in your application. You may want to set up a default prop value to cover up for that.\n\nTo do that you simply add:\n\n```js\nHeader.defaultProps = {\n  title: 'Page Title',\n  description: 'A defualt description',\n}\n```\n\nThis will ensure that your components always have data passed in incase something fishy happens.\n\n## Props Typechecking\n\n> As your app grows, you can catch a lot of bugs with type-checking.\n\n[Documentations - Typechecking with prototypes](https://reactjs.org/docs/typechecking-with-proptypes.html)\n\nTo perform this, you have to import prop-type into your components.\n\n```js\nimport PropTypes from 'prop-types';\n```\n\n```js\nHeader.propTypes = {\n  title: PropTypes.string\n};\n```\n\nYou can set a default data-type for a prop with the available options:\n\n```js\n// You can declare that a prop is a specific JS type. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // A React element type (ie. MyComponent).\n  optionalElementType: PropTypes.elementType,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // An object with warnings on extra properties\n  optionalObjectWithStrictShape: PropTypes.exact({\n    name: PropTypes.string,\n    quantity: PropTypes.number\n  }),   \n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A required value of any data type\n  requiredAny: PropTypes.any.isRequired,\n  ```\n\n### That's all\n\nhttps://reactjs.org/docs/components-and-props.html\n\nhttps://reactjs.org/docs/typechecking-with-proptypes.html\n\nWritten with 💜 by Chris Achinga\n\n#2Articles1Week\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5f058ab0c9763d47e2d2eedc',
        '56744723958ef13879b95434',
        '571c5374fc5b53a1ace37ce8',
        '5f2959166face9141b78fa82',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4612.8878,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '605b393147b0d2243d4ac507',
      title: 'Working with React Components + Props',
      subtitle: 'A summary of making your components simple and Better (React)',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'working-with-react-components-props',
      series: '5fe072ea1485f22e24b3776c',
      pollOptions: [],
      dateAdded: '2021-03-24T13:05:53.145Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckmngmt0706p95ps17jam5zpq',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '605b315047b0d2243d4ac42d',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 6,
      __v: 0,
      viewsUpdatedOn: 1671481863702,
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '605b393147b0d2243d4ac507',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckmm3i42r08ioo4s14t94f2qr-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 167,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1616507200759/754hkQbO6.png',
      autoGeneratedCover: '',
      brief:
        'A year ago, I was struggling with using APIs to creating a simple website. After some tutorials online I made a simple website that displays the statistics for covid-19. It is not a fancy or unique site, but it did its purpose, TEACH.\nWhich API did I...',
      content:
        '<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1616509550608/pizpKvBm1.png" alt="Screenshot from 2021-03-23 14-38-30.png" /></p>\n<p>A year ago, I was struggling with using APIs to creating a simple website. After some tutorials online I made a simple website that displays the statistics for covid-19. It is not a fancy or unique site, but it did its purpose, TEACH.</p>\n<h2 id="which-api-did-i-use">Which API did I use?</h2>\n<p>I used <a target="_blank" href="https://rapidapi.com/astsiatsko/api/coronavirus-monitor"><code>coronavirus-monitor</code></a> from <a target="_blank" href="https://rapidapi.com/">Rapid API platform</a>. The API returns an array of countries with average statistics on the number of total infections, deaths, number of people in critical conditions, and number of people recovered. (and many more)</p>\n<h2 id="how-i-used-the-api">How I Used The API ...</h2>\n<p>I used vanilla JS in the application. So to get the data from API, I used <code>FETCH</code> in JS.  Here are a few links to getting to know what Fetch is and how to use it:</p>\n<p>https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-fetch-api-to-get-data</p>\n<p>https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</p>\n<p>So I used two endpoints, one to get the general summary statistics and the other one to get all countries and their details.</p>\n<h4 id="summary">Summary</h4>\n<pre><code class="lang-js"><span class="hljs-comment">//  fetching data starts here ...</span>\nfetch(<span class="hljs-string">\'https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\'</span>, {\n  <span class="hljs-attr">method</span>: <span class="hljs-string">\'GET\'</span>,\n  <span class="hljs-attr">headers</span>: {\n    <span class="hljs-string">\'x-rapidapi-host\'</span>: <span class="hljs-string">\'coronavirus-monitor.p.rapidapi.com\'</span>,\n    <span class="hljs-string">\'x-rapidapi-key\'</span>: <span class="hljs-string">\'api_key\'</span>,\n  },\n})\n  .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span>\n    response.json().then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(data);\n    })\n  )\n  .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(err)\n  })\n</code></pre>\n<p>The code snippet above fetched data from the URL provided:</p>\n<pre><code class="lang-txt">https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\n</code></pre>\n<p>The Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers.</p>\n<h4 id="country-data">Country Data</h4>\n<pre><code class="lang-js"><span class="hljs-comment">//Fetching The Case by Country Data</span>\nfetch(\n  <span class="hljs-string">\'https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php\'</span>,\n  {\n    <span class="hljs-attr">method</span>: <span class="hljs-string">\'GET\'</span>,\n    <span class="hljs-attr">headers</span>: {\n      <span class="hljs-string">\'x-rapidapi-host\'</span>: <span class="hljs-string">\'coronavirus-monitor.p.rapidapi.com\'</span>,\n      <span class="hljs-string">\'x-rapidapi-key\'</span>: <span class="hljs-string">\'api_key\'</span>,\n    },\n  }\n)\n  .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span>\n    response.json().then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n      <span class="hljs-comment">// console.log(data)</span>\n      <span class="hljs-keyword">let</span> countries_stat = data.countries_stat\n      <span class="hljs-comment">//Getting all the country statistic using a loop</span>\n      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; countries_stat.length; i++) {\n        <span class="hljs-built_in">console</span>.log(countries_stat[i]);\n      }\n    })\n  )\n  .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(err)\n  })\n<span class="hljs-string">`</span>\n</code></pre>\n<p>Data is fetched from the URL:</p>\n<pre><code class="lang-txt">https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php\n</code></pre>\n<h2 id="displaying-data">Displaying Data:</h2>\n<p>To show data, all I did was play around with the DOM.</p>\n<p>At the top of my javascript file, notice how I grabbed various parts of the DOM that I later used. </p>\n<pre><code class="lang-js"><span class="hljs-keyword">let</span> new_cases = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'new_case\'</span>)\n<span class="hljs-keyword">let</span> new_death = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'new_death\'</span>)\n<span class="hljs-keyword">let</span> total_death = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'total_death\'</span>)\n<span class="hljs-keyword">let</span> total_recovered = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'total_recovered\'</span>)\n<span class="hljs-keyword">let</span> total_cases = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'total_cases\'</span>)\n<span class="hljs-keyword">let</span> table = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'countries_stat\'</span>)\n</code></pre>\n<p>An example of parsing the total number of cases reported into the HTML, you don\'t hard code the numbers in it, you let js do it for you. 😜</p>\n<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"total_cases"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n</code></pre>\n<h2 id="searching-for-a-single-country">Searching for a Single Country ..?</h2>\n<p>Since we getting details for all the countries, imagine looking for a single country in the table with more than 100 rows ... 😫😫😫</p>\n<p>I actually used w3schools for this feature, so I created a search functionality that begins filtering data immediately a user starts keying characters.</p>\n<p>The search input:</p>\n<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container m-3"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n              <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>\n              <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>\n              <span class="hljs-attr">id</span>=<span class="hljs-string">"myInput"</span>\n              <span class="hljs-attr">onkeyup</span>=<span class="hljs-string">"filterTable()"</span>\n              <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Search for a Country.."</span>\n              <span class="hljs-attr">title</span>=<span class="hljs-string">"Type in a name"</span>\n            /&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>The function:</p>\n<pre><code class="lang-js">\n<span class="hljs-keyword">const</span> filterTable = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">let</span> i, txtValue\n  <span class="hljs-keyword">const</span> input = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'myInput\'</span>)\n  <span class="hljs-keyword">const</span> filter = input.value.toUpperCase()\n  <span class="hljs-keyword">const</span> table = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'countries_stat\'</span>)\n  <span class="hljs-keyword">const</span> tr = table.getElementsByTagName(<span class="hljs-string">\'tr\'</span>)\n\n  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; tr.length; i++) {\n    <span class="hljs-keyword">let</span> td = tr[i].getElementsByTagName(<span class="hljs-string">\'td\'</span>)[<span class="hljs-number">0</span>]\n    <span class="hljs-keyword">if</span> (td) {\n      txtValue = td.textContent || td.innerText\n      <span class="hljs-keyword">if</span> (txtValue.toUpperCase().indexOf(filter) &gt; <span class="hljs-number">-1</span>) {\n        tr[i].style.display = <span class="hljs-string">\'\'</span>\n      } <span class="hljs-keyword">else</span> {\n        tr[i].style.display = <span class="hljs-string">\'none\'</span>\n      }\n    }\n  }\n}\n</code></pre>\n<p>That\'s it, that is how I built my first website using an API, it was almost a year ago. 👻</p>\n<p><a target="_blank" href="https://github.com/ChrisAchinga/covid19-stats">Source Code</a></p>\n<p><a target="_blank" href="https://rona19stats.netlify.app/">Live Preview</a></p>\n<h2 id="nb">NB:</h2>\n<h4 id="covid-19-affects-different-people-in-different-ways-most-infected-people-will-develop-mild-to-moderate-illness-and-recover-without-hospitalization">COVID-19 affects different people in different ways. Most infected people will develop mild to moderate illness and recover without hospitalization.</h4>\n<p>Most common symptoms:</p>\n<ul>\n<li>fever</li>\n<li>dry cough</li>\n<li>tiredness</li>\n</ul>\n<p>Less common symptoms:</p>\n<ul>\n<li>aches and pains</li>\n<li>sore throat</li>\n<li>diarrhea</li>\n<li>conjunctivitis</li>\n<li>headache</li>\n<li>loss of taste or smell</li>\n<li>a rash on the skin, or discoloration of fingers or toes</li>\n</ul>\n<p><a target="_blank" href="https://www.who.int/news-room/q-a-detail/q-a-coronaviruses#:~:text=symptoms">more on covid</a></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1616508152667/At00CxAPV.png" alt="Blue 7 Step Prevention Coronavirus Awareness Poster.png" /></p>\n<p>Written with 💜 by <a target="_blank" href="https://chrisdev.netlify.app/">Chris Achinga</a></p>\n<p>#2Articles1Week</p>\n',
      contentMarkdown:
        "\n![Screenshot from 2021-03-23 14-38-30.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1616509550608/pizpKvBm1.png)\n\nA year ago, I was struggling with using APIs to creating a simple website. After some tutorials online I made a simple website that displays the statistics for covid-19. It is not a fancy or unique site, but it did its purpose, TEACH.\n\n## Which API did I use?\n\nI used [`coronavirus-monitor`](https://rapidapi.com/astsiatsko/api/coronavirus-monitor) from [Rapid API platform](https://rapidapi.com/). The API returns an array of countries with average statistics on the number of total infections, deaths, number of people in critical conditions, and number of people recovered. (and many more)\n\n## How I Used The API ...\n\nI used vanilla JS in the application. So to get the data from API, I used `FETCH` in JS.  Here are a few links to getting to know what Fetch is and how to use it:\n\nhttps://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-fetch-api-to-get-data\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n\nSo I used two endpoints, one to get the general summary statistics and the other one to get all countries and their details.\n\n#### Summary\n\n```js\n//  fetching data starts here ...\nfetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php', {\n  method: 'GET',\n  headers: {\n    'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\n    'x-rapidapi-key': 'api_key',\n  },\n})\n  .then((response) =>\n    response.json().then((data) => {\n      console.log(data);\n    })\n  )\n  .catch((err) => {\n    console.log(err)\n  })\n```\n\nThe code snippet above fetched data from the URL provided:\n\n```txt\nhttps://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\n```\nThe Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers.\n\n#### Country Data\n\n```js\n//Fetching The Case by Country Data\nfetch(\n  'https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php',\n  {\n    method: 'GET',\n    headers: {\n      'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\n      'x-rapidapi-key': 'api_key',\n    },\n  }\n)\n  .then((response) =>\n    response.json().then((data) => {\n      // console.log(data)\n      let countries_stat = data.countries_stat\n      //Getting all the country statistic using a loop\n      for (let i = 0; i < countries_stat.length; i++) {\n        console.log(countries_stat[i]);\n      }\n    })\n  )\n  .catch((err) => {\n    console.log(err)\n  })\n````\n\nData is fetched from the URL:\n\n```txt\nhttps://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php\n```\n\n## Displaying Data:\n\nTo show data, all I did was play around with the DOM.\n\nAt the top of my javascript file, notice how I grabbed various parts of the DOM that I later used. \n\n```js\nlet new_cases = document.getElementById('new_case')\nlet new_death = document.getElementById('new_death')\nlet total_death = document.getElementById('total_death')\nlet total_recovered = document.getElementById('total_recovered')\nlet total_cases = document.getElementById('total_cases')\nlet table = document.getElementById('countries_stat')\n```\n\nAn example of parsing the total number of cases reported into the HTML, you don't hard code the numbers in it, you let js do it for you. 😜\n\n```html\n<p class=\"card-text\" id=\"total_cases\"></p>\n```\n\n## Searching for a Single Country ..?\n\nSince we getting details for all the countries, imagine looking for a single country in the table with more than 100 rows ... 😫😫😫\n\nI actually used w3schools for this feature, so I created a search functionality that begins filtering data immediately a user starts keying characters.\n\nThe search input:\n```html\n<div class=\"container m-3\">\n            <input\n              class=\"form-control\"\n              type=\"text\"\n              id=\"myInput\"\n              onkeyup=\"filterTable()\"\n              placeholder=\"Search for a Country..\"\n              title=\"Type in a name\"\n            />\n          </div>\n```\n\nThe function:\n\n```js\n\nconst filterTable = () => {\n  let i, txtValue\n  const input = document.getElementById('myInput')\n  const filter = input.value.toUpperCase()\n  const table = document.getElementById('countries_stat')\n  const tr = table.getElementsByTagName('tr')\n\n  for (i = 0; i < tr.length; i++) {\n    let td = tr[i].getElementsByTagName('td')[0]\n    if (td) {\n      txtValue = td.textContent || td.innerText\n      if (txtValue.toUpperCase().indexOf(filter) > -1) {\n        tr[i].style.display = ''\n      } else {\n        tr[i].style.display = 'none'\n      }\n    }\n  }\n}\n```\n\nThat's it, that is how I built my first website using an API, it was almost a year ago. 👻\n\n[Source Code](https://github.com/ChrisAchinga/covid19-stats)\n\n[Live Preview](https://rona19stats.netlify.app/)\n\n## NB:\n\n####  COVID-19 affects different people in different ways. Most infected people will develop mild to moderate illness and recover without hospitalization.\n\nMost common symptoms:\n\n- fever\n- dry cough\n- tiredness\n\nLess common symptoms:\n- aches and pains\n- sore throat\n- diarrhea\n- conjunctivitis\n- headache\n- loss of taste or smell\n- a rash on the skin, or discoloration of fingers or toes\n\n[more on covid](https://www.who.int/news-room/q-a-detail/q-a-coronaviruses#:~:text=symptoms)\n\n\n![Blue 7 Step Prevention Coronavirus Awareness Poster.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1616508152667/At00CxAPV.png)\n\nWritten with 💜 by [Chris Achinga](https://chrisdev.netlify.app/)\n\n#2Articles1Week\n\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95245',
        '569d22af46dfdb8479aa6921',
        '5f058ab0c9763d47e2d2eedc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4612.7443,
      responses: [
        {
          popularity: 4612.7381,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '605b1ede78c4742436d4f373',
          content:
            '<p>Amazing article as always <a class="user-mention" href="https://hashnode.com/@chrisdev">Chris Achinga</a>. Please can you share the learning resources you used to understand more about APIs.</p>\n',
          contentMarkdown:
            'Amazing article as always @[Chris Achinga](@chrisdev). Please can you share the learning resources you used to understand more about APIs.',
          author: '5e5e9c1f8c89a92316ce8b66',
          stamp: 'ckmncmdfu05o05is1156h7w5o',
          post: '6059f6d95771a2129446bf62',
          replies: [],
          dateAdded: '2021-03-24T11:13:34.603Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 49,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '6059f6d95771a2129446bf62',
      title: 'How I  made my first website using an API 😎',
      subtitle:
        'How I made and update my first ever web-app to use APIs to show COVID-19 Stats',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-i-made-my-first-website-using-an-api',
      importedFromMedium: false,
      dateAdded: '2021-03-23T14:10:33.031Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '605b1ede78c4742436d4f374',
          user: '5e5e9c1f8c89a92316ce8b66',
          stamp: 'ckmncmdfu05o05is1156h7w5o',
        },
      ],
      cuid: 'ckmm3i42r08ioo4s14t94f2qr',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '6059c3fd25962412b981874b',
      hasPinnedTag: false,
      readTime: 5,
      __v: 1,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d35486: 5,
        reaction_5c090d96c2a9c2a674d35488: 4,
        reaction_5d9dd859f31791c942dc5b52: 5,
        reaction_5c090d96c2a9c2a674d3548b: 5,
        reaction_567453d0b73d6a82ac8c5ab9: 5,
        reaction_5c090d96c2a9c2a674d35485: 5,
        reaction_5c090d96c2a9c2a674d3548a: 5,
        reaction_567453d0b73d6a82ac8c5abd: 5,
        reaction_567453d0b73d6a82ac8c5abc: 5,
      },
      dateUpdated: '2021-03-23T14:26:25.697Z',
      pendingPublicationApproval: false,
      lastActivity: '2021-03-24T11:13:34.645Z',
      viewsUpdatedOn: 1669208459118,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 5,
        reaction_5c090d96c2a9c2a674d35486: 5,
        reaction_5c090d96c2a9c2a674d35488: 4,
        reaction_5d9dd859f31791c942dc5b52: 5,
        reaction_5c090d96c2a9c2a674d3548b: 5,
        reaction_567453d0b73d6a82ac8c5ab9: 5,
        reaction_5c090d96c2a9c2a674d35485: 5,
        reaction_5c090d96c2a9c2a674d3548a: 5,
        reaction_567453d0b73d6a82ac8c5abd: 5,
        reaction_567453d0b73d6a82ac8c5abc: 5,
      },
      id: '6059f6d95771a2129446bf62',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckmkjg7e9000nyws1asfr8dkr-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 585,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1615465522749/alEUphxie.png',
      autoGeneratedCover: '',
      brief:
        "Growing as a Developer (Software/Web Developers) requires much effort and persistence. I can't stress enough how important Tech Communities contribute to one's growth.\nI made a list of some of the most known Tech communities in Kenya that you can joi...",
      content:
        '<p>Growing as a Developer (Software/Web Developers) requires much effort and persistence. I can\'t stress enough how important Tech Communities contribute to one\'s growth.</p>\n<p>I made a list of some of the most known Tech communities in Kenya that you can join and start growing your skills. The order of the list doesn\'t favor any community.</p>\n<h1 id="facebook-developers-circle">FaceBook Developers Circle:</h1>\n<blockquote>\n<p>Developer Circles are communities of innovators, where aspiring and experienced developers receive free tools to build new skills, grow ideas and boost their careers. - https://developers.facebook.com/developercircles/</p>\n</blockquote>\n<p>There is around 4 Developer Circles group in Kenya:</p>\n<h2 id="facebook-developer-circle-mombasahttpswwwfacebookcomgroupsdevcmombasa"><a target="_blank" href="https://www.facebook.com/groups/DevCMombasa">Facebook Developer Circle: Mombasa</a></h2>\n<blockquote>\n<p>This is a forum for developers in Mombasa and its surroundings who are interested in building on the Facebook platform to interact and collaborate with other developers who share similar interests.</p>\n</blockquote>\n<p>Joining the Community is simple, You join the Facebook Group and get ready for Motivations!</p>\n<p> <a target="_blank" href="https://www.facebook.com/groups/DevCMombasa/">Join Here</a></p>\n<h2 id="facebook-developer-circle-nairobihttpswwwfacebookcomgroupsdevcnairobi"><a target="_blank" href="https://www.facebook.com/groups/DevCNairobi">Facebook Developer Circle: Nairobi</a></h2>\n<blockquote>\n<p>This is a forum for developers in Nairobi and its surroundings who are interested in building on the Facebook platform to interact and collaborate with other developers who share similar interests.</p>\n</blockquote>\n<p>Joining the Community is simple, You join the Facebook Group and get ready for Motivations!</p>\n<p> <a target="_blank" href="https://www.facebook.com/groups/DevCNairobi">Join Here</a></p>\n<h2 id="facebook-developer-circle-eldorethttpswwwfacebookcomgroupsdevceldoret"><a target="_blank" href="https://www.facebook.com/groups/DevCEldoret">Facebook Developer Circle: Eldoret</a></h2>\n<blockquote>\n<p>This is a forum for developers in Eldoret and its surroundings who are interested in building on the Facebook platform to interact and collaborate other developers who share similar interests.</p>\n</blockquote>\n<p>Joining the Community is simple, You join the Facebook Group and get ready for Motivations!</p>\n<p> <a target="_blank" href="https://www.facebook.com/groups/DevCEldoret">Join Here</a></p>\n<h1 id="google-developer-groupsgdg">Google Developer Groups(GDG):</h1>\n<blockquote>\n<p>When you join a Google Developer Group, you\'ll have the opportunity to learn new skills in a variety of formats. You’ll also meet local developers virtually or in-person with similar interests in technology. The community prides itself on being an inclusive environment where everyone and anyone interested in tech - from beginner developers to experienced professionals - all are welcome to join. - https://developers.google.com/community/gdg</p>\n</blockquote>\n<p>There is a GDG for almost all cities and major towns in the world, you can find the  <a target="_blank" href="https://gdg.community.dev/chapters/">here</a>.</p>\n<h2 id="gdg-nairobi">GDG Nairobi</h2>\n<blockquote>\n<p>GDG Nairobi is open and volunteer geek community who create exciting projects and share experience about Google technologies with passion.</p>\n</blockquote>\n<p>What do we do?</p>\n<p>We create events, conferences, makerthons, hackathons, and workshops in Nairobi, Kenya, with the aim of spreading knowledge about technology and improving the country\'s development landscape. In addition, the vast majority of these events are free, because we believe that knowledge should not face a greater barrier than the interest of those who want to learn it.</p>\n<p>Joining is simple:</p>\n<p><a target="_blank" href="https://gdg.community.dev/gdg-nairobi/">Join Here</a></p>\n<h2 id="gdg-mombasa">GDG Mombasa</h2>\n<p>Joining is simple:</p>\n<p><a target="_blank" href="https://gdg.community.dev/gdg-mombasa/">Join Here</a></p>\n<h1 id="gdg-kisumu">GDG Kisumu</h1>\n<p>Joining is simple:</p>\n<p><a target="_blank" href="https://gdg.community.dev/gdg-kisumu/">Join Here</a></p>\n<h1 id="angular-kenya">Angular Kenya</h1>\n<p>It\'s a community that comprises mostly Angular Developers in Kenya.</p>\n<p>Follow them on Twitter for their events and activities from the community.</p>\n<p> <a target="_blank" href="https://twitter.com/angular_kenya">https://twitter.com/angular_kenya</a> </p>\n<h3 id="conclusion">Conclusion</h3>\n<p>There are many tech communities in Kenya, feel free to ask your colleagues or google.</p>\n<p>Written with 💜 by <a target="_blank" href="https://twitter.com/achinga_chris">Chris Achinga</a></p>\n<p>#2Articles1Week</p>\n',
      contentMarkdown:
        "Growing as a Developer (Software/Web Developers) requires much effort and persistence. I can't stress enough how important Tech Communities contribute to one's growth.\n\nI made a list of some of the most known Tech communities in Kenya that you can join and start growing your skills. The order of the list doesn't favor any community.\n\n# FaceBook Developers Circle:\n\n\n> \nDeveloper Circles are communities of innovators, where aspiring and experienced developers receive free tools to build new skills, grow ideas and boost their careers. - https://developers.facebook.com/developercircles/\n\nThere is around 4 Developer Circles group in Kenya:\n\n##  [Facebook Developer Circle: Mombasa](https://www.facebook.com/groups/DevCMombasa)\n\n\n> \nThis is a forum for developers in Mombasa and its surroundings who are interested in building on the Facebook platform to interact and collaborate with other developers who share similar interests.\n\nJoining the Community is simple, You join the Facebook Group and get ready for Motivations!\n\n [Join Here](https://www.facebook.com/groups/DevCMombasa/)\n\n##  [Facebook Developer Circle: Nairobi](https://www.facebook.com/groups/DevCNairobi)\n\n\n> \nThis is a forum for developers in Nairobi and its surroundings who are interested in building on the Facebook platform to interact and collaborate with other developers who share similar interests.\n\nJoining the Community is simple, You join the Facebook Group and get ready for Motivations!\n\n [Join Here](https://www.facebook.com/groups/DevCNairobi)\n\n##  [Facebook Developer Circle: Eldoret](https://www.facebook.com/groups/DevCEldoret) \n\n\n> \nThis is a forum for developers in Eldoret and its surroundings who are interested in building on the Facebook platform to interact and collaborate other developers who share similar interests.\n\nJoining the Community is simple, You join the Facebook Group and get ready for Motivations!\n\n [Join Here](https://www.facebook.com/groups/DevCEldoret)\n\n# Google Developer Groups(GDG):\n\n\n> \nWhen you join a Google Developer Group, you'll have the opportunity to learn new skills in a variety of formats. You’ll also meet local developers virtually or in-person with similar interests in technology. The community prides itself on being an inclusive environment where everyone and anyone interested in tech - from beginner developers to experienced professionals - all are welcome to join. - https://developers.google.com/community/gdg\n\nThere is a GDG for almost all cities and major towns in the world, you can find the  [here](https://gdg.community.dev/chapters/).\n\n## GDG Nairobi\n\n\n> \nGDG Nairobi is open and volunteer geek community who create exciting projects and share experience about Google technologies with passion.\n\nWhat do we do?\n\nWe create events, conferences, makerthons, hackathons, and workshops in Nairobi, Kenya, with the aim of spreading knowledge about technology and improving the country's development landscape. In addition, the vast majority of these events are free, because we believe that knowledge should not face a greater barrier than the interest of those who want to learn it.\n\nJoining is simple:\n\n[Join Here](https://gdg.community.dev/gdg-nairobi/)\n\n## GDG Mombasa\n\nJoining is simple:\n\n[Join Here](https://gdg.community.dev/gdg-mombasa/)\n\n# GDG Kisumu\n\nJoining is simple:\n\n[Join Here](https://gdg.community.dev/gdg-kisumu/)\n\n# Angular Kenya\n\nIt's a community that comprises mostly Angular Developers in Kenya.\n\nFollow them on Twitter for their events and activities from the community.\n\n [https://twitter.com/angular_kenya](https://twitter.com/angular_kenya) \n\n### Conclusion\n\nThere are many tech communities in Kenya, feel free to ask your colleagues or google.\n\nWritten with 💜 by [Chris Achinga](https://twitter.com/achinga_chris)\n\n#2Articles1Week\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744722958ef13879b9514c', '5f058ab0c9763d47e2d2eedc'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4610.3043,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
      ],
      totalReactions: 22,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '6058871529978b09f81d28ec',
      title: 'Tech Communities in Kenya',
      subtitle: 'A List of Tech Communities in Kenya',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'tech-communities-in-kenya',
      importedFromMedium: false,
      dateAdded: '2021-03-22T12:01:25.543Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckmkjg7e9000nyws1asfr8dkr',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '6033b8e572a689446db40486',
      hasPinnedTag: false,
      readTime: 4,
      __v: 1,
      dateUpdated: '2021-03-23T14:09:58.314Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_5c090d96c2a9c2a674d35484: 4,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      viewsUpdatedOn: 1671849061549,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_5c090d96c2a9c2a674d35484: 4,
        reaction_5c090d96c2a9c2a674d35485: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
      },
      id: '6058871529978b09f81d28ec',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckmf0e9x800mp8is1fm0i5y7v-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 28,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1616080188605/SCxGacudB.jpeg',
      autoGeneratedCover: '',
      brief:
        'Every Thursday, I post a question for The Dev Tech Question. This article is for the post on Thu March 18, 2021.\n\nQuestions:\nThe three questions asked were:\n\nWhat is a DOM?\nWhat is a CORS\nWhat is Big-O-Notation?\n\nAnswers:\nA great summarized answer co...',
      content:
        '<blockquote>\n<p>Every Thursday, I post a question for The Dev Tech Question. This article is for the post on <a target="_blank" href="https://www.facebook.com/groups/DevCMombasa/permalink/1377257025978943/"><code>Thu March 18, 2021</code></a>.</p>\n</blockquote>\n<h2 id="questions">Questions:</h2>\n<p>The three questions asked were:</p>\n<ol>\n<li>What is a DOM?</li>\n<li>What is a CORS</li>\n<li>What is Big-O-Notation?</li>\n</ol>\n<h2 id="answers">Answers:</h2>\n<p>A great summarized answer commented by one of the community members, <a target="_blank" href="https://www.facebook.com/groups/799116447126340/user/100009431717501/">Kimatia J Dan</a>:</p>\n<blockquote>\n<p>DOM is the document object model used to manipulate the events without necessarily refreshing the browser.\nCORS is cross-origin resource sharing which is a security mechanism that allows trusted requests from trusted apps to communicate with backend services.\nBig o notation is a measure of how an algorithm will perform in worst-case scenarios.</p>\n</blockquote>\n<h3 id="what-is-the-dom">What is the DOM?</h3>\n<h4 id="answer">Answer</h4>\n<p>The DOM (Document Object Model) is a cross-platform API that treats HTML and XML documents as a tree structure consisting of nodes. These nodes (such as elements and text nodes) are objects that can be programmatically manipulated and any visible changes made to them are reflected live in the document. In a browser, this API is available to JavaScript where DOM nodes can be manipulated to change their styles, contents, placement in the document, or interacted with through event listeners.</p>\n<h3 id="what-is-cors">What is CORS?</h3>\n<h4 id="answer">Answer</h4>\n<p>Cross-Origin Resource Sharing or CORS is a mechanism that uses additional HTTP headers to grant a browser permission to access resources from a server at an origin different from the website origin.</p>\n<p>An example of a cross-origin request is a web application served from <code>http://mydomain.com</code> that uses AJAX to make a request for <code>http://yourdomain.com</code>.</p>\n<p>For security reasons, browsers restrict cross-origin HTTP requests initiated by JavaScript. <code>XMLHttpRequest</code> and <code>fetch</code> follow the same-origin policy, meaning a web application using those APIs can only request HTTP resources from the same origin the application was accessed, unless the response from the other origin includes the correct CORS headers.</p>\n<h3 id="what-is-big-o-notation">What is Big O Notation?</h3>\n<h4 id="answer">Answer</h4>\n<p>Big O notation is used in Computer Science to describe the time complexity of an algorithm. The best algorithms will execute the fastest and have the simplest complexity.</p>\n<p>Algorithms don\'t always perform the same and may vary based on the data they are supplied. While in some cases they will execute quickly, in other cases they will execute slowly, even with the same number of elements to deal with.</p>\n<p>In these examples, the base time is 1 element = <code>1ms</code>.</p>\n<h5 id="o1">O(1)</h5>\n<pre><code class="lang-js">arr[arr.length - <span class="hljs-number">1</span>]\n</code></pre>\n<ul>\n<li>1000 elements = <code>1ms</code></li>\n</ul>\n<p>Constant time complexity. No matter how many elements the array has, it will theoretically take (excluding real-world variation) the same amount of time to execute.</p>\n<h5 id="on">O(N)</h5>\n<pre><code class="lang-js">arr.filter(fn)\n</code></pre>\n<ul>\n<li>1000 elements = <code>1000ms</code></li>\n</ul>\n<p>Linear time complexity. The execution time will increase linearly with the number of elements the array has. If the array has 1000 elements and the function takes 1ms to execute, 7000 elements will take 7ms to execute. This is because the function must iterate through all elements of the array before returning a result.</p>\n<h5 id="o1-n">O([1, N])</h5>\n<pre><code class="lang-js">arr.some(fn)\n</code></pre>\n<ul>\n<li>1000 elements = <code>1ms &lt;= x &lt;= 1000ms</code></li>\n</ul>\n<p>The execution time varies depending on the data supplied to the function, it may return very early or very late. The best case here is O(1) and the worst case is O(N).</p>\n<h5 id="onlogn">O(NlogN)</h5>\n<pre><code class="lang-js">arr.sort(fn)\n</code></pre>\n<ul>\n<li>1000 elements ~= <code>10000ms</code></li>\n</ul>\n<p>Browsers usually implement the quicksort algorithm for the <code>sort()</code> method and the average time complexity of quicksort is O(NlgN). This is very efficient for large collections.</p>\n<h5 id="on2">O(N^2)</h5>\n<pre><code class="lang-js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++) {\n    <span class="hljs-comment">// ...</span>\n  }\n}\n</code></pre>\n<ul>\n<li>1000 elements = <code>1000000ms</code></li>\n</ul>\n<p>The execution time rises quadratically with the number of elements. Usually the result of nesting loops.</p>\n<h5 id="on">O(N!)</h5>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> permutations = <span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> {\n  <span class="hljs-keyword">if</span> (arr.length &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> arr.length === <span class="hljs-number">2</span> ? [arr, [arr[<span class="hljs-number">1</span>], arr[<span class="hljs-number">0</span>]]] : arr\n  <span class="hljs-keyword">return</span> arr.reduce(\n    <span class="hljs-function">(<span class="hljs-params">acc, item, i</span>) =&gt;</span>\n      acc.concat(\n        permutations([...arr.slice(<span class="hljs-number">0</span>, i), ...arr.slice(i + <span class="hljs-number">1</span>)]).map(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> [\n          item,\n          ...val\n        ])\n      ),\n    []\n  )\n}\n</code></pre>\n<ul>\n<li>1000 elements = <code>Infinity</code> (practically) ms</li>\n</ul>\n<p>The execution time rises extremely fast with even just 1 addition to the array.</p>\n',
      contentMarkdown:
        "\n>Every Thursday, I post a question for The Dev Tech Question. This article is for the post on [`Thu March 18, 2021`](https://www.facebook.com/groups/DevCMombasa/permalink/1377257025978943/).\n\n## Questions:\n\nThe three questions asked were:\n\n1. What is a DOM?\n2. What is a CORS\n3. What is Big-O-Notation?\n\n## Answers:\n\nA great summarized answer commented by one of the community members, [Kimatia J Dan](https://www.facebook.com/groups/799116447126340/user/100009431717501/):\n\n>DOM is the document object model used to manipulate the events without necessarily refreshing the browser.\nCORS is cross-origin resource sharing which is a security mechanism that allows trusted requests from trusted apps to communicate with backend services.\nBig o notation is a measure of how an algorithm will perform in worst-case scenarios.\n\n### What is the DOM?\n\n#### Answer\n\nThe DOM (Document Object Model) is a cross-platform API that treats HTML and XML documents as a tree structure consisting of nodes. These nodes (such as elements and text nodes) are objects that can be programmatically manipulated and any visible changes made to them are reflected live in the document. In a browser, this API is available to JavaScript where DOM nodes can be manipulated to change their styles, contents, placement in the document, or interacted with through event listeners.\n\n### What is CORS?\n\n#### Answer\n\nCross-Origin Resource Sharing or CORS is a mechanism that uses additional HTTP headers to grant a browser permission to access resources from a server at an origin different from the website origin.\n\nAn example of a cross-origin request is a web application served from `http://mydomain.com` that uses AJAX to make a request for `http://yourdomain.com`.\n\nFor security reasons, browsers restrict cross-origin HTTP requests initiated by JavaScript. `XMLHttpRequest` and `fetch` follow the same-origin policy, meaning a web application using those APIs can only request HTTP resources from the same origin the application was accessed, unless the response from the other origin includes the correct CORS headers.\n\n### What is Big O Notation?\n\n#### Answer\n\nBig O notation is used in Computer Science to describe the time complexity of an algorithm. The best algorithms will execute the fastest and have the simplest complexity.\n\nAlgorithms don't always perform the same and may vary based on the data they are supplied. While in some cases they will execute quickly, in other cases they will execute slowly, even with the same number of elements to deal with.\n\nIn these examples, the base time is 1 element = `1ms`.\n\n##### O(1)\n\n```js\narr[arr.length - 1]\n```\n\n* 1000 elements = `1ms`\n\nConstant time complexity. No matter how many elements the array has, it will theoretically take (excluding real-world variation) the same amount of time to execute.\n\n##### O(N)\n\n```js\narr.filter(fn)\n```\n\n* 1000 elements = `1000ms`\n\nLinear time complexity. The execution time will increase linearly with the number of elements the array has. If the array has 1000 elements and the function takes 1ms to execute, 7000 elements will take 7ms to execute. This is because the function must iterate through all elements of the array before returning a result.\n\n##### O([1, N])\n\n```js\narr.some(fn)\n```\n\n* 1000 elements = `1ms <= x <= 1000ms`\n\nThe execution time varies depending on the data supplied to the function, it may return very early or very late. The best case here is O(1) and the worst case is O(N).\n\n##### O(NlogN)\n\n```js\narr.sort(fn)\n```\n\n* 1000 elements ~= `10000ms`\n\nBrowsers usually implement the quicksort algorithm for the `sort()` method and the average time complexity of quicksort is O(NlgN). This is very efficient for large collections.\n\n##### O(N^2)\n\n```js\nfor (let i = 0; i < arr.length; i++) {\n  for (let j = 0; j < arr.length; j++) {\n    // ...\n  }\n}\n```\n\n* 1000 elements = `1000000ms`\n\nThe execution time rises quadratically with the number of elements. Usually the result of nesting loops.\n\n##### O(N!)\n\n```js\nconst permutations = arr => {\n  if (arr.length <= 2) return arr.length === 2 ? [arr, [arr[1], arr[0]]] : arr\n  return arr.reduce(\n    (acc, item, i) =>\n      acc.concat(\n        permutations([...arr.slice(0, i), ...arr.slice(i + 1)]).map(val => [\n          item,\n          ...val\n        ])\n      ),\n    []\n  )\n}\n```\n\n* 1000 elements = `Infinity` (practically) ms\n\nThe execution time rises extremely fast with even just 1 addition to the array.",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95376',
        '5676154ae64b075af6ade54e',
        '56744721958ef13879b94a8d',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4601.5198,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60536d178899a615727e5dba',
      title: 'Dev Tech Question: What Are These Things?',
      type: 'story',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'dev-tech-question-what-are-these-things',
      cuid: 'ckmf0e9x800mp8is1fm0i5y7v',
      dateAdded: '2021-03-18T14:59:50.000Z',
      hasCustomDate: true,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      hasPinnedTag: false,
      readTime: 6,
      __v: 1,
      series: '5fbea03f08c16c34b89c453a',
      dateUpdated: '2021-03-18T15:12:47.608Z',
      pendingPublicationApproval: false,
      subtitle: 'What is a DOM, CORS, or Big-O-Notation?',
      viewsUpdatedOn: 1662723029834,
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '60536d178899a615727e5dba',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckmdi2l0j006yjps1cpi439eb-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 306,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1614610875460/LmAUur-eS.png',
      autoGeneratedCover: '',
      brief:
        "This is an update to the previous article I wrote on React & Bootstrap Starter Template\n\nWhy a Template?\nIt's because they save time.\nThe process of setting up a project can be always frustrating and it's always repetitive. That's why I have a templa...",
      content:
        '<blockquote>\n<p>This is an update to the previous article I wrote on <a target="_blank" href="https://chrisdev.hashnode.dev/react-and-bootstrap-starter-template">React &amp; Bootstrap Starter Template</a></p>\n</blockquote>\n<h2 id="why-a-template">Why a Template?</h2>\n<p>It\'s because they save time.</p>\n<p>The process of setting up a project can be always frustrating and it\'s always repetitive. That\'s why I have a template for almost every stack I do.</p>\n<h1 id="react-and-bootstrap">React &amp; Bootstrap</h1>\n<p>I love using Bootstrap because of the almost Zero configuration and the hustle of designing a responsive web layout is taken care of so I just focus on how a site would look.</p>\n<p><strong>Updates ...</strong></p>\n<p>I wrote a similar article and after some updates here and there, I made a few changes and decided to re-write the article, of course after updating my template.</p>\n<h2 id="components">Components:</h2>\n<p>I have 4 ready-to-use components:</p>\n<ol>\n<li><h3 id="meta">Meta</h3>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> { Helmet } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-helmet\'</span>\n\n<span class="hljs-keyword">const</span> Meta = <span class="hljs-function">(<span class="hljs-params">{ title }</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Helmet</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>{title}<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Helmet</span>&gt;</span></span>\n  )\n}\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Meta\n</code></pre>\n<p>This component imitates the <code>&lt;title&gt;</code> tag. I used <a target="_blank" href="https://www.npmjs.com/package/react-helmet"><code>react-helmet</code></a> to do that. This reusable React component will manage all of your changes to the document head.</p>\n</li>\n<li><h3 id="header">Header</h3>\n<p>The Header component is the one that appears right below the navigation bar on the template:</p>\n</li>\n</ol>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1615988266778/jEHiyGSRW.png" alt="heaader-1.png" />\n<img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1615988276863/qJ3KKR3Nj.png" alt="header-2.png" /></p>\n<pre><code class="lang-js">    <span class="hljs-keyword">import</span> { Container } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-bootstrap\'</span>\n    <span class="hljs-keyword">const</span> Header = <span class="hljs-function">(<span class="hljs-params">{ head, description }</span>) =&gt;</span> {\n      <span class="hljs-keyword">return</span> (\n        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'starter-template text-center mt-5\'</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{head} Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'lead text-capitalize\'</span>&gt;</span>{description}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span></span>\n      )\n    }\n    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Header\n</code></pre>\n<p>The header component is re-used in all pages, it takes in 2 props, title and description\nexample:</p>\n<pre><code> <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">head</span>=<span class="hljs-string">{pageTitle}</span> <span class="hljs-attr">description</span>=<span class="hljs-string">{pageDescription}</span> /&gt;</span>\n</code></pre><ol>\n<li><h3 id="menu">Menu</h3>\n<p>This is the navigation bar.</p>\n</li>\n</ol>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1615988484382/xdaVxnn8n.png" alt="MENU-RXT.png" /></p>\n<ol>\n<li><h3 id="footer">Footer</h3>\n<p>A normal footer component:</p>\n</li>\n</ol>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> Footer = <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> year = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear()\n      <span class="hljs-keyword">return</span> (\n        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'text-center text-capitalize\'</span>&gt;</span>\n            copyright react bootstrap starter <span class="hljs-symbol">&amp;copy;</span> {year}\n          <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>\n        <span class="hljs-tag">&lt;/&gt;</span></span>\n      )\n    }\n    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Footer\n</code></pre>\n<h2 id="pages">Pages</h2>\n<p>For the template, I used 2 sample pages: the landing page and about page.</p>\n<ol>\n<li>Home Page</li>\n<li>About Page</li>\n</ol>\n<h2 id="main-app">Main App</h2>\n<p>I used react-router-dom to set the two pages up.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1615988581053/4sICchbxs.png" alt="APP-RXT.png" /></p>\n<h2 id="download-and-installation">Download and Installation</h2>\n<p>To begin using this template, choose one of the following options to get started:</p>\n<p>Fork and clone the repository.</p>\n<p>Install the dependencies:</p>\n<pre><code class="lang-powershell-interactive">npm install\n</code></pre>\n<h2 id="usage">Usage</h2>\n<p>Start editing and customizing according to your needs.</p>\n<p>Run locally:</p>\n<pre><code class="lang-powershell-interactive">npm start\n</code></pre>\n<h4 id="the-end">The End!</h4>\n<p>The repo is open to suggestions and free to use:\n<a target="_blank" href="https://github.com/ChrisAchinga/react-bootstrap-starter">GitHub</a></p>\n<p>Written with ❤️ by <a target="_blank" href="https://linktr.ee/chrisdev">Chris achinga</a></p>\n',
      contentMarkdown:
        "\n\n> This is an update to the previous article I wrote on [React & Bootstrap Starter Template](https://chrisdev.hashnode.dev/react-and-bootstrap-starter-template)\n\n## Why a Template?\n\nIt's because they save time.\n\nThe process of setting up a project can be always frustrating and it's always repetitive. That's why I have a template for almost every stack I do.\n\n# React & Bootstrap\n\nI love using Bootstrap because of the almost Zero configuration and the hustle of designing a responsive web layout is taken care of so I just focus on how a site would look.\n\n**Updates ...**\n\nI wrote a similar article and after some updates here and there, I made a few changes and decided to re-write the article, of course after updating my template.\n\n## Components:\n\nI have 4 ready-to-use components:\n\n1.  ### Meta\n\n    ```js\n    import { Helmet } from 'react-helmet'\n\n    const Meta = ({ title }) => {\n      return (\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n      )\n    }\n    export default Meta\n    ```\n\n    This component imitates the `<title>` tag. I used [`react-helmet`](https://www.npmjs.com/package/react-helmet) to do that. This reusable React component will manage all of your changes to the document head.\n\n2.  ### Header\n\n    The Header component is the one that appears right below the navigation bar on the template:\n\n![heaader-1.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1615988266778/jEHiyGSRW.png)\n![header-2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1615988276863/qJ3KKR3Nj.png)\n\n\n```js\n    import { Container } from 'react-bootstrap'\n    const Header = ({ head, description }) => {\n      return (\n        <Container>\n          <div className='starter-template text-center mt-5'>\n            <h1>{head} Page</h1>\n            <p className='lead text-capitalize'>{description}</p>\n          </div>\n        </Container>\n      )\n    }\n    export default Header\n```\n\nThe header component is re-used in all pages, it takes in 2 props, title and description\nexample:\n\n```\n <Header head={pageTitle} description={pageDescription} />\n``` \n\n\n3.  ### Menu\n\n   This is the navigation bar.\n\n   \n![MENU-RXT.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1615988484382/xdaVxnn8n.png)\n\n4.  ### Footer\n\n    A normal footer component:\n\n```js\nconst Footer = () => {\n      const year = new Date().getFullYear()\n      return (\n        <>\n          <footer className='text-center text-capitalize'>\n            copyright react bootstrap starter &copy; {year}\n          </footer>\n        </>\n      )\n    }\n    export default Footer\n``` \n\n\n## Pages\n\nFor the template, I used 2 sample pages: the landing page and about page.\n\n1. Home Page\n2. About Page\n\n## Main App\n\nI used react-router-dom to set the two pages up.\n\n\n![APP-RXT.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1615988581053/4sICchbxs.png)\n\n\n## Download and Installation\n\nTo begin using this template, choose one of the following options to get started:\n\nFork and clone the repository.\n\nInstall the dependencies:\n\n```powershell-interactive\nnpm install\n```\n\n## Usage\n\nStart editing and customizing according to your needs.\n\nRun locally:\n\n```powershell-interactive\nnpm start\n```\n#### The End!\nThe repo is open to suggestions and free to use:\n[GitHub](https://github.com/ChrisAchinga/react-bootstrap-starter)\n\nWritten with ❤️ by [Chris achinga](https://linktr.ee/chrisdev)",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95434',
        '56c4cd6eedfec14f66f81d98',
        '56744721958ef13879b94be1',
        '56744721958ef13879b949bc',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4599.5046,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 10,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '605208abefc86d02c5388cd6',
      title: 'Creating a React & Bootstrap Template',
      subtitle: 'My react & bootstrap starter template',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'creating-a-react-and-bootstrap-template',
      importedFromMedium: false,
      dateAdded: '2021-03-17T13:48:27.103Z',
      hasCustomDate: false,
      stickCoverToBottom: false,
      series: '5fe072ea1485f22e24b3776c',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckmdi2l0j006yjps1cpi439eb',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '603d017ec8eb04017922d23b',
      hasPinnedTag: false,
      readTime: 4,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      viewsUpdatedOn: 1671499862393,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      id: '605208abefc86d02c5388cd6',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckllymg0x03jsr8s1bfxjfwem-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 89,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1614249044515/S5VzTMXpy.jpeg',
      autoGeneratedCover: '',
      brief:
        "As this is an appreciation post, I will be highlighting all the posts on the Dev Tech Question on my  Community's Facebook Group.\n\nThe Community\nI am a proud member of the  Facebook Developer Circle Mombasa. With great members who share valuable idea...",
      content:
        '<blockquote>\n<p>As this is an appreciation post, I will be highlighting all the posts on the Dev Tech Question on my  <a target="_blank" href="https://www.facebook.com/groups/DevCMombasa/">Community\'s Facebook Group.</a></p>\n</blockquote>\n<h1 id="the-community">The Community</h1>\n<p>I am a proud member of the  <a target="_blank" href="https://www.facebook.com/groups/DevCMombasa/">Facebook Developer Circle Mombasa</a>. With great members who share valuable ideas, opportunities, and various solutions to bugs and code-related issues.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1614250098599/1UBVXmB-g.jpeg" alt="group_dp.jpg" /></p>\n<h1 id="the-dev-tech-questions">The Dev Tech Questions</h1>\n<p>The program was  <a target="_blank" href="https://www.facebook.com/groups/DevCMombasa/permalink/1256139174757396/">officially introduced</a>  in October 2020 by one of the greatest leads,  <a target="_blank" href="https://www.facebook.com/groups/799116447126340/user/1105672396">Ingari A. Joan</a>.</p>\n<p><strong>I\'ll highlight a few posts I made for the Dev Tech Question below</strong>:</p>\n<h2 id="1-http-response-status-codes">1. HTTP response status codes</h2>\n<p><a target="_blank" href="https://www.facebook.com/groups/DevCMombasa/permalink/1279178819120098/">Question</a> </p>\n<p>When developing websites on applications that connect to the internet, it is useful to know when a request made has been responded to by a server. HTTP Response codes help us know the status of the requests made on our applications.</p>\n<p><a target="_blank" href="https://www.facebook.com/groups/DevCMombasa/permalink/1279730772398236/">Response</a></p>\n<p>I decided to write an  <a target="_blank" href="https://theboringblog.netlify.app/blog/http-response-status-codes/">article</a>  listing the most common status codes that one should like at least have an idea of what they mean.</p>\n<p>https://theboringblog.netlify.app/blog/http-response-status-codes/.</p>\n<h2 id="2-array-cardio-javascript">2. Array Cardio (JavaScript)</h2>\n<p><a target="_blank" href="https://www.facebook.com/groups/DevCMombasa/permalink/1260449354326378/">Question</a></p>\n<p>This one a test on various methods and operations one can perform with a given array.</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> students = [ \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Irene"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2015</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2019</span> }, \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Jamila"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2019</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2020</span> }, \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Swabra"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2018</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2022</span> }, \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Ali"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2000</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2007</span> }, \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Chris"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2001</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2006</span> }, \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Ken"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2020</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2024</span> }, \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Shantel"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2015</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2021</span> }, \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Martin"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2018</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2020</span> }, \n  { <span class="hljs-attr">name</span>: <span class="hljs-string">"Salma"</span>, <span class="hljs-attr">yearStarted</span>: <span class="hljs-number">2015</span>, <span class="hljs-attr">yearCompleted</span>: <span class="hljs-number">2019</span> },\n];\n</code></pre>\n<p>The two questions asked were:</p>\n<ul>\n<li>Filter the array to get students who started in 2015 (use .fiter)</li>\n<li>Sort the Students alphabetically (use .sort)</li>\n</ul>\n<p>Do you think you can solve the above question? </p>\n<p>Submit your answer on the Facebook Group or comment below!</p>\n<p>Join The  <a target="_blank" href="https://www.facebook.com/groups/DevCMombasa">Facebook Group</a>  for more fun and interactive activities from the community members.</p>\n',
      contentMarkdown:
        '> \nAs this is an appreciation post, I will be highlighting all the posts on the Dev Tech Question on my  [Community\'s Facebook Group.](https://www.facebook.com/groups/DevCMombasa/)\n\n# The Community\n\nI am a proud member of the  [Facebook Developer Circle Mombasa](https://www.facebook.com/groups/DevCMombasa/). With great members who share valuable ideas, opportunities, and various solutions to bugs and code-related issues.\n\n![group_dp.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1614250098599/1UBVXmB-g.jpeg)\n\n# The Dev Tech Questions\n\nThe program was  [officially introduced](https://www.facebook.com/groups/DevCMombasa/permalink/1256139174757396/)  in October 2020 by one of the greatest leads,  [Ingari A. Joan](https://www.facebook.com/groups/799116447126340/user/1105672396).\n\n**I\'ll highlight a few posts I made for the Dev Tech Question below**:\n\n## 1. HTTP response status codes\n\n[Question](https://www.facebook.com/groups/DevCMombasa/permalink/1279178819120098/) \n\nWhen developing websites on applications that connect to the internet, it is useful to know when a request made has been responded to by a server. HTTP Response codes help us know the status of the requests made on our applications.\n\n[Response](https://www.facebook.com/groups/DevCMombasa/permalink/1279730772398236/)\n\nI decided to write an  [article](https://theboringblog.netlify.app/blog/http-response-status-codes/)  listing the most common status codes that one should like at least have an idea of what they mean.\n\nhttps://theboringblog.netlify.app/blog/http-response-status-codes/.\n\n## 2. Array Cardio (JavaScript)\n\n[Question](https://www.facebook.com/groups/DevCMombasa/permalink/1260449354326378/)\n\nThis one a test on various methods and operations one can perform with a given array.\n\n```js\nconst students = [ \n  { name: "Irene", yearStarted: 2015, yearCompleted: 2019 }, \n  { name: "Jamila", yearStarted: 2019, yearCompleted: 2020 }, \n  { name: "Swabra", yearStarted: 2018, yearCompleted: 2022 }, \n  { name: "Ali", yearStarted: 2000, yearCompleted: 2007 }, \n  { name: "Chris", yearStarted: 2001, yearCompleted: 2006 }, \n  { name: "Ken", yearStarted: 2020, yearCompleted: 2024 }, \n  { name: "Shantel", yearStarted: 2015, yearCompleted: 2021 }, \n  { name: "Martin", yearStarted: 2018, yearCompleted: 2020 }, \n  { name: "Salma", yearStarted: 2015, yearCompleted: 2019 },\n];\n```\nThe two questions asked were:\n\n- Filter the array to get students who started in 2015 (use .fiter)\n- Sort the Students alphabetically (use .sort)\n\nDo you think you can solve the above question? \n\nSubmit your answer on the Facebook Group or comment below!\n\nJoin The  [Facebook Group](https://www.facebook.com/groups/DevCMombasa)  for more fun and interactive activities from the community members.\n\n\n\n\n\n\n\n\n\n\n\n\n\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744721958ef13879b94da0', '56744723958ef13879b952d7'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4563.499,
      responses: [
        {
          popularity: 4562.7632,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6038ce37e2f3b459e4e6010a',
          content: '<p>woooohooooo!!!! </p>\n<p>This is awesome Chris!!</p>\n',
          contentMarkdown: 'woooohooooo!!!! \n\nThis is awesome Chris!!',
          author: '5f94c81140346172a86c1f4b',
          stamp: 'cklm5p9f204p8r8s1dvucak9y',
          post: '60389fc6e2f3b459e4e5fc1e',
          replies: [],
          dateAdded: '2021-02-26T10:32:23.535Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35484',
      ],
      totalReactions: 10,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '60389fc6e2f3b459e4e5fc1e',
      title: 'Dev Tech Questions - Facebook Developer Circle: Mombasa',
      subtitle:
        'A Weekly post on Developer tech Questions on my Developer Community Facebook Group. (DevC Mombasa)',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'dev-tech-questions-facebook-developer-circle-mombasa',
      importedFromMedium: false,
      dateAdded: '2021-02-26T07:14:14.747Z',
      hasCustomDate: false,
      series: '5fbea03f08c16c34b89c453a',
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '6038ce37e2f3b459e4e6010b',
          user: '5f94c81140346172a86c1f4b',
          stamp: 'cklm5p9f204p8r8s1dvucak9y',
        },
      ],
      cuid: 'ckllymg0x03jsr8s1bfxjfwem',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '60377c57aece4e56c72f93b0',
      hasPinnedTag: false,
      readTime: 3,
      __v: 1,
      reactionToCountMap: {
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      lastActivity: '2021-02-26T10:32:23.564Z',
      viewsUpdatedOn: 1665765009280,
      uniqueReactions: [
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35484',
      ],
      reactionToCountMapUnique: {
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      id: '60389fc6e2f3b459e4e5fc1e',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cklaq7rox00117ns10aozcn6w-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 487,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1613640928112/2LQRUP48S.png',
      autoGeneratedCover: '',
      brief:
        "What Is Django \nDjango is a python web framework. It's used to developing full-stack web applications.\nDjango is my to-go framework before considering other options when it comes to working with full-stack projects,  either personal or commercial. We...",
      content:
        '<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1613229625968/Ji8qrMBF2.jpeg" alt="django.jpg" /></p>\n<p><strong>What Is Django</strong> </p>\n<p>Django is a python web framework. It\'s used to developing full-stack web applications.\nDjango is my to-go framework before considering other options when it comes to working with full-stack projects,  either personal or commercial. Well, there are other options to use like Express which is a great stack too.</p>\n<p><strong>What Should I know before using Django</strong></p>\n<p>Django is a python framework, so this goes without saying that you need to know some bit of python basics and syntax before hitting the road. But as some prefer, learning as you go, Django does give too many constraints with the option too.</p>\n<p><strong>What to do when getting errors/bugs</strong></p>\n<p>Well getting a bug or a blocker is a common encounter when using any other tool or language/framework. Fortunately, Django has a large community to help you through. For starters never stop Googling. Stack Overflow is a great option too.  <a target="_blank" href="https://groups.google.com/forum/#!forum/django-users">Django forum on Google Groups</a>, <a target="_blank" href="https://github.com/django">Github issues</a>,  and many more. Just  <a target="_blank" href="https://www.google.com/">Google</a>  it LOL!</p>\n<h3 id="lets-code">Let\'s Code</h3>\n<p>Let\'s jump into setting up a Django development environment.</p>\n<p><strong>Virtual Environment.</strong>\nWhile it is a recommended convection to create a virtual environment, it is not a must, but it\'s a good developer practice. I personally use virtual environments whenever I\'m working with Django.</p>\n<p>I use python <code>venv</code> and that\'s what I\'ll use throughout the article, feel free to explore other available options.</p>\n<p><strong>What To Install</strong>\nBe sure to have installed Python and PIP on your local machine/laptop/desktop</p>\n<p><strong>Setting up a Python venv</strong>\nRead in-depth explanation from official <a target="_blank" href="https://docs.python.org/3/library/venv.html"> python documentation</a> </p>\n<p>Let\' setup the virtual environment on our local machines:</p>\n<ul>\n<li><p><a target="_blank" href="https://www.liquidweb.com/kb/how-to-setup-a-python-virtual-environment-on-windows-10/">Windows - Liquid web</a></p>\n</li>\n<li><p><a target="_blank" href="https://www.geeksforgeeks.org/creating-python-virtual-environment-windows-linux/">Windows  - Geeks for Geeks</a></p>\n</li>\n</ul>\n<p>In my environment(Ubuntu/Linux) , I\'ll open the terminal and execute the command:</p>\n<pre><code class="lang-shell">python3 -m venv django-setup\n</code></pre>\n<p>Creating a virtual Environment\n<img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1613229845480/1A9mc4fL7.png" alt="create_environment.png" />\nExplanation:</p>\n<p><code>python3 -m venv django-setup</code>:  the \'<em>django-setup</em>\' is the name of the folder or the project folder.</p>\n<p>After creating that, you move into the newly created directory to activate the environment.</p>\n<pre><code class="lang-shell">cd django-setup\nsource bin/activate\n</code></pre>\n<p>The <code>\'source bin/activate\'</code> is for activating the virtual environment, on windows you use: <code>\'source Scripts\\activate\'</code></p>\n<p>Activating Virtual environment\n<img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1613229916010/kfU6pfHWV.png" alt="activate_env.png" /></p>\n<p>After that, the terminal current pathname will start the parent name in brackets, which shows that the environment is activated.</p>\n<p>I usually run \'pip3 freeze\' in the environment just to confirm that there is nothing installed prior to my knowledge.</p>\n<p>If the command returns nothing, then It\'s good to go.</p>\n<p>I used pip3 because I\'m using python version 3, pip (for python version 2) also works as well.</p>\n<h2 id="installing-django">Installing Django</h2>\n<p><a target="_blank" href="https://docs.djangoproject.com/en/3.1/intro/install/#install-django">Official docs</a>\nIn your activated environment, let\'s install Django. \nIt\'s simple, run the script:</p>\n<pre><code class="lang-shell">pip3 install django\n</code></pre>\n<p>or </p>\n<pre><code class="lang-shell">pip install django\n</code></pre>\n<p>That\'s it Django is installed and ready to use.</p>\n<p>To confirm the installed packages, use the command:</p>\n<pre><code class="lang-shell">pip3 freeze\n</code></pre>\n<p>The output will display the installed packages and their versions respectively</p>\n<pre><code class="lang-shell">asgiref==3.3.1\nDjango==3.1.6\npytz==2021.1\nsqlparse==0.4.1\n</code></pre>\n<h1 id="starting-django-project">Starting Django Project</h1>\n<p>While still on the activated environment on your terminal/cmd, you will initialize a Django project by using the following commands.</p>\n<pre><code class="lang-shell">django-admin startproject setup\n</code></pre>\n<p><strong>Explanation</strong></p>\n<pre><code class="lang-shell">django-admin startproject {project-name}\n</code></pre>\n<p>Learn more about the commands used in <a target="_blank" href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#available-commands">Django CLI</a>.</p>\n<p>Change the working directory into the new folder created, and open it using your preferred text editor.</p>\n<pre><code class="lang-shell">cd setup\n</code></pre>\n<p>Notice Django project structure:</p>\n<pre><code class="lang-shell">├── manage.py\n└── setup\n    ├── asgi.py\n    ├── __init__.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre>\n<h2 id="explanation">Explanation:</h2>\n<ul>\n<li><p>The outer setup/ root directory is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.</p>\n</li>\n<li><p><code>manage.py</code>: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about <code>manage.py</code> in <code>django-admin</code> and <code>manage.py</code>.</p>\n</li>\n<li><p>The inner <code>setup/</code> directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. setup.urls).</p>\n</li>\n<li><p><code>setup/__init__.py</code>: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.</p>\n</li>\n<li><p><code>setup/settings.py</code>: Settings/configuration for this Django project. Django settings will tell you all about how settings work.</p>\n</li>\n<li><p><code>setup/urls.py</code>: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.</p>\n</li>\n<li><p><code>setup/asgi.py</code>: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.</p>\n</li>\n<li><p><code>setup/wsgi.py</code>: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.</p>\n</li>\n</ul>\n<p>Source: </p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://docs.djangoproject.com/en/3.1/intro/tutorial01/">https://docs.djangoproject.com/en/3.1/intro/tutorial01/</a></div>\n<p>Running the server:</p>\n<p>To test if the project was correctly installed, we\'ll have to run the server to confirm:</p>\n<pre><code class="lang-shell">python3 manage.py runserver\n</code></pre>\n<p>or </p>\n<pre><code class="lang-shell">python manage.py runserver\n</code></pre>\n<p>or </p>\n<pre><code class="lang-shell">./manage.py runserver\n</code></pre>\n<p>The server is running on port 8000. Head over to localhost:8000 to confirm.</p>\n<blockquote>\n<p>After running the command, you\'ll see some warnings in RED, that\'s nothing to worry about, simply run <code>python3 manage.py migrate</code> to get clear the warnings.</p>\n</blockquote>\n<h2 id="starting-an-application">Starting an Application</h2>\n<p>In the Django folder structure, you can have applications defined inside a project.\nIt is in an application where you define the Models (Database), Views (Templates), and routes.\nTo create an application, we use the command below:</p>\n<pre><code class="lang-shell">python3 manage.py startapp app\n</code></pre>\n<p><strong>Explanation</strong>: After the <code>startapp</code> keyword, use the name of the app you desire.</p>\n<pre><code class="lang-shell">python3 manage.py startapp {name}\n</code></pre>\n<p>A new folder with the app name will be created with the following structure:</p>\n<pre><code class="lang-shell">├── app\n│   ├── admin.py\n│   ├── apps.py\n│   ├── __init__.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n</code></pre>\n<p><strong>App Structure Explanation</strong></p>\n<p><code>admin.py</code>: Registering your models here for them to be added and customized on the Django admin dashboard</p>\n<p><code>apps.py:</code> Contains the app configuration code</p>\n<p><code>models.py</code>: Define your models here. These are the tables used for storing data and defining their relations</p>\n<p><code>tests.py</code>: Writing tests for the app</p>\n<p><code>views.py</code>: Defining data to be rendered on the templates</p>\n<h2 id="hello-world">Hello World!</h2>\n<p>Let\'s create our first page that prints out the legendary <strong>Hello World!</strong>.\nTo do that, I love following a 3-Step process:</p>\n<p><code>template =&gt; view =&gt; URL</code></p>\n<p>This is simply creating the HTML file, then defining the view (what to be rendered on the HTML file), and defining the path/URL to access the page.</p>\n<p>But first, we need to register our app to the main project.\nOpen up <code>setup/settings.py</code> and look for the application definition part:</p>\n<pre><code class="lang-python"><span class="hljs-comment"># Application definition</span>\n\nINSTALLED_APPS = [\n    <span class="hljs-string">\'django.contrib.admin\'</span>,\n    <span class="hljs-string">\'django.contrib.auth\'</span>,\n    <span class="hljs-string">\'django.contrib.contenttypes\'</span>,\n    <span class="hljs-string">\'django.contrib.sessions\'</span>,\n    <span class="hljs-string">\'django.contrib.messages\'</span>,\n    <span class="hljs-string">\'django.contrib.staticfiles\'</span>,\n]\n</code></pre>\n<p>We will configure the created app in a simple step:</p>\n<p>adding the following inside the INSTALLED_APPS list</p>\n<pre><code class="lang-python"><span class="hljs-string">\'app\'</span>,\n</code></pre>\n<pre><code class="lang-python"><span class="hljs-comment"># Application definition</span>\n\nINSTALLED_APPS = [\n    <span class="hljs-string">\'django.contrib.admin\'</span>,\n    <span class="hljs-string">\'django.contrib.auth\'</span>,\n    <span class="hljs-string">\'django.contrib.contenttypes\'</span>,\n    <span class="hljs-string">\'django.contrib.sessions\'</span>,\n    <span class="hljs-string">\'django.contrib.messages\'</span>,\n    <span class="hljs-string">\'django.contrib.staticfiles\'</span>,\n\n    <span class="hljs-comment"># My Apps</span>\n    <span class="hljs-string">\'app\'</span>,\n]\n</code></pre>\n<h3 id="step-1-creating-a-template">Step 1: Creating A Template</h3>\n<p>inside the app directory, create a new folder <code>templates</code>. </p>\n<blockquote>\n<p><strong>Note</strong> that in the newer versions of Django, no configurations for the template files are needed.</p>\n</blockquote>\n<p>Inside the template folder, create a new HTML file, I\'ll name mine <code>index.html</code>. </p>\n<p>Go ahead and add simple codes that display anything, or copy the one below:</p>\n<pre><code class="lang-HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Django-Setup<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>HELLO WORLD!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<h3 id="step-2-defining-a-view">Step 2: Defining a View</h3>\n<p>For the template to be rendered on a page, we\'ll have to create views for it.</p>\n<blockquote>\n<p>A view function, or view for short, is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image . . . or anything, really. - -Documentation, Django</p>\n</blockquote>\n<p>Open the <code>views.py</code> file inside your app\'s folder and add the following code:</p>\n<pre><code class="lang-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">HelloWorld</span>(<span class="hljs-params">request</span>):</span>\n    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">\'index.html\'</span>)\n</code></pre>\n<p><strong>Explanation</strong>:</p>\n<p>The code above is a simple python function, that returns the HTML file as a response after a request has been called.</p>\n<p>The <code>views.py</code> file should be:</p>\n<pre><code class="lang-python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render\n\n<span class="hljs-comment"># Create your views here.</span>\n<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">HelloWorld</span>(<span class="hljs-params">request</span>):</span>\n    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">\'index.html\'</span>)\n</code></pre>\n<p>That\'s it.</p>\n<h3 id="step-3-defining-urls">Step 3: Defining URLs</h3>\n<p>There are two ways to define URLs: </p>\n<ol>\n<li><p>one is to use the <code>urls.py</code> file in the projects config files: i.e <code>setup/urls.py</code> </p>\n</li>\n<li><p>create a <code>urls.py</code> inside your app.</p>\n</li>\n</ol>\n<p>For the sake of the tutorial, I\'ll use the second option but I will explain both.</p>\n<h4 id="option-1-root-project-url">Option 1 (root project url):</h4>\n<p>On the project folder, open up the <code>urls.py</code>, (<code>setup/urls.py</code>).</p>\n<pre><code class="lang-python"><span class="hljs-string">"""setup URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/3.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path(\'\', views.home, name=\'home\')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path(\'\', Home.as_view(), name=\'home\')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path(\'blog/\', include(\'blog.urls\'))\n"""</span>\n<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin\n<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path\n\nurlpatterns = [\n    path(<span class="hljs-string">\'admin/\'</span>, admin.site.urls),\n]\n</code></pre>\n<p>We will define our paths inside the urlpatterns list:</p>\n<pre><code class="lang-python">urlpatterns = [\n    <span class="hljs-comment"># add path here</span>\n]\n</code></pre>\n<p>The syntax we\'ll use:</p>\n<p><code>path(\'{define path}\', define view, URL name)</code></p>\n<p>First, we import our views at the top of URL file:</p>\n<pre><code class="lang-python"><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> views\n</code></pre>\n<p>The code simply imports the <code>views</code> module from the app folder.</p>\n<p>After that we define the path:</p>\n<pre><code class="lang-python">path(<span class="hljs-string">\'hello/\'</span>, views.HelloWorld, name=<span class="hljs-string">\'hello\'</span>),\n</code></pre>\n<p>Good to Go!</p>\n<p>&gt;\nEnsure the server is still running (for some reason the server may or may not have stopped running).</p>\n<p>Open your browser and head over to http://localhost:8000/hello/ and see the HELLO WORLD!</p>\n<h4 id="option-2-app-folder-url">Option 2 (app folder URL):</h4>\n<p>This is the most used method, it simply involves creating a <code>urls.py</code> inside the <code>app</code> folder.\nLet\'s get started:</p>\n<p>Inside the app folder, create a new file: <code>urls.py</code> and add the following:</p>\n<pre><code class="lang-python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path\n<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views\n\nurlpatterns = [\n    path(<span class="hljs-string">\'hello/\'</span>, views.HelloWorld, name=<span class="hljs-string">\'hello\'</span>),\n]\n</code></pre>\n<p>Notice how we import our views: (all in the same folder)</p>\n<pre><code class="lang-python"><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views\n</code></pre>\n<p>The next step is to add the new urls.py in our app folder to the root URLs file. (<code>setup/urls.py</code>).</p>\n<p><code>setup/urls.py</code></p>\n<pre><code class="lang-python"><span class="hljs-string">"""setup URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/3.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path(\'\', views.home, name=\'home\')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path(\'\', Home.as_view(), name=\'home\')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path(\'blog/\', include(\'blog.urls\'))\n"""</span>\n<span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin\n<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include\n\nurlpatterns = [\n    path(<span class="hljs-string">\'admin/\'</span>, admin.site.urls),\n    path(<span class="hljs-string">\'\'</span>, include(<span class="hljs-string">\'app.urls\'</span>)),\n]\n</code></pre>\n<p>We added a new import, to include the URLs from the app folder.</p>\n<pre><code class="lang-python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include\n</code></pre>\n<p>Ensure the server is running and then head over to http://localhost:8000/hello/ on your browser.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1618814494539/-EQ6m1DFw.png" alt="hello.png" /></p>\n<p>There it is, you have just set up a Django project. This just the beginning of a wonderful journey.</p>\n<h2 id="adding-your-project-to-github">Adding Your Project to GitHub</h2>\n<p>It is a good practice to use version control in any of your projects, I prefer GitHub. So I\'ll take you through a crash to upload your Django to GitHub.</p>\n<p>Learn how to configure git and GitHub from the article below:</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://chrisdev.hashnode.dev/git-and-github-installation-and-configuration">https://chrisdev.hashnode.dev/git-and-github-installation-and-configuration</a></div>\n<h3 id="creating-a-github-repository">Creating A GitHub Repository:</h3>\n<p>Creating a GitHub repository is quite easy.</p>\n<p><a target="_blank" href="https://github.com/new">https://github.com/new</a> </p>\n<p>Go ahead and fill in the repo name and click on the <code>Create repository</code> green button.</p>\n<h3 id="adding-a-gitignore-file">Adding a .gitignore file</h3>\n<p>When using git and GitHub, there are some files that aren\'t recommended to be uploaded because of environments and security features.</p>\n<p>The same aplies to Django, some files like the database files shouldn\'t be uploaded. To do that, create a new file, <code>.gitignore</code> in the root folder.</p>\n<p>After that, head over to https://www.gitignore.io/, and search for \'django\', and copy the code, or use the code snippet below:</p>\n<div class="gist-block embed-wrapper" data-gist-show-loading="false" data-id="42a8b68b5df9bb816365d2893b406f23"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a href="https://gist.github.com/ChrisAchinga/42a8b68b5df9bb816365d2893b406f23" class="embed-card">https://gist.github.com/ChrisAchinga/42a8b68b5df9bb816365d2893b406f23</a></div><h3 id="initializing-git">Initializing git</h3>\n<p>Head back to the terminal where the Django project is open, and initialize a git project. </p>\n<p>To do that simply use:</p>\n<pre><code class="lang-shell">git init\n</code></pre>\n<p>After that, the output (an example is shown below), shows that the git repository is already initialized.</p>\n<pre><code class="lang-shell">Initialized empty Git repository in /home/chrisdev/code/django/django-setup/setup/.git/\n</code></pre>\n<p>We will need to commit the files to git, using a few simple steps.</p>\n<p>While still on the project\'s terminal/cmd directory, run the commands below:</p>\n<pre><code class="lang-shell">git add .\ngit commit -m \'initial django-setup\'\n</code></pre>\n<p><strong>Explanation</strong> - <code>git add</code></p>\n<blockquote>\n<p>This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options, it can also be used to add content with only part of the changes made to the working tree files applied or remove paths that do not exist in the working tree anymore</p>\n</blockquote>\n<p>Source</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://git-scm.com/docs/git-add">https://git-scm.com/docs/git-add</a></div>\n<p><strong>Explanation</strong> - <code>git commit</code></p>\n<blockquote>\n<p>Create a new commit containing the current contents of the index and the given log message describing the changes</p>\n</blockquote>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://git-scm.com/docs/git-commit">https://git-scm.com/docs/git-commit</a></div>\n<p>After that, head over to the GitHub page where you just created the repo, there is a card title</p>\n<p><strong>Quick setup — if you’ve done this kind of thing before</strong> </p>\n<p>with various options on how to upload or connect your project files, I will use the second option <strong>…or push an existing repository from the command line</strong>:</p>\n<pre><code class="lang-shell">git remote add origin https://github.com/sryderdev/django-setup.git\ngit branch -M main\ngit push -u origin main\n</code></pre>\n<p>Copy and paste the code from your end on the terminal/cmd.</p>\n<p>And that\'s it your project is now on GitHub...</p>\n<p>The next article will be on how to set up static files to add styling and functionalities to the templates we created.</p>\n<p>For referral, the repo can be found in:</p>\n<p>https://github.com/ChrisAchinga/django-demo/tree/starting-django-project</p>\n<p>Reach out via <a target="_blank" href="https://twitter.com/achinga_chris">tWittEr</a>\nPeace.</p>\n',
      contentMarkdown:
        "\n![django.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1613229625968/Ji8qrMBF2.jpeg)\n\n**What Is Django** \n\nDjango is a python web framework. It's used to developing full-stack web applications.\nDjango is my to-go framework before considering other options when it comes to working with full-stack projects,  either personal or commercial. Well, there are other options to use like Express which is a great stack too.\n\n**What Should I know before using Django**\n\nDjango is a python framework, so this goes without saying that you need to know some bit of python basics and syntax before hitting the road. But as some prefer, learning as you go, Django does give too many constraints with the option too.\n\n**What to do when getting errors/bugs**\n\nWell getting a bug or a blocker is a common encounter when using any other tool or language/framework. Fortunately, Django has a large community to help you through. For starters never stop Googling. Stack Overflow is a great option too.  [Django forum on Google Groups](https://groups.google.com/forum/#!forum/django-users), [Github issues](https://github.com/django),  and many more. Just  [Google](https://www.google.com/)  it LOL!\n\n### Let's Code\nLet's jump into setting up a Django development environment.\n\n\n**Virtual Environment.**\nWhile it is a recommended convection to create a virtual environment, it is not a must, but it's a good developer practice. I personally use virtual environments whenever I'm working with Django.\n\nI use python `venv` and that's what I'll use throughout the article, feel free to explore other available options.\n\n**What To Install**\nBe sure to have installed Python and PIP on your local machine/laptop/desktop\n\n**Setting up a Python venv**\nRead in-depth explanation from official [ python documentation](https://docs.python.org/3/library/venv.html) \n\nLet' setup the virtual environment on our local machines:\n \n-  [Windows - Liquid web](https://www.liquidweb.com/kb/how-to-setup-a-python-virtual-environment-on-windows-10/)\n\n- [Windows  - Geeks for Geeks](https://www.geeksforgeeks.org/creating-python-virtual-environment-windows-linux/\n)\n\nIn my environment(Ubuntu/Linux) , I'll open the terminal and execute the command:\n\n```shell\npython3 -m venv django-setup\n```\n\nCreating a virtual Environment\n![create_environment.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1613229845480/1A9mc4fL7.png)\nExplanation:\n\n`python3 -m venv django-setup`:  the '*django-setup*' is the name of the folder or the project folder.\n\nAfter creating that, you move into the newly created directory to activate the environment.\n\n```shell\ncd django-setup\nsource bin/activate\n```\n\nThe `'source bin/activate'` is for activating the virtual environment, on windows you use: `'source Scripts\\activate'`\n\nActivating Virtual environment\n![activate_env.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1613229916010/kfU6pfHWV.png)\n\nAfter that, the terminal current pathname will start the parent name in brackets, which shows that the environment is activated.\n\nI usually run 'pip3 freeze' in the environment just to confirm that there is nothing installed prior to my knowledge.\n\nIf the command returns nothing, then It's good to go.\n\nI used pip3 because I'm using python version 3, pip (for python version 2) also works as well.\n\n## Installing Django\n\n[Official docs](https://docs.djangoproject.com/en/3.1/intro/install/#install-django)\nIn your activated environment, let's install Django. \nIt's simple, run the script:\n\n```shell\npip3 install django \n```\n\nor \n\n```shell\npip install django\n```\n\nThat's it Django is installed and ready to use.\n\nTo confirm the installed packages, use the command:\n\n```shell\npip3 freeze\n```\n\nThe output will display the installed packages and their versions respectively\n\n```shell\nasgiref==3.3.1\nDjango==3.1.6\npytz==2021.1\nsqlparse==0.4.1\n```\n\n# Starting Django Project\n\nWhile still on the activated environment on your terminal/cmd, you will initialize a Django project by using the following commands.\n\n```shell\ndjango-admin startproject setup\n```\n\n**Explanation**\n```shell\ndjango-admin startproject {project-name}\n```\n\nLearn more about the commands used in [Django CLI](https://docs.djangoproject.com/en/3.1/ref/django-admin/#available-commands).\n\nChange the working directory into the new folder created, and open it using your preferred text editor.\n\n```shell\ncd setup\n```\nNotice Django project structure:\n\n```shell\n├── manage.py\n└── setup\n    ├── asgi.py\n    ├── __init__.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n```\n## Explanation:\n\n- The outer setup/ root directory is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.\n\n- `manage.py`: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about `manage.py` in `django-admin` and `manage.py`.\n\n- The inner `setup/` directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. setup.urls).\n\n- `setup/__init__.py`: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.\n\n- `setup/settings.py`: Settings/configuration for this Django project. Django settings will tell you all about how settings work.\n\n- `setup/urls.py`: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.\n\n- `setup/asgi.py`: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.\n\n- `setup/wsgi.py`: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.\n\nSource: \n\n%[https://docs.djangoproject.com/en/3.1/intro/tutorial01/]\n\nRunning the server:\n\nTo test if the project was correctly installed, we'll have to run the server to confirm:\n\n```shell\npython3 manage.py runserver\n```\n\nor \n\n```shell\npython manage.py runserver\n```\n\nor \n\n```shell\n./manage.py runserver\n```\n\nThe server is running on port 8000. Head over to localhost:8000 to confirm.\n\n> \nAfter running the command, you'll see some warnings in RED, that's nothing to worry about, simply run `python3 manage.py migrate` to get clear the warnings.\n\n\n## Starting an Application\n\nIn the Django folder structure, you can have applications defined inside a project.\nIt is in an application where you define the Models (Database), Views (Templates), and routes.\nTo create an application, we use the command below:\n\n```shell\npython3 manage.py startapp app\n```\n\n**Explanation**: After the `startapp` keyword, use the name of the app you desire.\n```shell\npython3 manage.py startapp {name}\n```\n\nA new folder with the app name will be created with the following structure:\n\n```shell\n├── app\n│   ├── admin.py\n│   ├── apps.py\n│   ├── __init__.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n```\n\n**App Structure Explanation**\n\n`admin.py`: Registering your models here for them to be added and customized on the Django admin dashboard\n\n`apps.py:` Contains the app configuration code\n\n`models.py`: Define your models here. These are the tables used for storing data and defining their relations\n\n`tests.py`: Writing tests for the app\n\n`views.py`: Defining data to be rendered on the templates\n\n## Hello World!\n\nLet's create our first page that prints out the legendary **Hello World!**.\nTo do that, I love following a 3-Step process:\n\n`template => view => URL`\n\nThis is simply creating the HTML file, then defining the view (what to be rendered on the HTML file), and defining the path/URL to access the page.\n\nBut first, we need to register our app to the main project.\nOpen up `setup/settings.py` and look for the application definition part:\n\n```python\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\nWe will configure the created app in a simple step:\n\nadding the following inside the INSTALLED_APPS list\n\n```python\n'app',\n```\n```python\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    # My Apps\n    'app',\n]\n```\n\n### Step 1: Creating A Template\n\ninside the app directory, create a new folder `templates`. \n\n> \n**Note** that in the newer versions of Django, no configurations for the template files are needed.\n\nInside the template folder, create a new HTML file, I'll name mine `index.html`. \n\nGo ahead and add simple codes that display anything, or copy the one below:\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Django-Setup</title>\n</head>\n<body>\n    <main>\n        <h1>HELLO WORLD!</h1>\n    </main>\n</body>\n</html>\n```\n\n### Step 2: Defining a View\n\nFor the template to be rendered on a page, we'll have to create views for it.\n\n\n> \nA view function, or view for short, is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image . . . or anything, really. - -Documentation, Django\n\nOpen the `views.py` file inside your app's folder and add the following code:\n\n```python\ndef HelloWorld(request):\n    return render(request, 'index.html')\n```\n\n**Explanation**:\n\nThe code above is a simple python function, that returns the HTML file as a response after a request has been called.\n\nThe `views.py` file should be:\n\n```python\nfrom django.shortcuts import render\n\n# Create your views here.\ndef HelloWorld(request):\n    return render(request, 'index.html')\n```\n\nThat's it.\n\n### Step 3: Defining URLs\n\nThere are two ways to define URLs: \n\n1. one is to use the `urls.py` file in the projects config files: i.e `setup/urls.py` \n\n2. create a `urls.py` inside your app.\n\nFor the sake of the tutorial, I'll use the second option but I will explain both.\n\n#### Option 1 (root project url):\n\nOn the project folder, open up the `urls.py`, (`setup/urls.py`).\n\n```python\n\"\"\"setup URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/3.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n```\n\nWe will define our paths inside the urlpatterns list:\n\n```python\nurlpatterns = [\n    # add path here\n]\n```\nThe syntax we'll use:\n\n`path('{define path}', define view, URL name)`\n\nFirst, we import our views at the top of URL file:\n\n```python\nfrom app import views\n```\n\nThe code simply imports the `views` module from the app folder.\n\nAfter that we define the path:\n\n```python\npath('hello/', views.HelloWorld, name='hello'),\n```\n\nGood to Go!\n\n>\nEnsure the server is still running (for some reason the server may or may not have stopped running).\n\nOpen your browser and head over to http://localhost:8000/hello/ and see the HELLO WORLD!\n\n#### Option 2 (app folder URL):\n\nThis is the most used method, it simply involves creating a `urls.py` inside the `app` folder.\nLet's get started:\n\nInside the app folder, create a new file: `urls.py` and add the following:\n\n```python\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('hello/', views.HelloWorld, name='hello'),\n]\n```\n\nNotice how we import our views: (all in the same folder)\n\n```python\nfrom . import views\n```\n\nThe next step is to add the new urls.py in our app folder to the root URLs file. (`setup/urls.py`).\n\n`setup/urls.py`\n\n```python\n\"\"\"setup URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/3.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]\n```\n\nWe added a new import, to include the URLs from the app folder.\n\n```python\nfrom django.urls import path, include\n```\n\nEnsure the server is running and then head over to http://localhost:8000/hello/ on your browser.\n\n\n\n![hello.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1618814494539/-EQ6m1DFw.png)\n\nThere it is, you have just set up a Django project. This just the beginning of a wonderful journey.\n\n## Adding Your Project to GitHub\n\nIt is a good practice to use version control in any of your projects, I prefer GitHub. So I'll take you through a crash to upload your Django to GitHub.\n\nLearn how to configure git and GitHub from the article below:\n\n%[https://chrisdev.hashnode.dev/git-and-github-installation-and-configuration]\n\n### Creating A GitHub Repository:\n\nCreating a GitHub repository is quite easy.\n\n[https://github.com/new](https://github.com/new) \n\nGo ahead and fill in the repo name and click on the `Create repository` green button.\n\n### Adding a .gitignore file\n\nWhen using git and GitHub, there are some files that aren't recommended to be uploaded because of environments and security features.\n\nThe same aplies to Django, some files like the database files shouldn't be uploaded. To do that, create a new file, `.gitignore` in the root folder.\n\nAfter that, head over to https://www.gitignore.io/, and search for 'django', and copy the code, or use the code snippet below:\n\n%[https://gist.github.com/ChrisAchinga/42a8b68b5df9bb816365d2893b406f23]\n\n### Initializing git\n\nHead back to the terminal where the Django project is open, and initialize a git project. \n\nTo do that simply use:\n\n```shell\ngit init\n```\n\nAfter that, the output (an example is shown below), shows that the git repository is already initialized.\n\n```shell\nInitialized empty Git repository in /home/chrisdev/code/django/django-setup/setup/.git/\n```\n\nWe will need to commit the files to git, using a few simple steps.\n\nWhile still on the project's terminal/cmd directory, run the commands below:\n\n```shell\ngit add .\ngit commit -m 'initial django-setup'\n```\n\n**Explanation** - `git add`\n\n> \nThis command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options, it can also be used to add content with only part of the changes made to the working tree files applied or remove paths that do not exist in the working tree anymore\n\nSource\n\n%[https://git-scm.com/docs/git-add]\n\n**Explanation** - `git commit`\n\n> \nCreate a new commit containing the current contents of the index and the given log message describing the changes\n\n%[https://git-scm.com/docs/git-commit]\n\nAfter that, head over to the GitHub page where you just created the repo, there is a card title\n\n**Quick setup — if you’ve done this kind of thing before** \n\nwith various options on how to upload or connect your project files, I will use the second option **…or push an existing repository from the command line**:\n\n```shell\ngit remote add origin https://github.com/sryderdev/django-setup.git\ngit branch -M main\ngit push -u origin main\n```\n\nCopy and paste the code from your end on the terminal/cmd.\n\nAnd that's it your project is now on GitHub...\n\nThe next article will be on how to set up static files to add styling and functionalities to the templates we created.\n\nFor referral, the repo can be found in:\n\nhttps://github.com/ChrisAchinga/django-demo/tree/starting-django-project\n\nReach out via [tWittEr](https://twitter.com/achinga_chris)\nPeace.\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744722958ef13879b94e81',
        '56744721958ef13879b94d67',
        '5f76046e37eb052c1b80da9f',
        '56744721958ef13879b94a6c',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4548.7268,
      responses: [
        {
          popularity: 5482.1194,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '62b013cfd8afe74aa51fed7e',
          content:
            '<p>W internecie możemy znaleźć darmową muzykę do wykorzystania w grze. Wiele osób uwielbia grać w gry jako rodzaj rozrywki. Lemon Casino jest również jednym z moich ulubionych. Lemon Casino to atrakcyjna wizualnie strona https://polskiekasynaonline.net/review/lemon/ która zapewnia polskim graczom zróżnicowany asortyment gier kasynowych. Dostawca ma silną reputację, popartą rozległą wiedzą rynkową. Ta recenzja kasyna Lemon przedstawi czytelnikowi wszystkie kluczowe funkcje, które ma do zaoferowania ta strona z grami online.</p>\n',
          contentMarkdown:
            'W internecie możemy znaleźć darmową muzykę do wykorzystania w grze. Wiele osób uwielbia grać w gry jako rodzaj rozrywki. Lemon Casino jest również jednym z moich ulubionych. Lemon Casino to atrakcyjna wizualnie strona https://polskiekasynaonline.net/review/lemon/ która zapewnia polskim graczom zróżnicowany asortyment gier kasynowych. Dostawca ma silną reputację, popartą rozległą wiedzą rynkową. Ta recenzja kasyna Lemon przedstawi czytelnikowi wszystkie kluczowe funkcje, które ma do zaoferowania ta strona z grami online.',
          author: '6263e4d60f819f588af75e6b',
          stamp: 'cl4mcy29f087keznv0fzx7fys',
          post: '602e427581da451f738805cb',
          replies: [],
          dateAdded: '2022-06-20T06:29:35.860Z',
          badgesAwarded: [],
          __v: 0,
        },
        {
          popularity: 4548.9627,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '602f54581591c5239ebdc40f',
          content:
            '<p>This is a very well explained article <a class="user-mention" href="https://hashnode.com/@chrisdev">chrisDev</a>. Thank you for sharing. 💛</p>\n',
          contentMarkdown:
            'This is a very well explained article @[chrisDev](@chrisdev). Thank you for sharing. 💛',
          author: '5e5e9c1f8c89a92316ce8b66',
          stamp: 'cklbvyl9l04hm1as1808i5w6y',
          post: '602e427581da451f738805cb',
          replies: [],
          dateAdded: '2021-02-19T06:02:00.875Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 2,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35486',
      ],
      totalReactions: 21,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '602e427581da451f738805cb',
      title: 'Starting a Django Project',
      subtitle:
        'Learn how to start a Django project and uploading it to GitHub using git',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'starting-a-django-project',
      importedFromMedium: false,
      dateAdded: '2021-02-18T10:33:25.077Z',
      hasCustomDate: false,
      series: '5fc3c99a4b7d527151c3859e',
      stickCoverToBottom: false,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '62b013cfd8afe74aa51fed7f',
          user: '6263e4d60f819f588af75e6b',
          stamp: 'cl4mcy29f087keznv0fzx7fys',
        },
        {
          _id: '602f54581591c5239ebdc410',
          user: '5e5e9c1f8c89a92316ce8b66',
          stamp: 'cklbvyl9l04hm1as1808i5w6y',
        },
      ],
      cuid: 'cklaq7rox00117ns10aozcn6w',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '602104950da0382a2d49ecf2',
      hasPinnedTag: false,
      readTime: 11,
      __v: 2,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
      },
      lastActivity: '2022-06-20T06:29:51.709Z',
      dateUpdated: '2021-04-19T06:46:50.135Z',
      pendingPublicationApproval: false,
      viewsUpdatedOn: 1671624063825,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35486',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 3,
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 2,
        reaction_5c090d96c2a9c2a674d3548b: 2,
        reaction_567453d0b73d6a82ac8c5ab9: 2,
        reaction_5c090d96c2a9c2a674d35488: 2,
        reaction_5d9dd859f31791c942dc5b52: 2,
        reaction_5c090d96c2a9c2a674d3548a: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
      },
      id: '602e427581da451f738805cb',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckjivhtvd00bttbs13xli18u2-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 46,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1609783401908/xdRRU1x_9.png',
      autoGeneratedCover: '',
      brief:
        "I started off #100DaysOfCode on the 1st of January 2020 and hit the Linked List topic without looking back.\nIt is an interesting Data Structure and to be honest, I still am working on it.\nSo I'll explain what I have understood on LinkedList in a few ...",
      content:
        '<p>I started off #100DaysOfCode on the 1st of January 2020 and hit the Linked List topic without looking back.</p>\n<p>It is an interesting Data Structure and to be honest, I still am working on it.</p>\n<p>So I\'ll explain what I have understood on LinkedList in a few paragraphs as I continue working on real examples.</p>\n<h2 id="what-is-a-linked-list">What is a Linked List?</h2>\n<p>It\'s a collection of data in a linear structure, and the order of the data isn\'t determined by their physical order.</p>\n<p>A linked list contains Nodes. A Node is a piece of data in the linked list.</p>\n<p>In each node is a head (the content/data) and a reference or link to the next Node.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1609782632208/vssZQcCs6.png" alt="408px-Singly-linked-list.svg.png" /></p>\n<p>Want to learn more about Linked List?</p>\n<p>Check out the links below:</p>\n<p><a target="_blank" href="https://en.wikipedia.org/wiki/Linked_list#:~:text=In%20computer%20science%2C%20a%20linked,which%20together%20represent%20a%20sequence.">Wikipedia - In dept explanation</a></p>\n<p><a target="_blank" href="https://www.geeksforgeeks.org/data-structures/linked-list/">Geeks For Geeks - Linked lists</a></p>\n<p><a target="_blank" href="https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm">Tutorialspoint - Linked Lists</a></p>\n<p><a target="_blank" href="https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list">JavaScript Algorithms - -Github</a></p>\n<p><strong>Linked List Data Structure | JavaScript - Video By Traversy Media</strong></p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/watch?v=ZBdE8DElQQU&amp;t=424s">https://www.youtube.com/watch?v=ZBdE8DElQQU&amp;t=424s</a></div>\n<p>Go get the skill!!</p>\n',
      contentMarkdown:
        "I started off #100DaysOfCode on the 1st of January 2020 and hit the Linked List topic without looking back.\n\nIt is an interesting Data Structure and to be honest, I still am working on it.\n\nSo I'll explain what I have understood on LinkedList in a few paragraphs as I continue working on real examples.\n\n## What is a Linked List?\n\nIt's a collection of data in a linear structure, and the order of the data isn't determined by their physical order.\n\nA linked list contains Nodes. A Node is a piece of data in the linked list.\n\nIn each node is a head (the content/data) and a reference or link to the next Node.\n\n![408px-Singly-linked-list.svg.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1609782632208/vssZQcCs6.png)\n\nWant to learn more about Linked List?\n\nCheck out the links below:\n\n[Wikipedia - In dept explanation](https://en.wikipedia.org/wiki/Linked_list#:~:text=In%20computer%20science%2C%20a%20linked,which%20together%20represent%20a%20sequence.)\n\n[Geeks For Geeks - Linked lists](https://www.geeksforgeeks.org/data-structures/linked-list/)\n\n[Tutorialspoint - Linked Lists](https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm)\n\n[JavaScript Algorithms - -Github](https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/linked-list)\n\n**Linked List Data Structure | JavaScript - Video By Traversy Media**\n\n%[https://www.youtube.com/watch?v=ZBdE8DElQQU&t=424s]\n\nGo get the skill!!",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744722958ef13879b951bb', '56744721958ef13879b94a8d'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4462.6053,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d35486',
        '5d9dd859f31791c942dc5b52',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
      ],
      totalReactions: 10,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5ff3588dfc8177134fbb4295',
      title: 'Linked List For (!Dummies)',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'linked-list-for-dummies',
      series: '5ff35177fc8177134fbb421e',
      pollOptions: [],
      dateAdded: '2021-01-04T18:03:57.356Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckjivhtvd00bttbs13xli18u2',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5ff351fce8e57e1374e67e1c',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      reactionToCountMap: {
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
      },
      viewsUpdatedOn: 1671456664402,
      uniqueReactions: [
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d35486',
        '5d9dd859f31791c942dc5b52',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
      ],
      reactionToCountMapUnique: {
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
      },
      id: '5ff3588dfc8177134fbb4295',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckjhgfoei0f7dh4s1ds13hgk0-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 79,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1609695296683/C26uG2ptm.png',
      autoGeneratedCover: '',
      brief:
        'A short guide on how I started using ES6 Modules when using Node.\nI love the EcmaScript Module syntax and I use it almost in all my code and practices.\nI will use the example from Express Introduction - MDN\nSo, create a new folder (node-es6):\nmkdir n...',
      content:
        '<p>A short guide on how I started using ES6 Modules when using Node.</p>\n<p>I love the EcmaScript Module syntax and I use it almost in all my code and practices.</p>\n<p>I will use the example from <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction">Express Introduction - MDN</a></p>\n<p>So, create a new folder (node-es6):</p>\n<pre><code class="lang-shell">mkdir node-es6\n</code></pre>\n<p>Inside the folder, initialize a node application by:</p>\n<pre><code class="lang-shell">npm init -y\n</code></pre>\n<p>Now open the folder using your favorite text editor.</p>\n<p>Create a new file <code>hello.js</code> and paste the code:</p>\n<pre><code class="lang-javascript"><span class="hljs-comment">// Load HTTP module</span>\n<span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">"http"</span>);\n\n<span class="hljs-keyword">const</span> hostname = <span class="hljs-string">"127.0.0.1"</span>;\n<span class="hljs-keyword">const</span> port = <span class="hljs-number">8000</span>;\n\n<span class="hljs-comment">// Create HTTP server</span>\n<span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {\n\n   <span class="hljs-comment">// Set the response HTTP header with HTTP status and Content type</span>\n   res.writeHead(<span class="hljs-number">200</span>, {<span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'text/plain\'</span>});\n\n   <span class="hljs-comment">// Send the response body "Hello World"</span>\n   res.end(<span class="hljs-string">\'Hello World\\n\'</span>);\n});\n\n<span class="hljs-comment">// Prints a log once the server starts listening</span>\nserver.listen(port, hostname, <span class="hljs-function">() =&gt;</span> {\n   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Server running at http://<span class="hljs-subst">${hostname}</span>:<span class="hljs-subst">${port}</span>/`</span>);\n})\n</code></pre>\n<p>Run the file to ensure that it\'s okay:</p>\n<pre><code class="lang-shell">node hello.js\n</code></pre>\n<p>If the message shows on the terminal:</p>\n<pre><code class="lang-shell">Server running at http://127.0.0.1:8000/\n</code></pre>\n<p>Then it\'s running.</p>\n<h2 id="using-es6">Using ES6</h2>\n<p>It\'s simple to get started, head over to the <code>package.json</code> file, and add the line:</p>\n<pre><code class="lang-JSON"><span class="hljs-string">"type"</span>: <span class="hljs-string">"module"</span>,\n</code></pre>\n<p>Your updated file should be like this:</p>\n<pre><code class="lang-JSON">{\n  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"node-es6"</span>,\n  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,\n  <span class="hljs-attr">"type"</span>: <span class="hljs-string">"module"</span>,\n  <span class="hljs-attr">"description"</span>: <span class="hljs-string">""</span>,\n  <span class="hljs-attr">"main"</span>: <span class="hljs-string">"index.js"</span>,\n  <span class="hljs-attr">"scripts"</span>: {\n    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"echo \\"Error: no test specified\\" &amp;&amp; exit 1"</span>\n  },\n  <span class="hljs-attr">"keywords"</span>: [],\n  <span class="hljs-attr">"author"</span>: <span class="hljs-string">""</span>,\n  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"ISC"</span>\n}\n</code></pre>\n<p>The last step would be to update our js file to use es6 modules"</p>\n<pre><code class="lang-javascript"><span class="hljs-comment">// Load HTTP module</span>\n<span class="hljs-keyword">import</span> http <span class="hljs-keyword">from</span> <span class="hljs-string">"http"</span>;\n\n<span class="hljs-keyword">const</span> hostname = <span class="hljs-string">"127.0.0.1"</span>;\n<span class="hljs-keyword">const</span> port = <span class="hljs-number">8000</span>;\n\n<span class="hljs-comment">// Create HTTP server</span>\n<span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {\n\n   <span class="hljs-comment">// Set the response HTTP header with HTTP status and Content type</span>\n   res.writeHead(<span class="hljs-number">200</span>, {<span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'text/plain\'</span>});\n\n   <span class="hljs-comment">// Send the response body "Hello World"</span>\n   res.end(<span class="hljs-string">\'Hello World\\n\'</span>);\n});\n\n<span class="hljs-comment">// Prints a log once the server starts listening</span>\nserver.listen(port, hostname, <span class="hljs-function">() =&gt;</span> {\n   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Server running at http://<span class="hljs-subst">${hostname}</span>:<span class="hljs-subst">${port}</span>/`</span>);\n})\n</code></pre>\n<p>Note that I changed</p>\n<pre><code class="lang-javascript"><span class="hljs-comment">// Load HTTP module</span>\n<span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">"http"</span>);\n</code></pre>\n<p>To</p>\n<pre><code class="lang-javascript"><span class="hljs-comment">// Load HTTP module</span>\n<span class="hljs-keyword">import</span> http <span class="hljs-keyword">from</span> <span class="hljs-string">"http"</span>;\n</code></pre>\n<p>Run the file to make sure that everything worked as planned.</p>\n<p>That\'s it, Tschuss!!</p>\n',
      contentMarkdown:
        'A short guide on how I started using ES6 Modules when using Node.\n\nI love the EcmaScript Module syntax and I use it almost in all my code and practices.\n\nI will use the example from [Express Introduction - MDN](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction)\n\nSo, create a new folder (node-es6):\n\n```shell\nmkdir node-es6\n```\n\nInside the folder, initialize a node application by:\n\n```shell\nnpm init -y\n```\n\nNow open the folder using your favorite text editor.\n\nCreate a new file `hello.js` and paste the code:\n\n```javascript\n// Load HTTP module\nconst http = require("http");\n\nconst hostname = "127.0.0.1";\nconst port = 8000;\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n\n   // Set the response HTTP header with HTTP status and Content type\n   res.writeHead(200, {\'Content-Type\': \'text/plain\'});\n\n   // Send the response body "Hello World"\n   res.end(\'Hello World\\n\');\n});\n\n// Prints a log once the server starts listening\nserver.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n})\n```\n\nRun the file to ensure that it\'s okay:\n\n```shell\nnode hello.js\n```\n\nIf the message shows on the terminal:\n\n```shell\nServer running at http://127.0.0.1:8000/\n```\n\nThen it\'s running.\n\n## Using ES6\n\nIt\'s simple to get started, head over to the `package.json` file, and add the line:\n\n```JSON\n"type": "module",\n```\n\nYour updated file should be like this:\n\n```JSON\n{\n  "name": "node-es6",\n  "version": "1.0.0",\n  "type": "module",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n```\n\nThe last step would be to update our js file to use es6 modules"\n\n```javascript\n// Load HTTP module\nimport http from "http";\n\nconst hostname = "127.0.0.1";\nconst port = 8000;\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n\n   // Set the response HTTP header with HTTP status and Content type\n   res.writeHead(200, {\'Content-Type\': \'text/plain\'});\n\n   // Send the response body "Hello World"\n   res.end(\'Hello World\\n\');\n});\n\n// Prints a log once the server starts listening\nserver.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n})\n```\n\nNote that I changed\n\n```javascript\n// Load HTTP module\nconst http = require("http");\n```\nTo\n\n```javascript\n// Load HTTP module\nimport http from "http";\n```\n\nRun the file to make sure that everything worked as planned.\n\nThat\'s it, Tschuss!!\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b954cb',
        '56744721958ef13879b94cad',
        '56cbdab9b70682283f9edeae',
        '56744722958ef13879b95197',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4460.7409,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      totalReactions: 11,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: true,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5ff2098c786e5b71c88b03f2',
      title: 'How I started Using ES6 Modules in Node JS',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'how-i-started-using-es6-modules-in-node-js',
      pollOptions: [],
      dateAdded: '2021-01-03T18:14:36.534Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckjhgfoei0f7dh4s1ds13hgk0',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5ff1fdff45519f71a33372bc',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 3,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
      },
      viewsUpdatedOn: 1670275861507,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
      },
      id: '5ff2098c786e5b71c88b03f2',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckjg2mret086cg3s19dsya21a-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 183,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1609613978557/pb9Cj7Io1.png',
      autoGeneratedCover: '',
      brief:
        "On September 10th, 2020,   Facebook Developers announced the 2020 Developer Circles Community Challenge.\nThe challenge was on creating tutorials for using any of  Facebook's open-source  products.\nSubmissions were really great and once again apprecia...",
      content:
        '<p>On September 10th, 2020,   <a target="_blank" href="https://developers.facebook.com/blog/post/2020/09/10/welcome-our-2020-developer-circles-community-challenge/">Facebook Developers announced the 2020 Developer Circles Community Challenge</a>.</p>\n<p>The challenge was on creating tutorials for using any of  <a target="_blank" href="https://opensource.facebook.com/">Facebook\'s open-source</a>  products.</p>\n<p>Submissions were really great and once again appreciating and stressing on the importance of developer communities.</p>\n<p>I have gone through the regional and global submission winners and I\'d love to highlight all React-based tutorials for beginners.</p>\n<p>Here is the list:\n(No particular order was followed here :-) )</p>\n<h2 id="hayword-or-case-study-for-making-real-word-chatbot-messenger">HayWord | Case Study for Making Real Word Chatbot Messenger</h2>\n<p>The tutorial guides on creating a Messenger chatbot using Wit.AI with a web interface (using React). A good one for learning integration of the various products by Facebook.</p>\n<p><a target="_blank" href="https://dimasna.github.io/Tutorial-HayWord-Messenger-Wit.ai-ReactJS/">Read Tutorial</a></p>\n<p><a target="_blank" href="https://github.com/dimasna/Tutorial-HayWord-Messenger-Wit.ai-ReactJS">Source Code</a></p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/watch?v=MiOWs0DdRvc&amp;feature=youtu.be">https://www.youtube.com/watch?v=MiOWs0DdRvc&amp;feature=youtu.be</a></div>\n<h2 id="calendar-buddy">Calendar buddy</h2>\n<p>The tutorial is about an application that allows a user to ask questions about his/her calendar items. The application will provide suggestions, even when the user hasn\'t finished typing a full question. This way, the application proactively proposes the answer to the user\'s question.</p>\n<p><a target="_blank" href="https://github.com/WardMaes/fb-community-challenge-2020/blob/master/README.md">Read Tutorial</a></p>\n<p><a target="_blank" href="https://github.com/WardMaes/fb-community-challenge-2020">Source Code</a></p>\n<p><a target="_blank" href="https://fb-community-challenge-2020.vercel.app/">Live Demo</a></p>\n<h2 id="react-custom-animation-hooks-tutorial">React Custom Animation Hooks Tutorial</h2>\n<p>This tutorial gives a guide on how to use react hooks to animate components of a page.</p>\n<p><a target="_blank" href="https://github.com/AleenaCodes/CustomReactHooksTutorial/blob/main/README.md">Read Tutorial</a></p>\n<p><a target="_blank" href="https://github.com/AleenaCodes/CustomReactHooksTutorial">Source Code</a></p>\n<p><a target="_blank" href="https://codesandbox.io/s/simple-animation-hook-ltzb7?file=/src/animation.js">live preview</a></p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://codesandbox.io/s/simple-animation-hook-ltzb7?file=/src/animation.js">https://codesandbox.io/s/simple-animation-hook-ltzb7?file=/src/animation.js</a></div>\n<h2 id="documenting-with-docusaurus-version-2-for-beginners">Documenting with Docusaurus Version 2 for beginners</h2>\n<p><a target="_blank" href="https://v2.docusaurus.io/">Docusaurus</a> is an open-source static site generator for documentation of projects that runs on React.</p>\n<p>This repository will show you a step by step tutorial on how to work with Docusaurus version 2 to display your information in a more orderly way using the markdown language. </p>\n<p><a target="_blank" href="https://github.com/dochavez/Documenting-with-Docusaurus-V2.-/blob/gh-pages/README.md">Read Tutorial</a></p>\n<p><a target="_blank" href="https://github.com/dochavez/Documenting-with-Docusaurus-V2.-">Source Code</a></p>\n<p><a target="_blank" href="https://dochavez.github.io/Documenting-with-Docusaurus-V2.-/">live demo</a></p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/watch?v=OkMr8jmLyKU">https://www.youtube.com/watch?v=OkMr8jmLyKU</a></div>\n<h2 id="chatbot-for-class">Chatbot For Class</h2>\n<p>This tutorial guides you in creating a Messenger chatbot using Wit.ai that </p>\n<p>Creating a COVID-19 info Chatbot for Facebook Messenger with Wit.ai\nYou are going to create a Facebook Messenger Chatbot in this tutorial, which will inform users whether it\'s safe to perform a certain activity during the COVID-19 pandemic.</p>\n<p><a target="_blank" href="https://chatbot-for-class.com/">Read Tutorial</a></p>\n<p><a target="_blank" href="https://github.com/romanenko/covid19-safety-information">Source Code</a></p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/watch?v=TF0dnHiiUzg&amp;feature=youtu.be">https://www.youtube.com/watch?v=TF0dnHiiUzg&amp;feature=youtu.be</a></div>\n<h2 id="getting-started-with-react-hooks-usestate-and-useeffect">Getting Started with React Hooks: useState and useEffect</h2>\n<p>The tutorial has a number of practical examples on how to get started with React Hooks</p>\n<p><a target="_blank" href="https://hulyak.github.io/react-tutorial/">Read Tutorial</a></p>\n<p><a target="_blank" href="https://github.com/hulyak/react-tutorial-beginner">Source Code</a></p>\n<p><a target="_blank" href="https://react-tut-beginner.netlify.app/">demo</a></p>\n<h2 id="live-chess">Live Chess</h2>\n<p>Learn JavaScript, React, Node.js, and Socket.io by creating an online multiplayer chess game.</p>\n<p><a target="_blank" href="https://stack-chess-tutorial.netlify.app/">Read Tutorial</a></p>\n<p><a target="_blank" href="https://github.com/franknmungai/live-chess">Source Code</a></p>\n<p><a target="_blank" href="https://stack-chess.netlify.app/">demo</a></p>\n<p><a target="_blank" href="https://developers.facebook.com/blog/post/2020/11/18/2020-developer-circles-community-challenge-regional-winners-announced/">Well, that\'s pretty much it. You can find the official announcement on submissions</a></p>\n',
      contentMarkdown:
        "On September 10th, 2020,   [Facebook Developers announced the 2020 Developer Circles Community Challenge](https://developers.facebook.com/blog/post/2020/09/10/welcome-our-2020-developer-circles-community-challenge/).\n\nThe challenge was on creating tutorials for using any of  [Facebook's open-source](https://opensource.facebook.com/)  products.\n\nSubmissions were really great and once again appreciating and stressing on the importance of developer communities.\n\nI have gone through the regional and global submission winners and I'd love to highlight all React-based tutorials for beginners.\n\nHere is the list:\n(No particular order was followed here :-) )\n\n## HayWord | Case Study for Making Real Word Chatbot Messenger\n\nThe tutorial guides on creating a Messenger chatbot using Wit.AI with a web interface (using React). A good one for learning integration of the various products by Facebook.\n\n[Read Tutorial](https://dimasna.github.io/Tutorial-HayWord-Messenger-Wit.ai-ReactJS/)\n\n[Source Code](https://github.com/dimasna/Tutorial-HayWord-Messenger-Wit.ai-ReactJS)\n\n%[https://www.youtube.com/watch?v=MiOWs0DdRvc&feature=youtu.be]\n\n## Calendar buddy\n\nThe tutorial is about an application that allows a user to ask questions about his/her calendar items. The application will provide suggestions, even when the user hasn't finished typing a full question. This way, the application proactively proposes the answer to the user's question.\n\n[Read Tutorial](https://github.com/WardMaes/fb-community-challenge-2020/blob/master/README.md)\n\n[Source Code](https://github.com/WardMaes/fb-community-challenge-2020)\n\n[Live Demo](https://fb-community-challenge-2020.vercel.app/)\n\n## React Custom Animation Hooks Tutorial\n\nThis tutorial gives a guide on how to use react hooks to animate components of a page.\n\n[Read Tutorial](https://github.com/AleenaCodes/CustomReactHooksTutorial/blob/main/README.md)\n\n[Source Code](https://github.com/AleenaCodes/CustomReactHooksTutorial)\n\n[live preview](https://codesandbox.io/s/simple-animation-hook-ltzb7?file=/src/animation.js)\n\n\n%[https://codesandbox.io/s/simple-animation-hook-ltzb7?file=/src/animation.js]\n\n## Documenting with Docusaurus Version 2 for beginners\n\n[Docusaurus](https://v2.docusaurus.io/) is an open-source static site generator for documentation of projects that runs on React.\n\nThis repository will show you a step by step tutorial on how to work with Docusaurus version 2 to display your information in a more orderly way using the markdown language. \n\n[Read Tutorial](https://github.com/dochavez/Documenting-with-Docusaurus-V2.-/blob/gh-pages/README.md)\n\n[Source Code](https://github.com/dochavez/Documenting-with-Docusaurus-V2.-)\n\n[live demo](https://dochavez.github.io/Documenting-with-Docusaurus-V2.-/)\n\n%[https://www.youtube.com/watch?v=OkMr8jmLyKU]\n\n## Chatbot For Class\n\nThis tutorial guides you in creating a Messenger chatbot using Wit.ai that \n\nCreating a COVID-19 info Chatbot for Facebook Messenger with Wit.ai\nYou are going to create a Facebook Messenger Chatbot in this tutorial, which will inform users whether it's safe to perform a certain activity during the COVID-19 pandemic.\n\n[Read Tutorial](https://chatbot-for-class.com/)\n\n[Source Code](https://github.com/romanenko/covid19-safety-information)\n\n\n%[https://www.youtube.com/watch?v=TF0dnHiiUzg&feature=youtu.be]\n\n## Getting Started with React Hooks: useState and useEffect\n\nThe tutorial has a number of practical examples on how to get started with React Hooks\n\n[Read Tutorial](https://hulyak.github.io/react-tutorial/)\n\n[Source Code](https://github.com/hulyak/react-tutorial-beginner)\n\n[demo](https://react-tut-beginner.netlify.app/)\n\n## Live Chess\n\nLearn JavaScript, React, Node.js, and Socket.io by creating an online multiplayer chess game.\n\n[Read Tutorial](https://stack-chess-tutorial.netlify.app/)\n\n[Source Code](https://github.com/franknmungai/live-chess)\n\n[demo](https://stack-chess.netlify.app/)\n\n\n[Well, that's pretty much it. You can find the official announcement on submissions](https://developers.facebook.com/blog/post/2020/11/18/2020-developer-circles-community-challenge-regional-winners-announced/)\n\n\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95434',
        '56744723958ef13879b955a9',
        '56744721958ef13879b94da0',
        '56744723958ef13879b952d7',
        '56744720958ef13879b947ce',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4458.8406,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      totalReactions: 10,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5ff0c2ca45519f71a33360b5',
      title:
        'Beginner React/Messenger Tutorials: 2020 Developer Circles Community Challenge',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'beginner-reactmessenger-tutorials-2020-developer-circles-community-challenge',
      series: '5fe072ea1485f22e24b3776c',
      pollOptions: [],
      dateAdded: '2021-01-02T19:00:26.240Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckjg2mret086cg3s19dsya21a',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5ff0ade6786e5b71c88af0d7',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 3,
      __v: 0,
      dateUpdated: '2021-01-02T19:09:26.234Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
      },
      viewsUpdatedOn: 1670952663544,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
      },
      id: '5ff0c2ca45519f71a33360b5',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckjenovaf004lh4s1128b810a-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 63,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1609528441549/y5PNL9od2.png',
      autoGeneratedCover: '',
      brief:
        "A short guide and a practical reference to GitHub Documentation on syncing a repo.\n\nIt's kind of an 'open-source' hacks\n\nFor the guide, I'll be using a  repo  I forked from FbDevcCommunityContent.\nFrom the terminal, I will change my directory to wher...",
      content:
        '<p>A short guide and a practical reference to <a target="_blank" href="https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/syncing-a-fork">GitHub Documentation on syncing a repo.</a></p>\n<blockquote>\n<p>It\'s kind of an \'open-source\' hacks</p>\n</blockquote>\n<p>For the guide, I\'ll be using a  <a target="_blank" href="https://github.com/ChrisAchinga/FbDevcCommunityContent">repo</a>  I forked from <a target="_blank" href="https://github.com/fbdevelopercircles/FbDevcCommunityContent">FbDevcCommunityContent</a>.</p>\n<p>From the terminal, I will change my directory to where the project files are:</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1609526934002/J5GB-3Oaz.png" alt="terminal.png" /></p>\n<p>The first step will be to fetch branches and their commits from the upstream, or the parent repository:</p>\n<pre><code class="lang-shell">git fetch upstream\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1609527142520/U-XFSLp7m.png" alt="terminal1.png" /></p>\n<p>After that, ensure that you are at the default repository on your remote repo. In my case, the default branch is <code>master</code>, and so is the upstream.</p>\n<p>To confirm your current branch you are on:</p>\n<pre><code class="lang-shell">git status\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1609527421779/UqluZLgvi.png" alt="terminal2.png" /></p>\n<p>All set so go ahead and merge with the upstream\'s master branch:</p>\n<pre><code class="lang-shell">git merge upstream/master\n</code></pre>\n<p>If you haven\'t made any changes or commits on your master branch, git will automatically merge the repos and it\'ll be up to date</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1609527664051/ThwaF-YqQ.png" alt="terminal3.png" /></p>\n<p>Once that is done, update your remote files to GitHub:</p>\n<pre><code class="lang-shell">git add .\ngit commit -m \'synced repo with upstream\'\ngit push\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1609527975330/6g9XRasXY.png" alt="push.png" /></p>\n<p>Well, that\'s pretty much it.\nFind the original documentation here:</p>\n<p><a target="_blank" href="https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/syncing-a-fork">https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/syncing-a-fork</a></p>\n<p>https://linktr.ee/chrisdev</p>\n',
      contentMarkdown:
        "\nA short guide and a practical reference to [GitHub Documentation on syncing a repo.](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/syncing-a-fork)\n\n> \nIt's kind of an 'open-source' hacks\n\nFor the guide, I'll be using a  [repo](https://github.com/ChrisAchinga/FbDevcCommunityContent)  I forked from [FbDevcCommunityContent](https://github.com/fbdevelopercircles/FbDevcCommunityContent).\n\nFrom the terminal, I will change my directory to where the project files are:\n\n\n![terminal.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1609526934002/J5GB-3Oaz.png)\n\nThe first step will be to fetch branches and their commits from the upstream, or the parent repository:\n\n```shell\ngit fetch upstream\n```\n\n\n![terminal1.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1609527142520/U-XFSLp7m.png)\n\nAfter that, ensure that you are at the default repository on your remote repo. In my case, the default branch is `master`, and so is the upstream.\n\nTo confirm your current branch you are on:\n\n```shell\ngit status\n```\n\n![terminal2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1609527421779/UqluZLgvi.png)\n\nAll set so go ahead and merge with the upstream's master branch:\n\n```shell\ngit merge upstream/master\n```\n\nIf you haven't made any changes or commits on your master branch, git will automatically merge the repos and it'll be up to date\n\n\n![terminal3.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1609527664051/ThwaF-YqQ.png)\n\nOnce that is done, update your remote files to GitHub:\n\n```shell\ngit add .\ngit commit -m 'synced repo with upstream'\ngit push\n```\n\n\n![push.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1609527975330/6g9XRasXY.png)\n\nWell, that's pretty much it.\nFind the original documentation here:\n\n[https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/syncing-a-fork](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/syncing-a-fork)\n\nhttps://linktr.ee/chrisdev",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5fe187955620145ec6e3a5c2',
        '56744721958ef13879b94c63',
        '56744723958ef13879b9526c',
        '56744721958ef13879b94932',
        '56744722958ef13879b94f32',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4456.9806,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      totalReactions: 11,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fef7490786e5b71c88adfd1',
      title: 'Syncing A forked Repo with the Parent Repo on GitHub',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'syncing-a-forked-repo-with-the-parent-repo-on-github',
      series: '5fb973291b7ab0041800d9ce',
      pollOptions: [],
      dateAdded: '2021-01-01T19:14:24.165Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckjenovaf004lh4s1128b810a',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fef6cd7b2cf2458fe328550',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 2,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5d9dd859f31791c942dc5b52: 0,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
      },
      viewsUpdatedOn: 1671183064098,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abc',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_5c090d96c2a9c2a674d35486: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5d9dd859f31791c942dc5b52: 0,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
      },
      id: '5fef7490786e5b71c88adfd1',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckjd708vr0ikrlvs15lajbcy2-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 89,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1609439969775/nLN-aLp8v.png',
      autoGeneratedCover: '',
      brief:
        'https://linktr.ee/chrisdev \n\nWell, I started writing an article, a really long one so I had to break it down then post the whole piece (ironic tho) later once I am done.\n\n21 in A Glimpse\nMy journey into a full-stack dream job seriously started in Mar...',
      content:
        '<p> <a target="_blank" href="https://linktr.ee/chrisdev">https://linktr.ee/chrisdev</a> </p>\n<blockquote>\n<p>Well, I started writing an article, a really long one so I had to break it down then post the whole piece (ironic tho) later once I am done.</p>\n</blockquote>\n<h1 id="21-in-a-glimpse">21 in A Glimpse</h1>\n<p>My journey into a full-stack dream job seriously started in March 2020, and I\'ve learned more from the many mistakes I have made along the way.</p>\n<p>After research and a little bit of practice, I thought I\'d document my preferences and choices that I\'ll probably use in \'21. Most of my suggestions are from the Dev communities and some individuals who I admire how they work and probably walking in the same path.</p>\n<p>This can also be a guide into development for newbies or just a brush-up.</p>\n<p>I will focus mostly on website development and design because so far that\'s what I have been doing and somehow courageous about my skills on that.</p>\n<h2 id="how-i-choose-my-tools-and-paths">How I choose My Tools and Paths</h2>\n<p>Well, first of all, I look at what the big tech companies are using in terms of their technology based tools and also job requirement for their engineering staff. By that, I know that I am setting my bars too high because the biggies want the best right? I challenge myself to see how I fair and most of the time not so great.</p>\n<p>I also look at local companies around me and what they use and need for their technologies and websites. I\'d say most of them use tools that I don\'t enjoy so I mostly focus on international companies to set my standards.</p>\n<p>Twitter dev community has personel that have opened my eyes to see what is happening and what is really used. <a target="_blank" href="https://twitter.com/catalinmpit">catalinmpit</a>, <a target="_blank" href="https://twitter.com/florinpop1705">florinpop75</a>, <a target="_blank" href="https://twitter.com/traversymedia">traversymedia</a>, <a target="_blank" href="https://twitter.com/DThompsonDev">danny</a>, <a target="_blank" href="https://twitter.com/dennisivy11">dennisivy11</a>, <a target="_blank" href="https://twitter.com/themarcba">themarcba</a> , <a target="_blank" href="https://twitter.com/ravinwashere">ravin</a>, <a target="_blank" href="https://twitter.com/denicmarko">denicmarko</a>, <a target="_blank" href="https://twitter.com/javascriptual">javascripteacher</a>, <a target="_blank" href="https://twitter.com/CarlaNotarobot">carol</a>, <a target="_blank" href="https://twitter.com/aleksandrasays">aleksandra</a>, <a target="_blank" href="https://twitter.com/NehemiahKiv">nehemia</a>, <a target="_blank" href="https://twitter.com/telmo">telmo</a> and many more content creators have really made me make my path and set clearly possible goals for my next phase of becoming an engineer.</p>\n<p>Facebook Developers Circles has played a major role in making my dreams and goals DevC NBI and MSA have given me a platform that made me get the hell out of my comfort zone.</p>\n<p>Well from all that and many other motivators and research I have made online, Here is what I have to write about today (Dec 31st, 2020):</p>\n<h3 id="my-developer-environment">My Developer Environment</h3>\n<p>This is the setup I use and recommend for programming, from text-editors all the way to Operating Systems and Browsers.</p>\n<h4 id="text-editors">Text Editors</h4>\n<p>There are a lot of text editors, both free and paid options are available for you.</p>\n<ul>\n<li><a target="_blank" href="https://code.visualstudio.com/"><strong>Visual Studio Code</strong></a></li>\n<li><a target="_blank" href="https://atom.io/">Atom</a></li>\n<li><a target="_blank" href="https://www.sublimetext.com/">Sublime text</a></li>\n</ul>\n<p>I use Visual Studio (by Microsoft) Code all the time, that\'s my go-to text editor. I can\'t make comparisons with the others because I barely used them. Atom (by GitHub) may have similar functionalities with VScode which are pretty cool too.</p>\n<p>I find VScode easy to set up and also one can sync the settings so that nothing is lost or changed when re-installing or lost laptop.</p>\n<p>vscode has integrated git and GitHub and the terminal which makes work easier when dealing with version control.</p>\n<h4 id="operating-systems">Operating Systems</h4>\n<p>As this mostly depends on your computing device, I have always used and advised using any Linux distributions.</p>\n<p>I use Ubuntu and it\'s working pretty fine with me. It\'s like it was built for developers, after all, it has python and apache preinstalled.</p>\n<p>On the other hand, I\'ve always fancied using MacOS, I\'ll probably get a Macbook soon and enjoy the cool developing environment the mac os has to offer.</p>\n<p>Windows OS is a good option too but I rarely use it for my personal stuff. But I don\'t love coding in a windows environment because of the long processes or maybe I\'m used to working with the terminal mostly.</p>\n<p>My advice would be to go with the one you are comfortable with.</p>\n<h4 id="version-control">Version Control</h4>\n<p>I am more comfortable using git with GitHub altogether. Recently GitHub introduced GitHub CLI. A pretty useful terminal interface for working directly with Github web-based operations like creating a repo pull requests, issues, and more.</p>\n<p>Mercurial is also a great one but I have never used it professionally with GitHub.</p>\n<p>That sums up a basic developer environment and tools I do recommend.</p>\n',
      contentMarkdown:
        " [https://linktr.ee/chrisdev](https://linktr.ee/chrisdev) \n\n> \nWell, I started writing an article, a really long one so I had to break it down then post the whole piece (ironic tho) later once I am done.\n\n# 21 in A Glimpse\n\nMy journey into a full-stack dream job seriously started in March 2020, and I've learned more from the many mistakes I have made along the way.\n\nAfter research and a little bit of practice, I thought I'd document my preferences and choices that I'll probably use in '21. Most of my suggestions are from the Dev communities and some individuals who I admire how they work and probably walking in the same path.\n\nThis can also be a guide into development for newbies or just a brush-up.\n\nI will focus mostly on website development and design because so far that's what I have been doing and somehow courageous about my skills on that.\n\n## How I choose My Tools and Paths\n\nWell, first of all, I look at what the big tech companies are using in terms of their technology based tools and also job requirement for their engineering staff. By that, I know that I am setting my bars too high because the biggies want the best right? I challenge myself to see how I fair and most of the time not so great.\n\nI also look at local companies around me and what they use and need for their technologies and websites. I'd say most of them use tools that I don't enjoy so I mostly focus on international companies to set my standards.\n\nTwitter dev community has personel that have opened my eyes to see what is happening and what is really used. [catalinmpit](https://twitter.com/catalinmpit), [florinpop75](https://twitter.com/florinpop1705), [traversymedia](https://twitter.com/traversymedia), [danny](https://twitter.com/DThompsonDev), [dennisivy11](https://twitter.com/dennisivy11), [themarcba](https://twitter.com/themarcba) , [ravin](https://twitter.com/ravinwashere), [denicmarko](https://twitter.com/denicmarko), [javascripteacher](https://twitter.com/javascriptual), [carol](https://twitter.com/CarlaNotarobot), [aleksandra](https://twitter.com/aleksandrasays), [nehemia](https://twitter.com/NehemiahKiv), [telmo](https://twitter.com/telmo) and many more content creators have really made me make my path and set clearly possible goals for my next phase of becoming an engineer.\n\nFacebook Developers Circles has played a major role in making my dreams and goals DevC NBI and MSA have given me a platform that made me get the hell out of my comfort zone.\n\nWell from all that and many other motivators and research I have made online, Here is what I have to write about today (Dec 31st, 2020):\n\n### My Developer Environment\n\nThis is the setup I use and recommend for programming, from text-editors all the way to Operating Systems and Browsers.\n\n#### Text Editors\n\n\nThere are a lot of text editors, both free and paid options are available for you.\n\n- [**Visual Studio Code**](https://code.visualstudio.com/)\n- [Atom](https://atom.io/)\n- [Sublime text](https://www.sublimetext.com/)\n\nI use Visual Studio (by Microsoft) Code all the time, that's my go-to text editor. I can't make comparisons with the others because I barely used them. Atom (by GitHub) may have similar functionalities with VScode which are pretty cool too.\n\nI find VScode easy to set up and also one can sync the settings so that nothing is lost or changed when re-installing or lost laptop.\n\nvscode has integrated git and GitHub and the terminal which makes work easier when dealing with version control.\n\n\n#### Operating Systems\n\nAs this mostly depends on your computing device, I have always used and advised using any Linux distributions.\n\nI use Ubuntu and it's working pretty fine with me. It's like it was built for developers, after all, it has python and apache preinstalled.\n\nOn the other hand, I've always fancied using MacOS, I'll probably get a Macbook soon and enjoy the cool developing environment the mac os has to offer.\n\nWindows OS is a good option too but I rarely use it for my personal stuff. But I don't love coding in a windows environment because of the long processes or maybe I'm used to working with the terminal mostly.\n\nMy advice would be to go with the one you are comfortable with.\n\n\n#### Version Control\n\n\nI am more comfortable using git with GitHub altogether. Recently GitHub introduced GitHub CLI. A pretty useful terminal interface for working directly with Github web-based operations like creating a repo pull requests, issues, and more.\n\nMercurial is also a great one but I have never used it professionally with GitHub.\n\n\nThat sums up a basic developer environment and tools I do recommend.\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '5fe187955620145ec6e3a5c2',
        '56744721958ef13879b94e0c',
        '57ebac0bd9b08ec06a77be05',
        '56b0ba4604f0061506b35fae',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4455.0142,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
      ],
      totalReactions: 11,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fee1ae7017ebb59232dd95b',
      title: '21 In a Glimpse',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: '21-in-a-glimpse',
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      dateAdded: '2020-12-31T18:39:35.346Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckjd708vr0ikrlvs15lajbcy2',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fee17f2017ebb59232dd918',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 6,
      __v: 0,
      dateUpdated: '2020-12-31T18:45:00.222Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
      },
      viewsUpdatedOn: 1671071462509,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
      },
      id: '5fee1ae7017ebb59232dd95b',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckj5n36jy08g8ozs19faebpmb-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 347,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1608981427966/as3vezSja.png',
      autoGeneratedCover: '',
      brief:
        'https://react-bootstrap-temp.netlify.app/\nI love using Bootstrap because it saves time when trying to make a site responsive. After learning to use react, I started working on using bootstrap with react. It was tough at first, and after I got a hang ...',
      content:
        '<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://react-bootstrap-temp.netlify.app/">https://react-bootstrap-temp.netlify.app/</a></div>\n<p>I love using Bootstrap because it saves time when trying to make a site responsive. After learning to use react, I started working on using <a target="_blank" href="https://getbootstrap.com/">bootstrap</a> with <a target="_blank" href="https://reactjs.org/">react</a>. It was tough at first, and after I got a hang of it, I quickly made a template that I\'d reuse every time I want to use react and bootstrap altogether.</p>\n<h1 id="here-is-brief-documentation-and-description-of-the-template">Here is brief documentation and description of the template:</h1>\n<h2 id="usage">Usage:</h2>\n<p>Start using the template in these few simple steps:</p>\n<h3 id="go-to-the-repository">go to the repository</h3>\n<p>Go to https://github.com/ChrisAchinga/react-bootstrap-starter, and click the <code>use template</code> button on the right side, or use this <a target="_blank" href="https://github.com/ChrisAchinga/react-bootstrap-starter/generate">Link</a></p>\n<p>The repo will be recreated on your account.</p>\n<p>Clone the repo on your local environment.</p>\n<p>Install the dependencies:</p>\n<pre><code class="lang-shell">npm install\n</code></pre>\n<p>Start the development server</p>\n<pre><code class="lang-shell">npm start\n</code></pre>\n<h2 id="descrtiption-language-and-frameworks">Descrtiption: Language &amp; Frameworks</h2>\n<h3 id="create-react-app">create-react-app</h3>\n<p>I created the app using <a target="_blank" href="https://create-react-app.dev/">create-react-app</a> tool, which generates starter code-files for React without you worrying about the development environment.</p>\n<p>To start using it, simply run the command:</p>\n<pre><code class="lang-shell">npx create-react-app [project-name]\n</code></pre>\n<p>It will take a couple of minutes to get install everything.</p>\n<p>The project structure will be as shown below:</p>\n<pre><code class="lang-shell">my-app\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n</code></pre>\n<p>Read more about getting started with <a target="_blank" href="https://create-react-app.dev/docs/getting-started">create-react-app here</a></p>\n<h3 id="react-bootstrap">react-bootstrap</h3>\n<p><a target="_blank" href="https://react-bootstrap.github.io/">React-bootstrap</a> is a front-end framework that rebuilds bootstrap to make it compatible with React.</p>\n<p>To start using it in your project, you install it using:</p>\n<pre><code class="lang-shell">npm install react-bootstrap bootstrap\n</code></pre>\n<p>which installs both react-bootstrap and bootstrap.</p>\n<p>You have to import bootstrap CSS as a module in your index.js file:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> <span class="hljs-string">\'bootstrap/dist/css/bootstrap.css\'</span>\n</code></pre>\n<p>Here is a practical example of using react-bootstrap:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> { Container } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-bootstrap\'</span>\n\n<span class="hljs-keyword">const</span> Header = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'starter-template text-center mt-5\'</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{props.pageTitle} Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'lead\'</span>&gt;</span>{props.pageDescription}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Header\n</code></pre>\n<p>You first import the bootstrap component, in this case, the Container, then use it as a JSX element to wrap the contents.</p>\n<p>Read more on using <a target="_blank" href="https://react-bootstrap.github.io/getting-started/introduction">react-bootstrap here</a>.</p>\n<h3 id="react-router-dom">react-router-dom</h3>\n<p>I used <a target="_blank" href="https://www.npmjs.com/package/react-router-dom">react-router-dom</a> to create navigations and pagination of the app.</p>\n<p>It makes it easier to create multiple pages within the react app.</p>\n<p>To use it, simply install using:</p>\n<pre><code class="lang-shell">npm i react-router-dom\n</code></pre>\n<p>This is how I used it in App.js file</p>\n<p>Imported it:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> { BrowserRouter <span class="hljs-keyword">as</span> Router, Route } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-router-dom\'</span>\n</code></pre>\n<p>Using it:</p>\n<pre><code class="lang-js"><span class="hljs-keyword">const</span> App = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">\'/react-bootstrap-starter\'</span> <span class="hljs-attr">component</span>=<span class="hljs-string">{HomePage}</span> <span class="hljs-attr">exact</span> /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">\'/react-bootstrap-starter/about\'</span> <span class="hljs-attr">component</span>=<span class="hljs-string">{AboutPage}</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>I wrapped everything in the BrowserRouter component and specified what components to display based on the current route.</p>\n<h3 id="react-helmet">react-helmet</h3>\n<p><a target="_blank" href="https://github.com/nfl/react-helmet">react-helmet docs</a></p>\n<p>It enables you to create different  meta and title stages on different pages on your react application.</p>\n<p>To install, simply run:</p>\n<pre><code class="lang-shell">npm install --save react-helmet\n</code></pre>\n<p>Here\'s how I used it:</p>\n<p>Home Page:</p>\n<p><code>src/pages/HomePage.js</code></p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> { Helmet } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-helmet\'</span>\n<span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">\'../components/Header\'</span>\n\n<span class="hljs-keyword">const</span> HomePage = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Helmet</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Home Page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">\'description\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">\'Helmet application\'</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Helmet</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">pageTitle</span>=<span class="hljs-string">\'Landing\'</span> <span class="hljs-attr">pageDescription</span>=<span class="hljs-string">\'This is the Landing Page\'</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> HomePage\n</code></pre>\n<p>About Page:</p>\n<p><code>src/pages/AboutPage.js</code></p>\n<pre><code class="lang-js"><span class="hljs-keyword">import</span> { Helmet } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-helmet\'</span>\n<span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">\'../components/Header\'</span>\n\n<span class="hljs-keyword">const</span> AboutPage = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Helmet</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>About Page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">\'description\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">\'Helmet application\'</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Helmet</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">pageTitle</span>=<span class="hljs-string">\'About\'</span> <span class="hljs-attr">pageDescription</span>=<span class="hljs-string">\'About Page\'</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/&gt;</span></span>\n  )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AboutPage\n</code></pre>\n<h4 id="the-end">The End!</h4>\n<p>The repo is open to suggestions and free to use:\n<a target="_blank" href="https://github.com/ChrisAchinga/react-bootstrap-starter">GitHub</a></p>\n<p>Written with ❤️ by <a target="_blank" href="https://linktr.ee/chrisdev">Chris achinga</a></p>\n',
      contentMarkdown:
        "\n%[https://react-bootstrap-temp.netlify.app/]\n\n\nI love using Bootstrap because it saves time when trying to make a site responsive. After learning to use react, I started working on using [bootstrap](https://getbootstrap.com/) with [react](https://reactjs.org/). It was tough at first, and after I got a hang of it, I quickly made a template that I'd reuse every time I want to use react and bootstrap altogether.\n\n# Here is brief documentation and description of the template:\n\n## Usage:\n\nStart using the template in these few simple steps:\n\n### go to the repository\n\nGo to https://github.com/ChrisAchinga/react-bootstrap-starter, and click the `use template` button on the right side, or use this [Link](https://github.com/ChrisAchinga/react-bootstrap-starter/generate)\n\nThe repo will be recreated on your account.\n\nClone the repo on your local environment.\n\nInstall the dependencies:\n\n```shell\nnpm install\n```\n\nStart the development server\n\n```shell\nnpm start\n```\n\n## Descrtiption: Language & Frameworks\n\n### create-react-app\n\nI created the app using [create-react-app](https://create-react-app.dev/) tool, which generates starter code-files for React without you worrying about the development environment.\n\nTo start using it, simply run the command:\n\n```shell\nnpx create-react-app [project-name]\n```\n\nIt will take a couple of minutes to get install everything.\n\nThe project structure will be as shown below:\n\n```shell\nmy-app\n├── README.md\n├── node_modules\n├── package.json\n├── .gitignore\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    ├── serviceWorker.js\n    └── setupTests.js\n```\n\nRead more about getting started with [create-react-app here](https://create-react-app.dev/docs/getting-started)\n\n### react-bootstrap\n\n[React-bootstrap](https://react-bootstrap.github.io/) is a front-end framework that rebuilds bootstrap to make it compatible with React.\n\nTo start using it in your project, you install it using:\n\n```shell\nnpm install react-bootstrap bootstrap\n```\n\nwhich installs both react-bootstrap and bootstrap.\n\nYou have to import bootstrap CSS as a module in your index.js file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css'\n```\n\nHere is a practical example of using react-bootstrap:\n\n```js\nimport { Container } from 'react-bootstrap'\n\nconst Header = (props) => {\n  return (\n    <Container>\n      <div className='starter-template text-center mt-5'>\n        <h1>{props.pageTitle} Page</h1>\n        <p className='lead'>{props.pageDescription}</p>\n      </div>\n    </Container>\n  )\n}\n\nexport default Header\n```\n\nYou first import the bootstrap component, in this case, the Container, then use it as a JSX element to wrap the contents.\n\nRead more on using [react-bootstrap here](https://react-bootstrap.github.io/getting-started/introduction).\n\n### react-router-dom\n\nI used [react-router-dom](https://www.npmjs.com/package/react-router-dom) to create navigations and pagination of the app.\n\nIt makes it easier to create multiple pages within the react app.\n\nTo use it, simply install using:\n\n```shell\nnpm i react-router-dom\n```\n\nThis is how I used it in App.js file\n\nImported it:\n\n```js\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n```\n\nUsing it:\n\n```js\nconst App = () => {\n  return (\n    <Router>\n      <Menu />\n      <main>\n        <Container>\n          <Route path='/react-bootstrap-starter' component={HomePage} exact />\n          <Route path='/react-bootstrap-starter/about' component={AboutPage} />\n        </Container>\n      </main>\n    </Router>\n  )\n}\n```\n\nI wrapped everything in the BrowserRouter component and specified what components to display based on the current route.\n\n### react-helmet\n\n[react-helmet docs](https://github.com/nfl/react-helmet)\n\nIt enables you to create different <HTML> meta and title stages on different pages on your react application.\n\nTo install, simply run:\n\n```shell\nnpm install --save react-helmet\n```\n\nHere's how I used it:\n\nHome Page:\n\n`src/pages/HomePage.js`\n\n```js\nimport { Helmet } from 'react-helmet'\nimport Header from '../components/Header'\n\nconst HomePage = () => {\n  return (\n    <div>\n      <Helmet>\n        <title>Home Page</title>\n        <meta name='description' content='Helmet application' />\n      </Helmet>\n      <Header pageTitle='Landing' pageDescription='This is the Landing Page' />\n    </div>\n  )\n}\n\nexport default HomePage\n```\n\nAbout Page:\n\n`src/pages/AboutPage.js`\n\n```js\nimport { Helmet } from 'react-helmet'\nimport Header from '../components/Header'\n\nconst AboutPage = () => {\n  return (\n    <>\n      <Helmet>\n        <title>About Page</title>\n        <meta name='description' content='Helmet application' />\n      </Helmet>\n      <Header pageTitle='About' pageDescription='About Page' />\n    </>\n  )\n}\n\nexport default AboutPage\n```\n\n\n#### The End!\nThe repo is open to suggestions and free to use:\n[GitHub](https://github.com/ChrisAchinga/react-bootstrap-starter)\n\nWritten with ❤️ by [Chris achinga](https://linktr.ee/chrisdev)\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95434',
        '56744721958ef13879b94be1',
        '56c4cd6eedfec14f66f81d98',
        '56744722958ef13879b950f8',
        '56744722958ef13879b94f32',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4443.8235,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
      ],
      totalReactions: 11,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fe722d8999b3f21e3157680',
      title: 'React & Bootstrap Starter Template',
      type: 'story',
      ogImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1608981414618/GhUfHxb1Z.png',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'react-and-bootstrap-starter-template',
      importedFromMedium: false,
      dateAdded: '2020-12-26T11:47:36.696Z',
      hasCustomDate: false,
      series: null,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckj5n36jy08g8ozs19faebpmb',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fe71028999b3f21e31575b5',
      hasPinnedTag: false,
      readTime: 3,
      __v: 1,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
      },
      dateUpdated: '2021-10-11T13:39:32.071Z',
      pendingPublicationApproval: false,
      subtitle: 'My Open Source React & Bootstrap Starter Templates',
      viewsUpdatedOn: 1671132663525,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d35488',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35485',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d35485: 1,
      },
      id: '5fe722d8999b3f21e3157680',
    },
    {
      audioUrls: {
        male: 'https://hn-audioblogs.s3-us-west-2.amazonaws.com/ckihq5p64030h6zs1bz1n7clh',
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckihq5p64030h6zs1bz1n7clh-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 118,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1607537353913/LqEUZXpOo.png',
      autoGeneratedCover: '',
      brief:
        "It's about time, my favorite website has now a Dark Theme.\n 2020's GitHub Universe  came in with a lot of new goodies and features for the developers and GitHub users.\nOf all the new features, the Dark theme on GitHub and the Emoji skin tone really c...",
      content:
        '<p>It\'s about time, my favorite website has now a <strong>Dark Theme</strong>.</p>\n<p> <a target="_blank" href="https://githubuniverse.com/">2020\'s GitHub Universe</a>  came in with a lot of new goodies and features for the developers and GitHub users.</p>\n<p>Of all the new features, the Dark theme on GitHub and the Emoji skin tone really caught my eyes. Here\'s a quick guide on how to adjust your appearance settings:</p>\n<p>Go to the Appearance tab on your  <a target="_blank" href="https://github.com/settings">GitHub settings</a>:</p>\n<p>Or quickly use this link  <a target="_blank" href="https://github.com/settings/appearance">https://github.com/settings/appearance</a> - Ensure to be logged in to your account </p>\n<p>Default theme:\nSelect The theme of your choice and even more! Emoji skin tone</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607536790984/dMGzskbOC.png" alt="light.png" /></p>\n<p>Dark Theme</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607536856252/WdvCcf6ah.png" alt="dark.png" /></p>\n<p>Now that\'s just a few of the new stuff from GitHub this year, be sure to go through GitHub\'s blog to view more cool stuff.</p>\n<div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://github.blog/2020-12-08-new-from-universe-2020-dark-mode-github-sponsors-for-companies-and-more/">https://github.blog/2020-12-08-new-from-universe-2020-dark-mode-github-sponsors-for-companies-and-more/</a></div>\n',
      contentMarkdown:
        "It's about time, my favorite website has now a **Dark Theme**.\n\n [2020's GitHub Universe](https://githubuniverse.com/)  came in with a lot of new goodies and features for the developers and GitHub users.\n\nOf all the new features, the Dark theme on GitHub and the Emoji skin tone really caught my eyes. Here's a quick guide on how to adjust your appearance settings:\n\nGo to the Appearance tab on your  [GitHub settings](https://github.com/settings):\n\nOr quickly use this link  [https://github.com/settings/appearance](https://github.com/settings/appearance) - Ensure to be logged in to your account \n\nDefault theme:\nSelect The theme of your choice and even more! Emoji skin tone\n\n![light.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1607536790984/dMGzskbOC.png)\n\nDark Theme\n\n![dark.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1607536856252/WdvCcf6ah.png)\n\nNow that's just a few of the new stuff from GitHub this year, be sure to go through GitHub's blog to view more cool stuff.\n\n\n%[https://github.blog/2020-12-08-new-from-universe-2020-dark-mode-github-sponsors-for-companies-and-more/]\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744721958ef13879b94c63', '56744721958ef13879b94c7e'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4412.7308,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 11,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fd11248e44fe338abffc576',
      title: "GitHub's Dark Theme",
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'githubs-dark-theme',
      pollOptions: [],
      dateAdded: '2020-12-09T18:07:04.804Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'ckihq5p64030h6zs1bz1n7clh',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fd10d2fe44fe338abffc50b',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 1,
      __v: 0,
      series: '5fb973291b7ab0041800d9ce',
      dateUpdated: '2021-09-13T08:37:29.252Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      subtitle: '',
      viewsUpdatedOn: 1669757459629,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      id: '5fd11248e44fe338abffc576',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckibngai906hcpqs10d98bhxj-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 186,
      slugOverridden: true,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1607163830144/iaiy2q_IO.png',
      autoGeneratedCover: '',
      brief:
        "It's normal to have a back-end on your website for your forms to be functional. Say no More!\n Netlify  offers hosting to static websites and serverless technologies, and it comes with super great features including form handling without a back-end.\nL...",
      content:
        '<p>It\'s normal to have a back-end on your website for your forms to be functional. Say no More!</p>\n<p> <a target="_blank" href="https://www.netlify.com/">Netlify</a>  offers hosting to static websites and serverless technologies, and it comes with super great features including form handling without a back-end.</p>\n<p>Let\'s build a form with Netlify:</p>\n<p>What you will need:</p>\n<ul>\n<li>Netlify account</li>\n<li>GitHub account</li>\n</ul>\n<p>First off let\'s start with a simple html form:</p>\n<p>Create a new html file and paste the snippet below:</p>\n<pre><code class="lang-html">      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Friends"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"friend-name"</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"name"</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"Country"</span>&gt;</span>Country Of Residence:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"country"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"country"</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"stack"</span>&gt;</span>Your Tech Stack:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"stack"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"stack"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"front-end"</span>&gt;</span>Front-End<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"back-end"</span>&gt;</span>Back-End<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"mobile-developer"</span>&gt;</span>Mobile-Developer<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"full-stack"</span>&gt;</span>Full-Stack<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> /&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n</code></pre>\n<p><a target="_blank" href="https://gist.github.com/sryderdev/01cdd80f79bc9f7c9bbfc6f8f9d8226c">The Complete Html File</a></p>\n<p>We have a simple form that takes in few input from a user., so let\'s deploy the site from Netlify. (Add the file to your new GitHub Repository and deploy form netlify by linking the repo)</p>\n<h2 id="netlify-forms">Netlify Forms</h2>\n<p>To start using Netlify forms, you only need to add a few attributes to your </p> tag.\nYou can either use <code>netlify</code> or <code>data-netlify="true"</code><p></p>\n<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Friends"</span> <span class="hljs-attr">netlify</span>&gt;</span>\n</code></pre>\n<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Friends"</span> <span class="hljs-attr">data-netlify</span>=<span class="hljs-string">"true"</span>&gt;</span>\n</code></pre>\n<p>Use any attribute that makes you feel comfortable. Just like that, you have a functional form on your static site, for real!</p>\n<p>To test your form, go the URL provided by netlify and submit and entry</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607168091527/PHIFtnmcI.png" alt="form-submitted.png" /></p>\n<p>To view your submissions, head over to Netlify dashboard under the Forms tab.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607168264276/a-wl1WVyI.png" alt="dash.png" /></p>\n<p>Click on the name of the form to view the submission. </p>\n<h2 id="adding-a-customized-response-page">Adding a Customized response page</h2>\n<p>Create a new html form, <code>success.html</code> and copy the code below, or add your own success message code:</p>\n<pre><code class="lang-html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span>\n      <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>\n    /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n      <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>\n      <span class="hljs-attr">href</span>=<span class="hljs-string">"https://bootswatch.com/4/slate/bootstrap.min.css"</span>\n    /&gt;</span>\n    <span class="hljs-comment">&lt;!-- Custom styles for this template --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"cover.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"main"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"inner cover"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"lead"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-secondary"</span>\n            &gt;</span>Thank You, I have Recieved Your Details Buddy<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>\n          &gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<p>After that add an action attribute to you opening </p> tag:<p></p>\n<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Friends"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/success.html"</span> <span class="hljs-attr">netlify</span>&gt;</span>\n</code></pre>\n<p>After that, update the GitHub repository and refresh your page and try out the new changes, see what happens after submitting another form.</p>\n<p>The new customized response page.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607169351364/3xpAA50Vp.png" alt="success.png" /></p>\n<p>The End!! Watch out for more interesting articles by subscribing to my newsletter on my  <a target="_blank" href="https://chrisdev.hashnode.dev/">my blog</a></p>\n<p><a target="_blank" href="http://chrisachinga.me">My Profile</a></p>\n',
      contentMarkdown:
        'It\'s normal to have a back-end on your website for your forms to be functional. Say no More!\n\n [Netlify](https://www.netlify.com/)  offers hosting to static websites and serverless technologies, and it comes with super great features including form handling without a back-end.\n\nLet\'s build a form with Netlify:\n\nWhat you will need:\n\n- Netlify account\n- GitHub account\n\nFirst off let\'s start with a simple html form:\n\nCreate a new html file and paste the snippet below:\n\n\n```html\n      <form method="post" name="Friends">\n        <p>\n          <label for="friend-name">Name:</label>\n          <input type="text" name="name" id="name" />\n        </p>\n        <p>\n          <label for="Country">Country Of Residence:</label>\n          <input type="text" name="country" id="country" />\n        </p>\n        <p>\n          <label for="stack">Your Tech Stack:</label>\n          <select id="stack" name="stack">\n            <option value="front-end">Front-End</option>\n            <option value="back-end">Back-End</option>\n            <option value="mobile-developer">Mobile-Developer</option>\n            <option value="full-stack">Full-Stack</option>\n          </select>\n        </p>\n        <p>\n          <input type="submit" />\n        </p>\n      </form>\n``` \n[The Complete Html File](https://gist.github.com/sryderdev/01cdd80f79bc9f7c9bbfc6f8f9d8226c)\n\nWe have a simple form that takes in few input from a user., so let\'s deploy the site from Netlify. (Add the file to your new GitHub Repository and deploy form netlify by linking the repo)\n\n## Netlify Forms\n\nTo start using Netlify forms, you only need to add a few attributes to your <form> tag.\nYou can either use `netlify` or `data-netlify="true"`\n\n```html\n<form method="post" name="Friends" netlify>\n``` \n\n```html\n<form method="post" name="Friends" data-netlify="true">\n``` \n\nUse any attribute that makes you feel comfortable. Just like that, you have a functional form on your static site, for real!\n\nTo test your form, go the URL provided by netlify and submit and entry\n\n\n![form-submitted.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1607168091527/PHIFtnmcI.png)\n\nTo view your submissions, head over to Netlify dashboard under the Forms tab.\n\n\n![dash.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1607168264276/a-wl1WVyI.png)\n\nClick on the name of the form to view the submission. \n\n## Adding a Customized response page\n\nCreate a new html form, `success.html` and copy the code below, or add your own success message code:\n\n\n```html\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1, shrink-to-fit=no"\n    />\n    <title>Success</title>\n    <link\n      rel="stylesheet"\n      href="https://bootswatch.com/4/slate/bootstrap.min.css"\n    />\n    <!-- Custom styles for this template -->\n    <link href="cover.css" rel="stylesheet" />\n  </head>\n  <body class="text-center">\n    <div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">\n      <main role="main" class="inner cover">\n        <p class="lead">\n          <a href="#" class="btn btn-lg btn-secondary"\n            >Thank You, I have Recieved Your Details Buddy</a\n          >\n        </p>\n      </main>\n    </div>\n  </body>\n</html>\n``` \n\nAfter that add an action attribute to you opening <form> tag:\n\n```html\n<form method="post" name="Friends" action="/success.html" netlify>\n``` \n\nAfter that, update the GitHub repository and refresh your page and try out the new changes, see what happens after submitting another form.\n\nThe new customized response page.\n\n![success.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1607169351364/3xpAA50Vp.png)\n\nThe End!! Watch out for more interesting articles by subscribing to my newsletter on my  [my blog](https://chrisdev.hashnode.dev/)\n\n[My Profile](http://chrisachinga.me)\n',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '57ce27e495368c463b098050',
        '56744721958ef13879b948fa',
        '57cbff559b3eb82e014a0364',
        '5f789ec19c3b6e410121699a',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4405.0703,
      responses: [
        {
          popularity: 5390.2528,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '6270ff5f9ed78401a6409471',
          content: '<p>I prefer to use   the forms backend fabform.io</p>\n',
          contentMarkdown: 'I prefer to use   the forms backend fabform.io',
          author: '6270fec89ed78401a640945c',
          stamp: 'cl2pzo2ym02iuannva8zi1ekp',
          post: '5fcb775a2e4db7780e4832a1',
          replies: [],
          dateAdded: '2022-05-03T10:09:35.231Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      totalReactions: 35,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fcb775a2e4db7780e4832a1',
      title: 'Using Netlify Forms',
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'netlify-forms',
      importedFromMedium: false,
      dateAdded: '2020-12-05T12:04:42.794Z',
      hasCustomDate: false,
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '6270ff5f9ed78401a6409472',
          user: '6270fec89ed78401a640945c',
          stamp: 'cl2pzo2ym02iuannva8zi1ekp',
        },
      ],
      cuid: 'ckibngai906hcpqs10d98bhxj',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fcb5f8d2e4db7780e4831b6',
      hasPinnedTag: false,
      readTime: 4,
      __v: 1,
      dateUpdated: '2020-12-20T11:20:18.426Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_567453d0b73d6a82ac8c5abc: 4,
        reaction_5c090d96c2a9c2a674d35484: 4,
        reaction_567453d0b73d6a82ac8c5ab9: 3,
        reaction_5c090d96c2a9c2a674d3548b: 3,
        reaction_5c090d96c2a9c2a674d35485: 4,
        reaction_5c090d96c2a9c2a674d35486: 4,
        reaction_5c090d96c2a9c2a674d35488: 3,
        reaction_5d9dd859f31791c942dc5b52: 3,
        reaction_5c090d96c2a9c2a674d3548a: 3,
        reaction_567453d0b73d6a82ac8c5abd: 4,
      },
      viewsUpdatedOn: 1670868063128,
      lastActivity: '2022-05-14T03:59:43.172Z',
      uniqueReactions: [
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5ab9',
        '5c090d96c2a9c2a674d3548b',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548a',
        '567453d0b73d6a82ac8c5abd',
      ],
      reactionToCountMapUnique: {
        reaction_567453d0b73d6a82ac8c5abc: 4,
        reaction_5c090d96c2a9c2a674d35484: 4,
        reaction_567453d0b73d6a82ac8c5ab9: 3,
        reaction_5c090d96c2a9c2a674d3548b: 3,
        reaction_5c090d96c2a9c2a674d35485: 4,
        reaction_5c090d96c2a9c2a674d35486: 4,
        reaction_5c090d96c2a9c2a674d35488: 3,
        reaction_5d9dd859f31791c942dc5b52: 3,
        reaction_5c090d96c2a9c2a674d3548a: 3,
        reaction_567453d0b73d6a82ac8c5abd: 4,
      },
      id: '5fcb775a2e4db7780e4832a1',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckiakuder01uhqrs1bb8ja6mq-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 78,
      slugOverridden: true,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1607105083743/rXvcjS6Ot.png',
      autoGeneratedCover: '',
      brief:
        "React is a front-end JavaScript library. So you probably want to know the basics of JavaScript before diving into react, otherwise you will end up having a rough journey which isn't good for your productivity.\nI wouldn't advice you to fully rely on m...",
      content:
        '<p>React is a front-end <strong>JavaScript</strong> library. So you probably want to know the basics of JavaScript before diving into react, otherwise you will end up having a rough journey which isn\'t good for your productivity.</p>\n<p>I wouldn\'t advice you to fully rely on my article, I had a quite rough journey and after I finally understood React, I better document it for a future me.</p>\n<p>In this article, I\'ll highlight the essentials and most important things to learn and provide a link to the resources as we gear up to creating your first React application.</p>\n<h3 id="in-this-article">In This Article</h3>\n<ul>\n<li><p><a class="post-section-overview" href="#before-react">Before React</a></p>\n<ul>\n<li><a class="post-section-overview" href="#in-this-article">In This Article</a></li>\n<li><a class="post-section-overview" href="#what-is-react">What is React</a></li>\n<li><p><a class="post-section-overview" href="#laying-the-foundation">Laying The Foundation</a></p>\n<ul>\n<li><p><a class="post-section-overview" href="#javascript">JavaScript</a></p>\n<ul>\n<li><a class="post-section-overview" href="#arrow-functions">Arrow Functions</a></li>\n<li><a class="post-section-overview" href="#classes">Classes</a></li>\n<li><a class="post-section-overview" href="#es6-features">ES6 Features</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="what-is-react">What is React</h2>\n<p>React is an open-source JavaScript library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications</p>\n<h2 id="laying-the-foundation">Laying The Foundation</h2>\n<ul>\n<li><a class="post-section-overview" href="#javascript">JavaScript</a></li>\n<li><a class="post-section-overview" href="#arrow-functions">Arrow Functions</a></li>\n<li><a class="post-section-overview" href="#classes">Classes</a></li>\n<li><a class="post-section-overview" href="#es6-features">ES6 Features</a></li>\n</ul>\n<p>Since React is a JavaScript library, it is essential to understand the basic and important features of JavaScript. Not everything in JavaScript, just the essentials:</p>\n<h3 id="javascript">JavaScript</h3>\n<p>If you have been into web development for sometime now, you\'ve probably heard of or seen JavaScript somewhere.</p>\n<blockquote>\n<p>Well, JavaScript is a programming language used in client side scripting and also in the backend - Just a heads up</p>\n</blockquote>\n<p>There are plenty of free and paid courses and tutorials for JavaScript. I advice you to get the hard way, "Google It"\nTo view a list of repositories on GitHub, go to: https://github.com/search?q=javascript+resources</p>\n<p>Other curated resources are:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript\nhttps://javascript30.com/</p>\n<h4 id="arrow-functions">Arrow Functions</h4>\n<p>Arrow functions are an alternative to the traditional function expressions. They utilize a new token, =&gt; that looks like arrow hence the name.</p>\n<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-comment">//code block</span>\n}\n</code></pre>\n<p>An Arrow function would look like:</p>\n<pre><code class="lang-javascript">() =&gt; {\n  <span class="hljs-comment">//code block</span>\n};\n</code></pre>\n<p>To learn more on Arrow functions; https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions</p>\n<h4 id="classes">Classes</h4>\n<p>JavaScript classes are more like special function</p>\n<p>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes</p>\n<h4 id="es6-features">ES6 Features</h4>\n<p>React uses latest JavaAcript es6 features. So it\'s a good idea to go through them.</p>\n<p>Below is a link to the resources:</p>\n<p>https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla</p>\n<p>https://catalins.tech/javascript-es2020-the-features-you-should-know</p>\n<p>Once your are done going through the basics, you\'ll be more than ready to learn and use React in your next project.</p>\n<p><a target="_blank" href="http://chrisachinga.me">My Profile</a></p>\n',
      contentMarkdown:
        "React is a front-end **JavaScript** library. So you probably want to know the basics of JavaScript before diving into react, otherwise you will end up having a rough journey which isn't good for your productivity.\n\nI wouldn't advice you to fully rely on my article, I had a quite rough journey and after I finally understood React, I better document it for a future me.\n\nIn this article, I'll highlight the essentials and most important things to learn and provide a link to the resources as we gear up to creating your first React application.\n\n### In This Article\n\n* [Before React](#before-react)\n\n  * [In This Article](#in-this-article)\n  * [What is React](#what-is-react)\n  * [Laying The Foundation](#laying-the-foundation)\n\n    * [JavaScript](#javascript)\n\n      * [Arrow Functions](#arrow-functions)\n      * [Classes](#classes)\n      * [ES6 Features](#es6-features)\n\n## What is React\n\nReact is an open-source JavaScript library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications\n\n## Laying The Foundation\n\n* [JavaScript](#javascript)\n* [Arrow Functions](#arrow-functions)\n* [Classes](#classes)\n* [ES6 Features](#es6-features)\n\nSince React is a JavaScript library, it is essential to understand the basic and important features of JavaScript. Not everything in JavaScript, just the essentials:\n\n### JavaScript\n\nIf you have been into web development for sometime now, you've probably heard of or seen JavaScript somewhere.\n\n> Well, JavaScript is a programming language used in client side scripting and also in the backend - Just a heads up\n\nThere are plenty of free and paid courses and tutorials for JavaScript. I advice you to get the hard way, \"Google It\"\nTo view a list of repositories on GitHub, go to: https://github.com/search?q=javascript+resources\n\nOther curated resources are:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript\nhttps://javascript30.com/\n\n#### Arrow Functions\n\nArrow functions are an alternative to the traditional function expressions. They utilize a new token, => that looks like arrow hence the name.\n\n```javascript\nfunction() {\n    //code block\n}\n```\n\nAn Arrow function would look like:\n\n```javascript\n() => {\n  //code block\n};\n```\n\nTo learn more on Arrow functions; https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n\n#### Classes\n\nJavaScript classes are more like special function\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\n\n#### ES6 Features\n\nReact uses latest JavaAcript es6 features. So it's a good idea to go through them.\n\nBelow is a link to the resources:\n\nhttps://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla\n\nhttps://catalins.tech/javascript-es2020-the-features-you-should-know\n\nOnce your are done going through the basics, you'll be more than ready to learn and use React in your next project.\n\n[My Profile](http://chrisachinga.me)",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744723958ef13879b95434',
        '56744721958ef13879b94cad',
        '56744723958ef13879b954cb',
        '56744723958ef13879b955a9',
        '576ab68f152618ad1dc938ad',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4403.1644,
      responses: [
        {
          popularity: 4705.587,
          isActive: true,
          upvotedBy: [],
          downvotedBy: [],
          upvotes: 0,
          downvotes: 0,
          isCollapsed: false,
          totalBadgesAwarded: 0,
          isRewardWinner: false,
          bookmarkedIn: [],
          score: 0,
          reactions: [],
          totalReactions: 0,
          reactionsByCurrentUser: [],
          _id: '609adff6c798bd79ff8ec4e2',
          content:
            '<p>Just started going through vue and I can attest that just like react you need a key understanding of javascript fundamentals</p>\n',
          contentMarkdown:
            'Just started going through vue and I can attest that just like react you need a key understanding of javascript fundamentals',
          author: '5ff5f3dee8e57e1374e6ac40',
          stamp: 'ckokg7pb201ua3js15kp0byxw',
          post: '5fca7a0a7865da78339e5252',
          replies: [],
          dateAdded: '2021-05-11T19:50:14.751Z',
          badgesAwarded: [],
          __v: 0,
        },
      ],
      responseCount: 1,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
      ],
      totalReactions: 12,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fca7a0a7865da78339e5252',
      title: 'Before starting React, I think you should ...',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'before-starting-react',
      series: '5fbea03f08c16c34b89c453a',
      pollOptions: [],
      dateAdded: '2020-12-04T18:03:54.788Z',
      badges: [],
      questionReplies: [],
      contributors: [
        {
          _id: '609adff6c798bd79ff8ec4e3',
          user: '5ff5f3dee8e57e1374e6ac40',
          stamp: 'ckokg7pb201ua3js15kp0byxw',
        },
      ],
      cuid: 'ckiakuder01uhqrs1bb8ja6mq',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fca76e62e4db7780e4825f0',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 4,
      __v: 1,
      dateUpdated: '2020-12-04T18:08:54.303Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 3,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
      },
      lastActivity: '2021-05-11T19:50:14.783Z',
      viewsUpdatedOn: 1666166408405,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
        '5c090d96c2a9c2a674d3548b',
        '5d9dd859f31791c942dc5b52',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 3,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_567453d0b73d6a82ac8c5abd: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
      },
      id: '5fca7a0a7865da78339e5252',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cki7mjlbx03tolps11jr5by0l-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 122,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1607000167319/S1pDIwymj.png',
      autoGeneratedCover: '',
      brief:
        'It\'s the time of the year we get alot of "top language of the year" kind of talks every where. In addition to that, the "What to expect as a dev in the next year" stuff too.\nIt\'s not a bad thought to read the stuff, or watch, or listen. I\'ve had frie...',
      content:
        "<p>It's the time of the year we get alot of \"top language of the year\" kind of talks every where. In addition to that, the \"What to expect as a dev in the next year\" stuff too.</p>\n<p>It's not a bad thought to read the stuff, or watch, or listen. I've had friends who switched their tech stack just because some language or tool was mostly used, and it didn't end up well. </p>\n<p>I always advise myself to go with what is good for what I'm trying to solve or create, I wouldn't care what language or tool I use as long as it delivers the desirable results. That's why I avoid \"this\" vs \"this\" dubbed items online. At some point they help but no.</p>\n<p>I wouldn't rate my success within a 365-day period, that kind of limits my expectations and goals that I want to achieve. I mean, there's no reason or excuse to wait till \"next year\" to start learning a tech tool or something, like there's nothing to lose by just starting.</p>\n<p>A mistake I have done, and maybe still doing is starting alot of projects and not completing them, not even getting halfway done. I regret not finishing them at the same time I don't do nothing about it, procrastinating is a weakness I'll try to get it out of my system.</p>\n<p>About a month ago, I made a pact to myself, \" Chris, a day shouldn't pass without making at lease a commit on your GitHub projects.\"</p>\n<p>Yeah I know GitHub commits do not prove ones productivity, but on my side, I'm getting better at my coding styles, development styles and even started open source projects, and contributed to some.</p>\n<p>When it comes to work, there's a saying in my language \"Mchagua jembe si mkulima\". It simply translates to anyone in need of assistance, should not choose where the assistance comes from.</p>\n<p>I don't have a job, not employed, but I won't just apply for any job available. I feel that I have been shaping myself to be the best and would want to work where my contribution gets the respect ot deserves. I mean it's not bad to want to work for Facebook (my dream employer) ot Netflix or Google or Amazon.</p>\n<p>I have a lot of stuff on my head, all I can tell myself is that I will do my best to make myself the best of me, help my colleague and anyone in need.</p>\n<p>I will keep doing what I do till I get to being comfortable writing code and making impact.</p>\n",
      contentMarkdown:
        "It's the time of the year we get alot of \"top language of the year\" kind of talks every where. In addition to that, the \"What to expect as a dev in the next year\" stuff too.\n\nIt's not a bad thought to read the stuff, or watch, or listen. I've had friends who switched their tech stack just because some language or tool was mostly used, and it didn't end up well. \n\nI always advise myself to go with what is good for what I'm trying to solve or create, I wouldn't care what language or tool I use as long as it delivers the desirable results. That's why I avoid \"this\" vs \"this\" dubbed items online. At some point they help but no.\n\nI wouldn't rate my success within a 365-day period, that kind of limits my expectations and goals that I want to achieve. I mean, there's no reason or excuse to wait till \"next year\" to start learning a tech tool or something, like there's nothing to lose by just starting.\n\nA mistake I have done, and maybe still doing is starting alot of projects and not completing them, not even getting halfway done. I regret not finishing them at the same time I don't do nothing about it, procrastinating is a weakness I'll try to get it out of my system.\n\nAbout a month ago, I made a pact to myself, \" Chris, a day shouldn't pass without making at lease a commit on your GitHub projects.\"\n\nYeah I know GitHub commits do not prove ones productivity, but on my side, I'm getting better at my coding styles, development styles and even started open source projects, and contributed to some.\n\nWhen it comes to work, there's a saying in my language \"Mchagua jembe si mkulima\". It simply translates to anyone in need of assistance, should not choose where the assistance comes from.\n\nI don't have a job, not employed, but I won't just apply for any job available. I feel that I have been shaping myself to be the best and would want to work where my contribution gets the respect ot deserves. I mean it's not bad to want to work for Facebook (my dream employer) ot Netflix or Google or Amazon.\n\nI have a lot of stuff on my head, all I can tell myself is that I will do my best to make myself the best of me, help my colleague and anyone in need.\n\nI will keep doing what I do till I get to being comfortable writing code and making impact.",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['5f19d647cef915427a14ca2c'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4398.1176,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35484'],
      totalReactions: 1,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fc7c09c6819c54efdf2e373',
      title: 'A Penny For My Thoughts',
      type: 'story',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'a-penny-for-my-thoughts',
      pollOptions: [],
      dateAdded: '2020-12-02T16:28:12.556Z',
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cki7mjlbx03tolps11jr5by0l',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fc7bb96ff636d4f4984cd37',
      isRepublished: false,
      hasPinnedTag: false,
      readTime: 4,
      __v: 0,
      series: null,
      dateUpdated: '2020-12-03T12:56:17.142Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      viewsUpdatedOn: 1643369408139,
      uniqueReactions: ['5c090d96c2a9c2a674d35484'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 1,
      },
      id: '5fc7c09c6819c54efdf2e373',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/cki0m5v1g00jezts134fr90ez-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 108,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1606502383723/PKKHearC3.png',
      autoGeneratedCover: '',
      brief:
        "gh cli web\nWorking with GitHub has never been boring, as a matter of fact, it's the best part of the development process on my side. As usual, we use git and other distributed version control systems like Mercurial and many more.\nI have been using th...",
      content:
        '<p><a target="_blank" href="https://cli.github.com/">gh cli web</a></p>\n<p>Working with GitHub has never been boring, as a matter of fact, it\'s the best part of the development process on my side. As usual, we use git and other distributed version control systems like Mercurial and many more.</p>\n<p>I have been using the GitHub cli since February this year, and it is great. So let me show you how I got to use it. I\'m on Ubuntu by the way. But I guess the process is the same on other OS, I\'ll check it out.</p>\n<p>First, you download it on <a target="_blank" href="https://github.com/cli/cli/releases">releases</a>. Select the file with an extension based on your OS. </p>\n<p>After download, follow normal procedures of installing an app on your environment/OS. Once the file is installed, BOOM! You are ready to interact with the gh cli.  </p>\n<p>There are no many configuration settings needed. The commands can be used anywhere regardless of the Operating System. The commands are as shown below:</p>\n<p>General Activity</p>\n<table>\n<thead>\n<tr>\n<td>Command</td><td>usage</td><td>detailed usage</td></tr>\n</thead>\n<tbody>\n<tr>\n<td><code>gh --version</code></td><td>view version of gh cli</td><td>-</td></tr>\n</tbody>\n</table>\n<p>Working with repositories (repo)</p>\n<table>\n<thead>\n<tr>\n<td>Command</td><td>usage</td><td>detailed usage</td></tr>\n</thead>\n<tbody>\n<tr>\n<td><code>gh repo view</code></td><td>view current repo on the browser (web)</td><td>https://cli.github.com/manual/gh_repo_view</td></tr>\n<tr>\n<td><code>gh repo fork</code></td><td>create a fork of a repo</td><td>https://cli.github.com/manual/gh_repo_fork</td></tr>\n<tr>\n<td><code>gh repo create</code></td><td>create a new repo</td><td>https://cli.github.com/manual/gh_repo_create</td></tr>\n<tr>\n<td><code>gh repo clone</code></td><td>clone a repo locally</td><td>https://cli.github.com/manual/gh_repo_clone</td></tr>\n</tbody>\n</table>\n<p>Working with Issues</p>\n<table>\n<thead>\n<tr>\n<td>Command</td><td>usage</td><td>detailed usage</td></tr>\n</thead>\n<tbody>\n<tr>\n<td><code>gh issue view</code></td><td>view an issue of a repo</td><td>https://cli.github.com/manual/gh_issue_view</td></tr>\n<tr>\n<td><code>gh issue create</code></td><td>create an issue locally</td><td>https://cli.github.com/manual/gh_issue_create</td></tr>\n<tr>\n<td><code>gh issue status</code></td><td>displays the status of issues on the repo</td><td>https://cli.github.com/manual/gh_issue_status</td></tr>\n<tr>\n<td><code>gh issue list</code></td><td>lists all issues raised on the repo</td><td>https://cli.github.com/manual/gh_issue_list</td></tr>\n</tbody>\n</table>\n<p>Working with pull requests (pr)</p>\n<table>\n<thead>\n<tr>\n<td>Command</td><td>usage</td><td>detailed usage</td></tr>\n</thead>\n<tbody>\n<tr>\n<td><code>gh pr view</code></td><td>view pull requests in browser</td><td>https://cli.github.com/manual/gh_pr_view</td></tr>\n<tr>\n<td><code>gh pr status</code></td><td>lists the statuses of available pull requests</td><td>https://cli.github.com/manual/gh_pr_status</td></tr>\n<tr>\n<td><code>gh pr list</code></td><td>lists all pull requests in the current repo</td><td>https://cli.github.com/manual/gh_pr_list</td></tr>\n<tr>\n<td><code>gh pr create</code></td><td>create a pull request</td><td>https://cli.github.com/manual/gh_pr_create</td></tr>\n<tr>\n<td><code>gh pr checkout</code></td><td>check out a pull request in git</td><td>https://cli.github.com/manual/gh_pr_checkout</td></tr>\n</tbody>\n</table>\n<h4 id="references">References</h4>\n<ol>\n<li><a target="_blank" href="https://cli.github.com/manual/installation">installation instructions</a></li>\n<li><a target="_blank" href="https://cli.github.com/manual/">gh cli manual</a></li>\n</ol>\n',
      contentMarkdown:
        "[gh cli web](https://cli.github.com/)\n\nWorking with GitHub has never been boring, as a matter of fact, it's the best part of the development process on my side. As usual, we use git and other distributed version control systems like Mercurial and many more.\n\nI have been using the GitHub cli since February this year, and it is great. So let me show you how I got to use it. I'm on Ubuntu by the way. But I guess the process is the same on other OS, I'll check it out.\n\nFirst, you download it on [releases](https://github.com/cli/cli/releases). Select the file with an extension based on your OS. \n\nAfter download, follow normal procedures of installing an app on your environment/OS. Once the file is installed, BOOM! You are ready to interact with the gh cli.  \n\nThere are no many configuration settings needed. The commands can be used anywhere regardless of the Operating System. The commands are as shown below:\n\nGeneral Activity\n\n| Command        | usage        | detailed usage |\n| ------------- |:-------------:|:-------------:| \n| `gh --version` | view version of gh cli | - |\n\nWorking with repositories (repo)\n\n| Command        | usage        | detailed usage |\n| ------------- |:-------------:|:-------------:|\n| `gh repo view` | view current repo on the browser (web) | https://cli.github.com/manual/gh_repo_view |   \n| `gh repo fork` | create a fork of a repo | https://cli.github.com/manual/gh_repo_fork |\n| `gh repo create` | create a new repo | https://cli.github.com/manual/gh_repo_create |\n| `gh repo clone` | clone a repo locally | https://cli.github.com/manual/gh_repo_clone |\n\nWorking with Issues\n\n| Command        | usage        | detailed usage |\n| ------------- |:-------------:|:-------------:|\n| `gh issue view` | view an issue of a repo | https://cli.github.com/manual/gh_issue_view |\n| `gh issue create` | create an issue locally | https://cli.github.com/manual/gh_issue_create |\n| `gh issue status` | displays the status of issues on the repo | https://cli.github.com/manual/gh_issue_status |\n| `gh issue list` | lists all issues raised on the repo | https://cli.github.com/manual/gh_issue_list |\n\nWorking with pull requests (pr)\n\n| Command        | usage        | detailed usage |\n| ------------- |:-------------:|:-------------:|\n| `gh pr view` | view pull requests in browser | https://cli.github.com/manual/gh_pr_view |\n| `gh pr status` | lists the statuses of available pull requests | https://cli.github.com/manual/gh_pr_status |\n| `gh pr list` | lists all pull requests in the current repo | https://cli.github.com/manual/gh_pr_list |\n| `gh pr create` | create a pull request | https://cli.github.com/manual/gh_pr_create |\n| `gh pr checkout` | check out a pull request in git | https://cli.github.com/manual/gh_pr_checkout |\n\n#### References\n1. [installation instructions](https://cli.github.com/manual/installation)\n2. [gh cli manual](https://cli.github.com/manual/)\n\n\n\n\n\n",
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: [
        '56744721958ef13879b94c63',
        '57ebac0bd9b08ec06a77be05',
        '5f789ec19c3b6e410121699a',
        '56744722958ef13879b9506b',
      ],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4388.9985,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      totalReactions: 12,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: false,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: true,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fc148bc2cae9c5b190b6a7a',
      title: "Using Github's CLI on Ubuntu & Commands.",
      type: 'story',
      ogImage: '',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'using-githubs-cli-on-ubuntu-and-commands',
      importedFromMedium: false,
      dateAdded: '2020-11-27T18:43:08.701Z',
      hasCustomDate: false,
      series: '5fb973291b7ab0041800d9ce',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      cuid: 'cki0m5v1g00jezts134fr90ez',
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fc147b2f1207e5b3cdefff8',
      hasPinnedTag: false,
      readTime: 4,
      __v: 0,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      viewsUpdatedOn: 1661149809641,
      uniqueReactions: [
        '5c090d96c2a9c2a674d35484',
        '567453d0b73d6a82ac8c5abd',
        '5c090d96c2a9c2a674d35485',
        '5c090d96c2a9c2a674d35486',
        '5c090d96c2a9c2a674d3548a',
        '5c090d96c2a9c2a674d35488',
        '5d9dd859f31791c942dc5b52',
        '5c090d96c2a9c2a674d3548b',
        '567453d0b73d6a82ac8c5ab9',
        '567453d0b73d6a82ac8c5abc',
      ],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35484: 2,
        reaction_567453d0b73d6a82ac8c5abd: 2,
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35486: 1,
        reaction_5c090d96c2a9c2a674d3548a: 1,
        reaction_5c090d96c2a9c2a674d35488: 1,
        reaction_5d9dd859f31791c942dc5b52: 1,
        reaction_5c090d96c2a9c2a674d3548b: 1,
        reaction_567453d0b73d6a82ac8c5ab9: 1,
        reaction_567453d0b73d6a82ac8c5abc: 1,
      },
      id: '5fc148bc2cae9c5b190b6a7a',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckhs4kd7906jnt4s1dn9m0hhl-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 141,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1605989260858/_URl3DV_h.png',
      autoGeneratedCover: '',
      brief:
        'The GitHub CLI (gh repo clone)\n\n\nGitHub CLI beta version was released a while ago, and it comes with really cool features. I have been using and interacting with GitHub without necessarily visiting the website, that’s fun right.\nAn alternative to usi...',
      content:
        '<p><span class="s"></span></p>\n<h1 id="the-github-cli-gh-repo-clone">The GitHub CLI (gh repo clone)</h1>\n<img alt="Image for post" src="https://miro.medium.com/max/1436/1*_t6Uv_WHkdAqBj7GO0a8_g.png" />\n\n<p><a target="_blank" href="https://cli.github.com/">GitHub CLI</a> beta version was released a while ago, and it comes with really cool features. I have been using and interacting with GitHub without necessarily visiting the website, that’s fun right.</p>\n<p>An alternative to using GitHub CLI is <a target="_blank" href="https://hub.github.com/">HUB</a>, which was there before GitHub cli was introduced.</p>\n<p>GitHub CLI is an open-source project, here on <a target="_blank" href="https://github.com/cli/cli/">GitHub</a>.</p>\n<p>I had an article before on <a target="_blank" href="https://dev.to/chrisachinga/using-github-s-cli-on-ubuntu-commands-3a89">using GitHub CLI and its commands</a>, so this is kind of like an update because the cli is up on version 1.x.x right now, better to stay on the know/updated. To get the latest releases of the cli <a target="_blank" href="https://github.com/cli/cli/releases">https://github.com/cli/cli/releases</a></p>\n<p><img src="https://miro.medium.com/max/60/1*pn3P9h9Yv3dNcO5ZkgXBSg.png?q=20" alt="Image for post" /></p>\n<img alt="Image for post" src="https://miro.medium.com/max/2732/1*pn3P9h9Yv3dNcO5ZkgXBSg.png" />\n\n<p>Everything you need to know about the cli is on their site, <a target="_blank" href="https://cli.github.com/">https://cli.github.com/</a></p>\n<h1 id="installation">Installation</h1>\n<p><a target="_blank" href="https://cli.github.com/">GitHub CLI</a> has to be installed on your device for you to use it.</p>\n<p>View installation procedures based on your operating system:</p>\n<p><a target="_blank" href="https://github.com/cli/cli#installation">Installing GitHub CLI</a></p>\n<h1 id="usage">Usage</h1>\n<p>With the cli, you can create repositories, pull requests, issues, clone repos, and much more.</p>\n<p>If I were to write on every usage gh cli has to offer, this would have been one of the longest and probably most boring technical articles, so I’ll break them down and make a mini-article-series if that makes sense.</p>\n<h1 id="gh-repo-clone"><code>gh repo clone</code></h1>\n<p>This is one of the commands GitHub cli comes with. The gh clone works in a similar way as the popular git command, git clone.</p>\n<p>Note that git and GitHub cli are two different things, but the gh clone and git clone perform a similar function altogether and have a similar syntax.</p>\n<p>to use the command, browse into your favorite GitHub project, and clone it using GitHub cli, easy and fun.</p>\n<p>For me, I’ll go to one of my repos, <a target="_blank" href="https://github.com/ChrisAchinga/javascript.">https://github.com/ChrisAchinga/javascript.</a> Click on the green button code, a dropdown appears, click on the Github CLI tab and copy the command; <code>gh repo clone ChrisAchinga/javascript</code></p>\n<p><img src="https://miro.medium.com/max/60/1*U0WvFiMOwWgYcTzAegxiFA.png?q=20" alt="Image for post" /></p>\n<img alt="Image for post" src="https://miro.medium.com/max/2732/1*U0WvFiMOwWgYcTzAegxiFA.png" />\n\n<p>Simple as that and you are done.</p>\n<p>A simple start to becoming a GitHub cli master!</p>\n',
      contentMarkdown:
        '<span class="s"></span>\n\n# The GitHub CLI (gh repo clone)\n\n\n<noscript><img alt="Image for post" class="t u v gv aj" src="https://miro.medium.com/max/1436/1*_t6Uv_WHkdAqBj7GO0a8_g.png" width="718" height="436" srcSet="https://miro.medium.com/max/552/1*_t6Uv_WHkdAqBj7GO0a8_g.png 276w, https://miro.medium.com/max/1104/1*_t6Uv_WHkdAqBj7GO0a8_g.png 552w, https://miro.medium.com/max/1280/1*_t6Uv_WHkdAqBj7GO0a8_g.png 640w, https://miro.medium.com/max/1400/1*_t6Uv_WHkdAqBj7GO0a8_g.png 700w" sizes="700px"/></noscript>\n\n[GitHub CLI](https://cli.github.com/) beta version was released a while ago, and it comes with really cool features. I have been using and interacting with GitHub without necessarily visiting the website, that’s fun right.\n\nAn alternative to using GitHub CLI is [HUB](https://hub.github.com/), which was there before GitHub cli was introduced.\n\nGitHub CLI is an open-source project, here on [GitHub](https://github.com/cli/cli/).\n\nI had an article before on [using GitHub CLI and its commands](https://dev.to/chrisachinga/using-github-s-cli-on-ubuntu-commands-3a89), so this is kind of like an update because the cli is up on version 1.x.x right now, better to stay on the know/updated. To get the latest releases of the cli [https://github.com/cli/cli/releases](https://github.com/cli/cli/releases)\n\n![Image for post](https://miro.medium.com/max/60/1*pn3P9h9Yv3dNcO5ZkgXBSg.png?q=20)\n\n<noscript><img alt="Image for post" class="t u v gv aj" src="https://miro.medium.com/max/2732/1*pn3P9h9Yv3dNcO5ZkgXBSg.png" width="1366" height="768" srcSet="https://miro.medium.com/max/552/1*pn3P9h9Yv3dNcO5ZkgXBSg.png 276w, https://miro.medium.com/max/1104/1*pn3P9h9Yv3dNcO5ZkgXBSg.png 552w, https://miro.medium.com/max/1280/1*pn3P9h9Yv3dNcO5ZkgXBSg.png 640w, https://miro.medium.com/max/1400/1*pn3P9h9Yv3dNcO5ZkgXBSg.png 700w" sizes="700px"/></noscript>\n\nEverything you need to know about the cli is on their site, [https://cli.github.com/](https://cli.github.com/)\n\n# Installation\n\n[GitHub CLI](https://cli.github.com/) has to be installed on your device for you to use it.\n\nView installation procedures based on your operating system:\n\n[Installing GitHub CLI](https://github.com/cli/cli#installation)\n\n# Usage\n\nWith the cli, you can create repositories, pull requests, issues, clone repos, and much more.\n\nIf I were to write on every usage gh cli has to offer, this would have been one of the longest and probably most boring technical articles, so I’ll break them down and make a mini-article-series if that makes sense.\n\n# `gh repo clone`\n\nThis is one of the commands GitHub cli comes with. The gh clone works in a similar way as the popular git command, git clone.\n\nNote that git and GitHub cli are two different things, but the gh clone and git clone perform a similar function altogether and have a similar syntax.\n\nto use the command, browse into your favorite GitHub project, and clone it using GitHub cli, easy and fun.\n\nFor me, I’ll go to one of my repos, [https://github.com/ChrisAchinga/javascript.](https://github.com/ChrisAchinga/javascript.) Click on the green button code, a dropdown appears, click on the Github CLI tab and copy the command; `gh repo clone ChrisAchinga/javascript`\n\n![Image for post](https://miro.medium.com/max/60/1*U0WvFiMOwWgYcTzAegxiFA.png?q=20)\n\n<noscript><img alt="Image for post" class="t u v gv aj" src="https://miro.medium.com/max/2732/1*U0WvFiMOwWgYcTzAegxiFA.png" width="1366" height="768" srcSet="https://miro.medium.com/max/552/1*U0WvFiMOwWgYcTzAegxiFA.png 276w, https://miro.medium.com/max/1104/1*U0WvFiMOwWgYcTzAegxiFA.png 552w, https://miro.medium.com/max/1280/1*U0WvFiMOwWgYcTzAegxiFA.png 640w, https://miro.medium.com/max/1400/1*U0WvFiMOwWgYcTzAegxiFA.png 700w" sizes="700px"/></noscript>\n\nSimple as that and you are done.\n\nA simple start to becoming a GitHub cli master!',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744721958ef13879b94c63'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4338.8881,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: [],
      totalReactions: 0,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: true,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fb973b61b7ab0041800d9d3',
      title: 'The GitHub CLI (gh repo clone)',
      type: 'story',
      isRepublished: true,
      originalArticleURL:
        'https://medium.com/devcnairobi/the-github-cli-gh-repo-clone-c0595e5672de',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'the-github-cli-gh-repo-clone',
      cuid: 'ckhs4kd7906jnt4s1dn9m0hhl',
      importedFromMedium: true,
      dateAdded: '2020-11-01T20:06:03.000Z',
      hasCustomDate: true,
      series: '5fb973291b7ab0041800d9ce',
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fb973570ae19203f6d93376',
      hasPinnedTag: false,
      readTime: 4,
      __v: 0,
      dateUpdated: '2020-11-21T20:11:27.743Z',
      pendingPublicationApproval: false,
      viewsUpdatedOn: 1668940256563,
      uniqueReactions: [],
      reactionToCountMapUnique: {
        any: 1,
      },
      id: '5fb973b61b7ab0041800d9d3',
    },
    {
      audioUrls: {
        female:
          'https://prodstage-services-audiohashnodeaudioblog02f14287-1k4ui7vrgv13u.s3-us-west-2.amazonaws.com/ckhs4q7pp06kbt4s116rh71nn-female',
      },
      reward: {
        type: 'xlm',
      },
      sourcedFromGithub: false,
      githubAsSourceMeta: null,
      isAnonymous: false,
      views: 31,
      slugOverridden: false,
      coverImage:
        'https://cdn.hashnode.com/res/hashnode/image/upload/v1608274285494/Zy-4E_rCC.png',
      autoGeneratedCover: '',
      brief:
        'DevC Nairobi: Never, Not a Community\n\nI would like to take this time and write my appreciation to the diverse community that has made it all possible for me and all other members.\nMy Community\nBeing part of a community is a gateway to your career suc...',
      content:
        '<p><span class="s"></span></p>\n<h1 id="devc-nairobi-never-not-a-community">DevC Nairobi: Never, Not a Community</h1>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1608274396139/8M05Oho_s.jpeg" alt="devcnbi.jpg" /></p>\n<p>I would like to take this time and write my appreciation to the diverse community that has made it all possible for me and all other members.</p>\n<h1 id="my-community">My Community</h1>\n<p>Being part of a community is a gateway to your career success. Developer communities play a larger part in fulfilling this.</p>\n<p><a target="_blank" href="https://www.facebook.com/groups/DevCNairobi">Facebook Developer Circles: Nairobi</a> has been really helpful to my career and a source of motivation to keep building a stronger foundation, and ooh yeah write clean code. The weekly posts by the admins and moderators, the campus communities, and the free quality courses are just but a few blessings from the community.</p>\n<h1 id="the-devc-programs">The DevC Programs</h1>\n<p>Every day of the week, I wake to amazing posts by the group that really fuel my day, take a look at them:</p>\n<h2 id="medium-mondays">Medium Mondays</h2>\n<p><em>Every Monday, we get to read good and fun technical articles written by our very own members. They are inspiring and easy to understand.</em></p>\n<h2 id="happy-hour-wednesdays">Happy Hour Wednesdays</h2>\n<p><em>Previously during the Happy Hour Wednesdays, we’ve had Big O Notations challenges and examples to understand the algorithms and more.</em></p>\n<h2 id="cafe-thursdays">Cafe Thursdays</h2>\n<p><em>Newly introduced and it’s all about Mentorship! This is surely a treasure to keep hunting for.</em></p>\n<h2 id="fireside-fridays">Fireside Fridays</h2>\n<p><em>Every Friday we get inspirations by reading interviews from experienced Developers in the field, how the came to achieve their goals and their day-to-day life. If this won’t make you work smarter to achieve your dreams and goals …</em></p>\n<h2 id="devc-nairobi-at-campus">DevC Nairobi at Campus</h2>\n<p><em>Well, this goes without saying, it has offered a platform to practice leadership of communities and more ways to get engaged and network in the DevC Community. It’s all great.</em></p>\n<p>To Conclude, I’d like to appreciate our leads, Carol, Eddie, Wambui, Jillo, and the whole squad. We all making coding simple, easy, and fun.</p>\n',
      contentMarkdown:
        '<span class="s"></span>\n\n# DevC Nairobi: Never, Not a Community\n\n\n\n![devcnbi.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1608274396139/8M05Oho_s.jpeg)\n\nI would like to take this time and write my appreciation to the diverse community that has made it all possible for me and all other members.\n\n# My Community\n\nBeing part of a community is a gateway to your career success. Developer communities play a larger part in fulfilling this.\n\n[Facebook Developer Circles: Nairobi](https://www.facebook.com/groups/DevCNairobi) has been really helpful to my career and a source of motivation to keep building a stronger foundation, and ooh yeah write clean code. The weekly posts by the admins and moderators, the campus communities, and the free quality courses are just but a few blessings from the community.\n\n# The DevC Programs\n\nEvery day of the week, I wake to amazing posts by the group that really fuel my day, take a look at them:\n\n## Medium Mondays\n\n_Every Monday, we get to read good and fun technical articles written by our very own members. They are inspiring and easy to understand._\n\n## Happy Hour Wednesdays\n\n_Previously during the Happy Hour Wednesdays, we’ve had Big O Notations challenges and examples to understand the algorithms and more._\n\n## Cafe Thursdays\n\n_Newly introduced and it’s all about Mentorship! This is surely a treasure to keep hunting for._\n\n## Fireside Fridays\n\n_Every Friday we get inspirations by reading interviews from experienced Developers in the field, how the came to achieve their goals and their day-to-day life. If this won’t make you work smarter to achieve your dreams and goals …_\n\n## DevC Nairobi at Campus\n\n_Well, this goes without saying, it has offered a platform to practice leadership of communities and more ways to get engaged and network in the DevC Community. It’s all great._\n\nTo Conclude, I’d like to appreciate our leads, Carol, Eddie, Wambui, Jillo, and the whole squad. We all making coding simple, easy, and fun.',
      hasPolls: false,
      totalPollVotes: 0,
      upvotes: 0,
      downvotes: 0,
      tags: ['56744722958ef13879b9514c'],
      untaggedFrom: [],
      upvotedBy: [],
      downvotedBy: [],
      popularity: 4281.296,
      responses: [],
      responseCount: 0,
      replyCount: 0,
      followers: [],
      isActive: true,
      isFeatured: false,
      isEngaging: false,
      answeredByTarget: false,
      inviters: [],
      isDelisted: false,
      isNotified: false,
      duplicatePosts: [],
      numCollapsed: 0,
      hasReward: false,
      bookmarkedIn: [],
      similarPostIds: [],
      reactions: ['5c090d96c2a9c2a674d35485'],
      totalReactions: 1,
      reactionsByCurrentUser: [],
      isPinnedToBlog: false,
      disableComments: true,
      commentsPaused: false,
      hasLatex: false,
      syncAlgolia: false,
      enableToc: false,
      toc: [],
      numUniqueUsersWhoReacted: 0,
      _id: '5fb974c71b7ab0041800d9df',
      title: 'DevC Nairobi: Never Not a Community',
      type: 'story',
      isRepublished: false,
      originalArticleURL: '',
      partOfPublication: true,
      publication: '5fb96c251b7ab0041800d995',
      slug: 'devc-nairobi-never-not-a-community',
      cuid: 'ckhs4q7pp06kbt4s116rh71nn',
      importedFromMedium: true,
      dateAdded: '2020-10-02T20:11:59.000Z',
      hasCustomDate: true,
      pollOptions: [],
      badges: [],
      questionReplies: [],
      contributors: [],
      author: '5fb96bf21b7ab0041800d98f',
      followersCount: 1,
      draft: '5fb974a71b7ab0041800d9de',
      hasPinnedTag: false,
      readTime: 3,
      __v: 0,
      series: null,
      dateUpdated: '2020-12-18T06:53:23.552Z',
      pendingPublicationApproval: false,
      reactionToCountMap: {
        reaction_5c090d96c2a9c2a674d35485: 1,
      },
      viewsUpdatedOn: 1662483615139,
      uniqueReactions: ['5c090d96c2a9c2a674d35485'],
      reactionToCountMapUnique: {
        reaction_5c090d96c2a9c2a674d35485: 1,
        reaction_5c090d96c2a9c2a674d35484: 0,
      },
      id: '5fb974c71b7ab0041800d9df',
    },
  ],
}
